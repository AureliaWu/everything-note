<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>MySQL数据库</title>
      <link href="/2020/10/31/computerLanguage/database/mysql/"/>
      <url>/2020/10/31/computerLanguage/database/mysql/</url>
      <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><p>程序和数据的访问都有聚集成群的倾向，在一个时间段内仅使用其中一小部分（称<strong>空间局部性</strong>），或者最近访问过的程序代码和数据，很快又会被访问的可能性很大(称<strong>时间局部性</strong>)。</p><h3 id="磁盘预读"><a href="#磁盘预读" class="headerlink" title="磁盘预读"></a>磁盘预读</h3><p>磁盘预读的长度一般为页(page)的整数倍</p><ul><li>页(page)是存储器的逻辑块，操作系统往往将主存和磁盘存储区分割为连续的大小等的块，每个存储块称为一页（在许多操作系统中，页大小通常为4k），主存和磁盘以页为单位交换数据。</li></ul><h2 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h2><ul><li>索引的目的是为了加速查询</li><li>索引是存在磁盘中而不是内存中</li><li>索引的文件存储形式与存储引擎有关</li><li><p>索引文件的结构</p><ul><li><p>hash</p><p>  哈希表本质上是散列表，可以完成索引的存储，每次在添加索引的时候需要计算指定列的hash值，取模运算后计算出下标，将元素插入下标位置即可。</p><p>  适合场景： </p><ul><li>等值查询</li><li><p>表中的数据是无序数据，范围查找的时候比较浪费时间，需要挨个进行便利操作</p><p>在企业中多数的查询是范围查询，因此hash表不是特别适合</p><p>hash表在使用的时候需要将全部数据加载到内存，比较耗费内存的空间，这点上来说，使用hash表也不是很合适</p></li></ul></li><li><p>二叉树</p></li><li>B树</li><li>B+树</li></ul></li></ul><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><p>mysql索引的五种类型： 主键索引、唯一索引、普通索引和全文索引、组合索引。通过给字段添加索引可以提高数据的读取速度，提高项目的并发能力和抗压能力</p><ul><li><p>主键索引</p><p>  主键索引是一种唯一性索引，但它必须指定为PRIMARY KEY，每个表只能有一个主键</p></li><li><p>唯一索引</p><p>  索引列的所有值都只能出现一次，即必须唯一，值可以为空</p></li><li><p>普通索引</p><p>  基本的索引类型，值可以为空，没有唯一性的限制（覆盖索引）</p><p>  覆盖索引： sql语句中只select索引字段</p><p>  覆盖索引可避免回表操作</p></li><li><p>全文索引</p><p>  MyISAM支持，Innodb在5.6之后支持</p><p>  全文索引的索引类型为FULLTEXT。全文索引可以在<code>varchar</code>、<code>char</code>、<code>text</code>类型的列上创建</p></li><li><p>组合索引</p><p>  多列值组成一个索引，专门用于组合搜索(最左匹配原则)</p><p>  最左匹配原则：优先匹配前一个字段，例如用<code>name</code>和<code>age</code>作为组合索引，使用<code>name</code>+<code>age</code>组合查询时会先匹配<code>name</code>再匹配<code>age</code>,如果没有<code>name</code>，那么<code>age</code>也无法参与匹配</p></li></ul><h3 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h3><p>索引在插入新的值的时候，为了维护索引的有序性，必须要维护</p><p>在维护索引的时候需要分以下几种情况：</p><ul><li><p>如果插入一个比较大的值，直接插入即可，几乎没有成本</p></li><li><p>如果插入的是中间的某一个值，需要逻辑上移动后续的元素，空出位置</p></li><li><p>如果需要插入的数据页满了，就需要单独申请一个新的数据页，然后移动部分数据过去，叫做<strong>页分裂</strong>，此时性能会受影响，同时空间的使用率也会降低，除了页分裂之外还包括页合并</p></li><li><p>尽量使用自增主键作为索引</p></li></ul><h2 id="MySQL整体结构"><a href="#MySQL整体结构" class="headerlink" title="MySQL整体结构"></a>MySQL整体结构</h2><p><img src="/source/data/img/mysql/mysql整体结构.png" alt="MySQL整体结构图"></p><p>不同存储引擎，数据文件和索引文件存放的位置是不同的，因此有了分类：</p><ul><li><p>聚簇索引</p><p>数据和文件放在一起： <code>innodb</code></p><p><code>.frm</code>后缀文件存放的是表结构<br><code>.ibd</code>后缀文件存放的是数据文件和索引文件</p></li></ul><p>注意： <code>mysql</code>的<code>innodb</code>存储引擎默认情况下会把所有的数据文件放到表空间，不会为每一个单独的表保存一份数据文件，如果需要将每一个表单独使用文件保存，需要执行语句： <code>set global innodb_file_per_table = on;</code></p><ul><li><p>非聚簇索引</p><p>  数据和索引单独一个文件: <code>MyISAM</code></p><p>  <code>.frm</code>: 存放表结构<br>  <code>.MYI</code>: 存放索引数据<br>  <code>.MYD</code>: 存放实际数据</p></li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ul><li><p>数据库中最常见的慢查询优化方法是什么？</p></li><li><p>为什么加索引能优化慢查询</p></li><li><p>你知道哪些数据结构可以提高查询速度</p></li><li><p>这些数据结构既然都能优化查询速度，MySQL为何选择使用B+树？</p></li><li><p>索引下推</p><p>  在回表前把数据做一次筛选</p></li></ul><p>常见树结构： 多叉树、二叉树、AVL树、红黑树</p><p>树结构中，左子树必须小于根节点，右子树必须大于根节点</p><p>多叉树(从左到右是有序) –&gt; 二叉树(二分查找) –&gt; AVL树(平衡树) –&gt; 红黑树</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><ul><li><p>AVL树：AVL树是一棵严格意义上的平衡树，最高子树和最低子树高度之差不能超过1，因此在进行元素插入的时候会进行1到N次的旋转，严重影响插入的性能</p></li><li><p>红黑树： 红黑树是基于AVL树的一个升级，损失了部分查询的性能来提升插入的性能，在红黑树中，最低子树跟最高子树之差小于2倍即可，例如最低子树是4层，那么最高子树不能高于8层。在插入时不需要进行N多次的旋转操作，而且还加入了变色的特性来满足插入和查询性能的平衡</p></li></ul><p>二叉树及其N多的变种都不能支撑索引，因为其树的深度无法控制，或者插入数据的性能比较低</p><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>B树的特点：</p><ol><li>所有键值分布在整棵树上</li><li>搜索有可能在非叶子节点(一个节点下面没有左右子树称为叶子节点，否则为非叶子节点)结束，在关键字全集内做一次查找性能逼近二叉树</li><li>每个节点最多拥有m（阶）个子树</li><li>根节点至少有2个子树</li><li>分支节点至少拥有m/2棵子树（除根节点和叶子节点外都是分支节点）</li><li>所有叶子节点都在同一层，每个节点最多可以有m-1个key，并且以升序排列</li></ol><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>B+树是在B树的基础之上做的一种优化，变化如下：</p><ol><li>B+树每个节点可以包含更多的节点，这么做的原因有两个，第一是为了降低树的高度；第二是将数据范围变为多个区间，区间越多数据检索越快</li><li>非叶子节点存储Key，叶子节点存储key和数据</li><li>叶子节点两两指针相互连接（符合磁盘的预读特性），顺序查询性能更高</li></ol><p>注意事项：</p><ol><li>InnoDB是通过B+树结构对主键创建索引，然后叶子节点中存储记录，如果没有主键，那么会选择唯一键，如果没有唯一键，那么会生成一个6位的row_id来作为主键</li><li>如果创建索引的键是其他字段，那么在叶子节点中存储的是该记录的主键，然后再通过主键索引找到对应的记录，此过程称为<strong>回表</strong></li></ol><h2 id="MySQL存储引擎"><a href="#MySQL存储引擎" class="headerlink" title="MySQL存储引擎"></a>MySQL存储引擎</h2><table><thead><tr><th></th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>索引类型</td><td>非聚簇索引</td><td>聚簇索引</td></tr><tr><td>支持事务</td><td>否</td><td>是</td></tr><tr><td>支持表锁</td><td>是</td><td>是</td></tr><tr><td>支持行锁</td><td>否</td><td>是</td></tr><tr><td>支持外键</td><td>否</td><td>是</td></tr><tr><td>支持全文索引</td><td>是</td><td>是(5.6后支持)</td></tr><tr><td>适合操作类型</td><td>大量select</td><td>大量insert、delete、update</td></tr></tbody></table><h2 id="MySQL架构"><a href="#MySQL架构" class="headerlink" title="MySQL架构"></a>MySQL架构</h2><p>客户端 –&gt; 连接器（管理连接，权限验证） –&gt; 查询缓存 –&gt; 分析器（词法分析，语法分析） –&gt; 优化器（执行计划，索引选择） –&gt; 执行器（操作引擎，返回结果） –&gt; 存储引擎（存储数据，提供读写接口）</p><p>连接器、查询缓存、分析器、优化器、执行器属于服务端</p><ul><li><p>连接器</p><p>  连接器负责跟客户端建立连接，获取权限、维持和管理连接</p><pre><code>- 用户名密码验证- 查询权限信息，分配对应权限- 可以使用`show processlist`语句查看现在的连接- 如果太长时间没有动静就会自动断开，通过`wait_timeout`控制，默认8小时</code></pre><p>  连接可以分为两类：</p><pre><code>- 长连接： 推荐使用，但要周期性断开长连接- 短连接</code></pre></li><li><p>查询缓存</p><p>当执行查询语句的时候，会先去查询缓存中查看结果，之前执行过的sql语句及其结果可能以<code>key-value</code>的形式存储在缓存中，如果能找到则直接返回，如果找不到，就继续执行后续的阶段</p><p>不推荐使用查询缓存：</p><ol><li>查询缓存的失效比较频繁，只要表更新，缓存就会清空</li><li>缓存对应新更新的数据命中率比较低</li></ol></li><li><p>分析器</p><ul><li><p>词法分析：MySQL需要把输入的字符串进行识别每个分代表什么意思。把<code>字符串T</code>识别成<code>表名T</code>；把<code>字符串ID</code>识别成<code>列ID</code></p></li><li><p>语法分析： 根据语法规则判断这个SQL语句是否满足MySQL的语法，如果不符合就会报错<code>You have an error in your SQL synta</code></p></li></ul></li><li><p>优化器</p><p>  在具体执行SQL语句之前，要先经过优化器的处理： 当表中有多个索引的时候，决定用哪个索引；当SQL语句需要做多表关联的时候，决定表的连接顺序等等</p><p>  不同的执行方式对SQL语句的执行效率影响很大</p><ul><li><p>RBO： 基于规则的优化</p></li><li><p>CBO： 基于成本的优化</p></li></ul></li><li><p>执行器 </p><p>执行语句，返回结果</p></li><li><p>存储引擎</p><p>  存储数据</p></li></ul><h2 id="MySQL日志"><a href="#MySQL日志" class="headerlink" title="MySQL日志"></a>MySQL日志</h2><h3 id="Redo日志-——-InnoDB存储引擎的日志文件"><a href="#Redo日志-——-InnoDB存储引擎的日志文件" class="headerlink" title="Redo日志 —— InnoDB存储引擎的日志文件"></a>Redo日志 —— InnoDB存储引擎的日志文件</h3><p>当发生数据修改的时候InnoDB引擎会先将记录写到redo log中，并更新内存，此时更新就算是完成了，同时InnoDB引擎会在何时的时机将记录操作到磁盘中</p><p>Redolog是固定大小的，是循环写的过程</p><p>有了Redolog后，InnoDB就可以保证及时数据库发生异常重启，之前的记录也不会丢失，叫做<code>crash-safe</code></p><h3 id="Undo-log"><a href="#Undo-log" class="headerlink" title="Undo log"></a>Undo log</h3><p>Undo log是为了实现事务的原子性，在MySQL数据库InnoDB存储引擎中，还用Undo log来实现多版本并发控制（简称<code>MVCC</code>）</p><p>在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为<code>Undo log</code>）。然后进行数据修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用Undo log中的备份将数据恢复到事务开始之前的状态</p><p><strong>Undo log是逻辑日志</strong>，可以理解为：</p><ul><li>当delete一条记录时，undo log中会记录一条多赢的insert记录</li><li>当insert一条记录时，Undolog中会记录一条对应的delete记录</li><li>当update一条数据时，它记录一条对应相反的update记录</li></ul><p><strong>Redo log 和 Undo log 都是InnoDB独有的日志，MyISAM中没有。Redo log叫前滚日志，保证数据库回到发生异常(比如突然断电)前的持久化状态；Undo log叫回滚日志，是记录数据更新后的持久化状态。</strong></p><h3 id="Binlog-——-服务端的日志文件"><a href="#Binlog-——-服务端的日志文件" class="headerlink" title="Binlog —— 服务端的日志文件"></a>Binlog —— 服务端的日志文件</h3><p>Binglog是服务端(server层)的日志，主要做mysql功能层面的事情</p><p>与Redo日志的区别：</p><ul><li>Redo日志是InnoDB独有的，Binlog是所有引擎都可以使用的</li><li>Redo是物理日志，记录的是在某个数据页上做了什么修改；Binlog是逻辑日志，记录的是这个语句的原始逻辑</li><li>Redo是循环写的，空间会用完；Binlog是可以追加写的，不会覆盖之前的日志信息</li></ul><p><strong>MySQL默认不开启Binlog</strong></p><p>Binlog会记录所有的逻辑，并且采用追加写的方式，一般在企业中数据库会有备份系统，可以定期执行备份，备份的周期可以自己设置。</p><p>恢复数据的过程： </p><ol><li>找到最近一次的全量备份数据</li><li>从备份的时间点开始，将备份的binlog取出来，重放到要恢复的那个时刻</li></ol><h2 id="MySQL执行计划"><a href="#MySQL执行计划" class="headerlink" title="MySQL执行计划"></a>MySQL执行计划</h2><p>使用<code>explain</code> + SQL语句来模拟优化器执行SQL查询语句，从而知道MySQL是如何处理SQL语句的</p><h3 id="执行计划中包含的信息（属性）"><a href="#执行计划中包含的信息（属性）" class="headerlink" title="执行计划中包含的信息（属性）"></a>执行计划中包含的信息（属性）</h3><ol><li><p>id</p><p>select查询的序列号包含一组数字，表示查询中执行select子句或者操作表的顺序</p><p>id号分为三种情况：</p><ul><li><p>如果id相同，那么执行顺序从上到下</p></li><li><p>如果id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p></li><li><p>id相同和不同的同时存在，相同的可以认为是一组，从上往下顺序执行。在所有组中，id值越大优先级越高，越先执行</p></li></ul></li><li><p>select_type</p><p><code>SIMPLE</code>: 简单查询</p><p><code>PRIMARY</code>: 最外层查询</p><p><code>UNION</code>: 若第二个语句在union之后则标记为union</p><p><code>DEPENDENT UNION</code>: 跟union关联，外层查询依赖内层查询结果</p><p><code>UNION RESULT</code>: 从union表中获取结果select</p><p><code>SUBQUERY</code>: 子查询</p><p><code>DEPENDENT SUBQUERY</code>: 子查询是结果集合是D<code>EPENDENT SUBQUERY</code>,单个值是<code>SUBQUERY</code></p><p><code>DERIVED</code>: from子句中出现的子查询，也叫做衍生类</p><p><code>UNCACHEABLE SUBQUERY</code>: 表示使用子表查询结果不能被缓存</p><p><code>UNCACHEABLE UNION</code>: 表示union的查询结果不能被缓存</p></li><li><p>table</p><p>对应正在访问哪一个表、表名或者别名，可能是临时表挥着union合并结果集</p><ul><li>如果是具体表名，则表明从实际的物理表中获取数据，当然也可以是表的别名</li><li>表名是drivedN的形式，表示使用了id为N的查询产生的衍生表，当有union result的时候，表名是union n1,n2等的形式，n1,n2表示参与union的id</li></ul></li><li><p>partitions</p><p>分区</p></li><li><p>type</p><p>访问类型，表示当前sql语句执行时是以何种方式访问我们的数据，访问类型有很多，效率从高到低分别是：</p><p><code>sysytem &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_of_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</code></p><p>一般情况下，得保证查询至少达到<code>range</code>级别，最好能达到<code>ref</code></p><ul><li><p>ALL: 全表扫描，一般情况下，出现这种sql语句而且数据量比较大的话，那么久需要进行优化</p></li><li><p>index： 全索引扫描，比All效率好。主要两种情况，一种是当前的查询是覆盖索引，即我们需要的数据在索引中就可以索取；第二种者是使用了索引进行排序，这样就避免数据的重排序</p></li><li><p>range： 表示利用索引联合查询的时候限制了范围，在指定范围内进行查询</p></li><li><p>index_subquery: 利用索引关联子查询，不需要再扫描全表</p></li><li><p>unique_subquery</p></li><li>index_merge</li><li>ref_of_null</li><li>fulltext</li><li><p>ref<br>使用了非唯一性索引进行查找</p></li><li><p>eq_ref</p></li><li><p>const<br>这个表至多有一个匹配行</p></li><li><p>sysytem</p><p>表里面只有一行记录（等于系统表）</p></li></ul></li><li><p>possible_keys</p><p>显示可能会用到的索引</p></li><li><p>key</p><p>实际使用的索引，如果为null，则没有使用索引，查询中若使用了覆盖索引，则该索引和查询的select字段重叠</p></li><li><p>key_len</p><p>索引中使用的字节数</p></li><li><p>ref</p><p> 显示索引的哪一列被使用了，如果可能的话，是一个常数</p></li><li><p>rows</p><p>根据表的统计信息及索引使用情况，大致估算出找出所需记录读取的行数，此参数很重要，直接反映的sql找了多少数据，在完成目的的情况下，越少越好</p></li><li><p>extra</p><p>包含额外的信息</p></li></ol><h2 id="MySQL的锁机制"><a href="#MySQL的锁机制" class="headerlink" title="MySQL的锁机制"></a>MySQL的锁机制</h2><p><strong>锁是计算机协调多个进程或线程并发访问某一资源的机制。</strong></p><p>不同的存储引擎支持不同的锁机制。</p><ul><li><code>MyISAM</code>和<code>MERMORY</code>存储引擎采用的是表级锁(<code>table-level locking</code>)</li><li><code>InnoDB</code>存储引擎支持行级锁(<code>row-level locking</code>)，也支持表级锁，但默认情况下采用行级锁</li></ul><p><strong>表级锁</strong>： 开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突的概率最高，并发度最低</p><p><strong>行级锁</strong>：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高</p><p>仅从锁的角度来说，表级锁更适合以查询为主，只有少量按索引条件更新数据的应用，如web应用；行级锁更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理(<code>OLTP</code>)系统</p><p><code>OLTP</code>: <code>ONLINE TRANSIATION PROCESS</code> 联机事务处理</p><p><code>OLAP</code>: <code>ONLINE ANALYSIS PROCESS</code> 联机分析系统 </p><h3 id="MyISAM表锁"><a href="#MyISAM表锁" class="headerlink" title="MyISAM表锁"></a>MyISAM表锁</h3><p>MySQL的表级锁有两种模式： <strong>表共享读锁(Table Read Lock)</strong>、<strong>表独占写锁(Table Write Lock)</strong></p><p>对MyISAM表的读操作，不会阻塞其他用户对同一张表的读请求，但会阻塞对同一表的写请求；对MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作；MyISAM表的读操作与写操作之间、以及写操作之间是串行的</p><h4 id="MyISAM写阻塞读"><a href="#MyISAM写阻塞读" class="headerlink" title="MyISAM写阻塞读"></a>MyISAM写阻塞读</h4><p>当一个线程获得对一个表的写锁之后，只有持有锁的线程可以对表进行更新操作。其他线程的读写操作都会等待，直到锁释放为止。</p><p><code>lock table xxx write;</code>（锁表语句，给表xx加写锁）</p><p>…执行一些操作…</p><p><code>unlock tables;</code>(释放锁)</p><h4 id="MyISAM读阻塞写"><a href="#MyISAM读阻塞写" class="headerlink" title="MyISAM读阻塞写"></a>MyISAM读阻塞写</h4><p>一个session使用<code>lock table</code>给表加读锁，这个session可以锁定表中的记录，但更新和访问其他表都会提示错误，同时另一个session可以查询表中的记录，但更新就会出现锁等待。</p><p><code>lock table xxx read;</code> （锁表语句，给表加读锁）</p><p><code>unlock tables;</code>（释放锁）</p><p><strong>注意：</strong> MyISAM在执行查询语句之前，会自动给涉及的所有表加读锁，在执行更新操作前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要使用命令来显示加锁。</p><h3 id="InnoDB锁"><a href="#InnoDB锁" class="headerlink" title="InnoDB锁"></a>InnoDB锁</h3><ol><li>事务及其ACID属性</li></ol><p>事务是由一组SQL语句组成的逻辑处理单元，事务具有四属性，通常称为事务的ACID属性。</p><p>原子性(<code>Actomicity</code>): 事务是一个原子操作单位，其对数据的修改，要么全都执行，要么全都不执行</p><p>一致性(<code>Consistent</code>): 在事务开始和完成时，数据都必须保持一致状态</p><p>隔离性(<code>Isolation</code>): 数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行</p><p>持久性(<code>Durable</code>): 事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持</p><ol start="2"><li><p>并发事务带来的问题</p><p>相对于串行处理来说，并发事务处理能力大大增加数据库资源的利用率，提高数据库系统的事务吞吐量，从而可以支持更多用户的并发操作，但与此同时会带来一下问题：</p><ul><li><strong>脏读</strong>： 一个事务正在对一条记录做修改，在这个事务提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系，这种现象被形象地叫做脏读</li><li><strong>不可重复读</strong>： 一个事务正在读取某些已经发生了改变或某些记录已经被删除了!这种现象叫做“不可重复读”</li><li><strong>幻读</strong>： 一个事务按相同的查询条件重新读取以前检所过的数据，却发现其他事务插入了满足其条件的新数据，这种现象就称为”幻读“</li></ul></li></ol><p>以上出现的问题都是数据库读一致性的问题，可以通过事务的隔离机制来进行保证</p><ol start="3"><li><p>InnoDB的行锁模式及加锁情况</p><p><strong>共享锁(s)</strong>: 又称读锁。允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能在对A加S锁，而不能加X锁，知道T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何改动</p><p><strong>排它锁(x)</strong>: 又称写锁。允许获取排他锁的事务更新数据，阻止其他事务取得相同的数据集 共享读锁和排他写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁</p><p>MySQL InnoDB引擎默认的修改数据语句：<code>update</code>,<code>delete</code>,<code>insert</code>都会自动给涉及到的数据加上排他锁，select语句默认不会加任何类型锁。如果加排他锁可以使用<code>select ... for upadte;</code>语句，加共享锁可以使用<code>select ... lock in share mode;</code>语句。所以加排他锁的数据行在其他事务中是不能修改数据的，也不能通过<code>for update</code>和<code>lock in share mode</code>锁的方式查询数据，但可以直接通过<code>select ... from ...</code>查询数据，因为普通查询没有任何锁机制</p></li></ol><h4 id="InnoDB行锁实现方式"><a href="#InnoDB行锁实现方式" class="headerlink" title="InnoDB行锁实现方式"></a>InnoDB行锁实现方式</h4><p>给索引上的索引加说来实现行锁。这一点上MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着： <strong>只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于MyISAM的表锁：</p><ol><li>共享读锁(s)之间是兼容的，但共享读锁(s)与排他写锁(X)之间，以及排他写锁(X)之间是互斥的，也就是说读和写是串行的。</li><li>在一定条件下，MyISAM允许查询和插入并发执行，我们可以利用这一点来解决应用中对同一表查询和超如的锁争用问题</li><li>MyISAM默认的锁调度机制是写优先，但这不一定适合所有应用，用户可以通过设置<code>LOW_PRIORITY_UPDATES</code>参数，或在INSERT、UPDATE、DELETE语句中指定<code>LOW_PRIORITY</code>选项来调节读写锁的争用</li><li>由于表锁的锁定粒度大，读写之间又是串行的，因此，如果更新操作较多，MyISAM表可能会出现严重的锁等待，可以考虑采用InnoDB表来减少锁冲突</li></ol><p>对于InnoDB表锁：</p><ol><li>InnoDB行锁是基于索引实现的，如果不通过索引访问数据，InnoDB会使用表锁</li><li>在不同的隔离级别下，InnoDB的锁机制和一致性读策略不同</li></ol><p>用户可以通过设计和SQL调整等措施减少锁冲突和死锁：</p><ul><li>尽量使用较低的隔离级别： 精心设计索引并尽量使用索引访问数据，使加锁更加准确，从而减少锁冲突的机会</li><li>选择合理的事务大小，小失误发生锁冲突的几率也更小</li><li>给记录集显式加锁时，最好一次性请求足够级别的锁。比如要修改数据的话，最好直接申请排他锁，而不是先申请共享锁，修改时在请求排他锁，这样容易产生死锁</li><li>不同的程序访问同一组表时，应尽量约定相同的顺序访问各表，对一个表而言尽可能以固定的顺序存取表中的行，这样可以大大减少死锁的机会</li><li>尽量使用相等条件范文数据，这样可以避免间隙锁对并发插入的影响；不要申请超过实际需要的锁级别；除非必须，查询时不要显示加锁；</li><li>对于一些特定的事务，可以使用表锁来提高处理速度或减少死锁的可能</li></ul>]]></content>
      
      <categories>
          
          <category> Database, MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> Database </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>反射</title>
      <link href="/2020/10/27/computerLanguage/java/beforeArchitect/%E5%8F%8D%E5%B0%84/"/>
      <url>/2020/10/27/computerLanguage/java/beforeArchitect/%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JAVA反射机制是在运行状态中，对于任意一个类都能够知道这个类的所有属性和方法；对于任意一个对象，都能调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法功能称为Java语言的反射机制。 </p><p>想要解剖一个类，必须先要获取到该类的字节码文件对象。而而解剖使用的就是Class类中的方法，所以现在要获取到每一个字节码文件对应的Class类型的对象。</p><h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><ol><li><p>通过class.forName()来获取Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"com.xx.entity.Emp"</span>);</span><br></pre></td></tr></table></figure></li><li><p>通过<code>类名.class</code>来获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Emp&gt; <span class="class"><span class="keyword">class</span> </span>= Emp.class;</span><br></pre></td></tr></table></figure></li><li><p>通过对象的<code>getClass()</code>来获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;? extends Emp&gt; clazz = <span class="keyword">new</span> Emp().getClass();</span><br></pre></td></tr></table></figure></li><li><p>基本数据类型可以通过TYPE的方式获取class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Integer&gt; type = Integer.TYPE;</span><br></pre></td></tr></table></figure></li></ol><p>推荐第1、2种方式</p><h2 id="Class对象方法"><a href="#Class对象方法" class="headerlink" title="Class对象方法"></a>Class对象方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.xx.xx.类名"</span>);</span><br></pre></td></tr></table></figure><ul><li><p><code>getFields()</code></p><p>获取成员变量，包括子类、父类，同时只能包含公共的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = clazz.getFields();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Field field: fields) &#123;</span><br><span class="line">    <span class="comment">// 字段名称</span></span><br><span class="line">    field.getName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字段类型</span></span><br><span class="line">    field.getType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字段修饰符</span></span><br><span class="line">    field.getModifiers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>getDeclaredFields()</code></p><p>获取当前类的所有属性，不仅仅是公共访问修饰符，所有的访问修饰符都可以拿到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line"><span class="comment">// xx表示该类中的某个字段名</span></span><br><span class="line">Field xx = clazz.getDeclaredField(<span class="string">"xx"</span>);</span><br></pre></td></tr></table></figure></li><li><p>为对象设值</p><p>假设有一个类<code>Student</code>，含有私有属性<code>address</code>(用<code>private</code>修饰的字段)，正常情况下<code>private</code>修饰的属性无法被外界访问，但是通过反射能够为<code>address</code>字段设值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"com.xx.entity.Student"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取address字段</span></span><br><span class="line">Field address = clazz.getDeclaredField(<span class="string">"address"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将address字段的访问权限设置为可访问，true表示能访问</span></span><br><span class="line">address.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为address字段赋值</span></span><br><span class="line">Object o = clazz.newInstance();</span><br><span class="line">address.set(o, <span class="string">"上海市"</span>);</span><br></pre></td></tr></table></figure><p><strong>反射在一定程度上破坏了封装性，需要合理使用</strong></p></li><li><p><code>getMethods()</code></p><p>获取对象中的普通方法，包含当前对象和父类对象的公共方法</p></li><li><p><code>getDeclaredMethods()</code></p><p>获取当前类中的所有方法，包括私有方法</p></li><li><p><code>getConstructors()</code></p><p>获取对象所有的公有构造方法,不包含父类构造方法</p></li><li><p><code>getDeclaredConstructors()</code></p><p>获取对象的所有构造方法，包括私有,不包含父类构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] declaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用私有的构造方法</span></span><br><span class="line">Constructor declaredConstructor = clazz.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line"></span><br><span class="line">declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">Object o2 = declaredConstructor.newInstance(<span class="string">"参数1"</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JDBC</title>
      <link href="/2020/10/25/computerLanguage/java/beforeArchitect/JDBC/"/>
      <url>/2020/10/25/computerLanguage/java/beforeArchitect/JDBC/</url>
      <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><ul><li><p><code>ODBC</code>: 一套连接数据源的标准</p></li><li><p><code>JDBC</code>: <code>Java Database Connectivity</code></p><p>  基于Java语言访问数据库的一种技术。</p><p>  JDBC是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序，同时JDBC也是个商标名</p><p>  JDBC设计思想： 由SUN公司提供访问数据库的接口，由数据库厂商提供对这些接口的实现，程序员编程时都是针对接口进行编程的。</p><p>  JDBC包括一套JDBC的API和一套程序员和数据库厂商都必须去遵守的规范。</p><pre><code>- java.sql包： 提供访问数据库基本的功能- javax.sql包： 提供扩展的功能</code></pre><p>  JDBC是数据库的中间件</p><p>  JDBC可以做什么？</p><pre><code>- 连接到数据库- 在java app中执行SQL命令- 处理结果</code></pre></li><li><p><code>SPI</code></p><p><code>Service Provider Interface</code><br>。是JDK内置的一种服务提供发现机制，SPI是一种动态替换发现的机制，比如有个接口，想运行时动态给它添加实现，你只需要添加一个实现。我们经常遇到的就是<code>java.sql.Driver</code>接口，其他不同厂商可以针对同一接口做出不同的实现，<code>mysql</code>和<code>posthresql</code>都有不同的实现提供给客户，而Java的SPI机制可以为某个接口寻找服务实现</p></li></ul><h2 id="面向接口编程-java-sql"><a href="#面向接口编程-java-sql" class="headerlink" title="面向接口编程 java.sql"></a>面向接口编程 java.sql</h2><p>如果需要建立连接，java中提供了一套标准，数据库厂商来进行实现，包含实现子类，实现子类的jar文件一般放在数据库安装目录下</p><ol><li>java.sql.Driver 驱动</li><li>java.sql.Connection 连接</li><li><p>java.sql.Statement 静态处理快</p><p>java.sql.PreparedStatement 预处理块</p></li><li><p>java.sql.ResultSet 结果集</p></li><li>java.sql.ResultSetMetaData 结果集元数据</li></ol><h3 id="JDBC连接数据库"><a href="#JDBC连接数据库" class="headerlink" title="JDBC连接数据库"></a>JDBC连接数据库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 加载驱动</span></span><br><span class="line"><span class="comment">/* 当执行了当前代码之后，会返回一个class对象，在此对象的创建过程中，会调用具体类的静态代码块 */</span></span><br><span class="line"></span><br><span class="line">Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 建立连接</span></span><br><span class="line"><span class="comment">/** 第一步已经将driver对象注册到了drivermanager中，所以此时可以直接通过DriverManager来获取数据库连接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需要输入连接数据库的参数：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- url: 数据库的地址</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- username： 用户名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- password： 密码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line">Connection connection = DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>, <span class="string">"scott"</span>, <span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 测试连接是否成功</span></span><br><span class="line">System.out.println(connection);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 定义sql语句</span></span><br><span class="line">String sql = <span class="string">"select * from emp"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 准备静态处理块对象，需要一个对象来存放sql语句，将对象进行执行的时候调用的是数据库的服务，数据库会从当前对象中拿到对应的sql语句进行执行</span></span><br><span class="line">Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 执行sql语句，返回值对象是结果集合</span></span><br><span class="line">ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 循环处理</span></span><br><span class="line"><span class="keyword">while</span>(resultSet.next()) &#123;</span><br><span class="line">    <span class="comment">// 通过下标索引编号获取值，索引从1开始</span></span><br><span class="line">    <span class="keyword">int</span> anInt = resultSet.getInt(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过列名获取值</span></span><br><span class="line">    String ename = resultSet.getString(<span class="string">"ename"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 关闭连接</span></span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库</title>
      <link href="/2020/10/25/computerLanguage/database/database/"/>
      <url>/2020/10/25/computerLanguage/database/database/</url>
      <content type="html"><![CDATA[<h1 id="数据库表的创建、表的约束、索引、数据库"><a href="#数据库表的创建、表的约束、索引、数据库" class="headerlink" title="数据库表的创建、表的约束、索引、数据库"></a>数据库表的创建、表的约束、索引、数据库</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><h3 id="标准的建表语法"><a href="#标准的建表语法" class="headerlink" title="标准的建表语法"></a>标准的建表语法</h3><p>数据库连接池： <code>C3P0</code> <code>DBCP</code> <code>druid</code></p><p><code>CREATE TABLE[schema.]table(column datatype [DEFAULT])</code> </p><p>例如：</p><p>建立一张用来存储学生信息的表，表中的字段包含学生的学号、姓名、年龄、入学日期、年纪、班级、email等信息，且为grade指定默认值为1</p><ul><li><p>创建</p><p><code>create table student (sty_id number(10), name varcher2(20), age number(3), hiredate date,grade varchar2(10) default 1, classes varchar2(10), email varchar2(50))</code></p></li><li><p>插入</p><ul><li><p><code>insert into student values(20201025, &#39;zhangshan&#39;, 22, to_date(&#39;2020-10-25&#39;, &#39;YYYY-MM-DD&#39;), &#39;2&#39;, &#39;1&#39;, &#39;123@xx.com&#39;)</code></p></li><li><p><code>insert into student(sty_id, name, age, hiredate,classes,email) values(20201025, &#39;zhangshan&#39;, 22, to_date(&#39;2020-10-25&#39;, &#39;YYYY-MM-DD&#39;), &#39;1&#39;, &#39;123@xx.com&#39;)</code></p></li></ul></li></ul><p>注意事项： </p><ul><li>创建新表时，指定的表名必须不存在，否则报错</li><li>使用默认值时，当插入行不给出值，dbms将自动采用默认值</li><li>使用create语句创建基本表时，最初只是一个空的框架，用户可以使用insert命令将数据插入表中，即只包含表结构不包含表数据</li></ul><p><strong>正规的表结构设计需要使用第三方工具</strong></p><ul><li><p>修改表</p><p>例如： 在上述<code>student</code>表中添加字段<code>address</code></p><p><code>alter table student add address varchar2(100)</code></p><p>注： 新增加的列不能设置为 <code>not null</code>，基本表在增加一列后，原有元组在新增加的列上的值都定义为空值</p></li><li><p>删除表字段</p><p><code>alter table 表名 drop column 列名</code></p><p><code>alter table student drop column address</code></p></li><li><p>修改表字段类型</p><p><code>alter table 表名 modify(字段 字段类型);</code></p><p><code>alter table student modify(email varchar2(100));</code></p></li><li><p>删除表</p><p><code>drop table 表名</code></p><p>多表关联时不能随意删除，需要使用</p><ul><li><p>级联删除<code>cascade</code>: 如果表A和表B，A中的某一个字段与B中的某一个字段做关联，那么删除A表的时候，需要先将B表删除</p></li><li><p><code>set null</code>删除时，把表的关联字段设置为空</p></li><li><p><code>restrict</code>，只有当依赖表中没有一个外键值与要删除的主表中主键值相对应时，才可执行删除操作</p></li></ul></li><li><p>修改表名称</p><p><code>rename 原表名 to 新表名;</code></p><p><code>rename student to stu;</code></p></li></ul><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>创建表时同时可以指定所插入数据的一些规则，比如说某个字段不能为空，某个字段你的值不能小于0等，这些规则统称为约束。约束是在表上强制执行的<strong>数据校验规则</strong></p><p>Oracle支持以下五类完整型约束：</p><ul><li>NOT NULL 非空，插入数据时，指定列不允许为空</li><li>UNIQUE Key 唯一键， 可以限定某一列的值唯一，唯一键的列一般被用作索引列</li><li>PRIMARY KEY 主键， 非空且唯一，任何一张表一般情况下最好有主键用来唯一的标识一行记录</li><li><p>FOREIGN KEY 外键，多个表之间有关联关系(一个表的某个列的值依赖于另一张表的某个值)时，需要使用外键</p><ul><li>外键是表中的一个列，其值必须在另一表的主键或者唯一键中列出</li><li>作为“主键”的表称为“主表”，作为外键的关系称为“依赖表”</li><li>外键参照的是主表的主键或者唯一键</li><li>对于主表的删除和修改主键值的操作，回怼依赖关系产生影响，如要删除主表的某个记录（即删除一个主键值），那么对依赖的影响可采取<code>RESTRICT方式</code>、<code>CASCADE方式</code>、<code>SET NULL方式</code></li></ul><p>插入DEPT表中的DEPTNO列作为外键<br><code>create table student (sty_id number(10), name varcher2(20), age number(3), hiredate date,grade varchar2(10) default 1, classes varchar2(10), email varchar2(50)), foreign key [DEPTNO] references DEPT[DEPTNO]</code></p></li><li><p>CHECK 自定义检查约束，可以根据用户自己的需求去限定某些列的值</p><p>例如： 限制0&lt;年龄&lt;150</p><p>   <code>create table student (sty_id number(10), name varcher2(20), age number(3) check(age &gt; 0 and age &lt; 150), hiredate date,grade varchar2(10) default 1, classes varchar2(10), email varchar2(50))</code></p></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li>索引是为了加快对数据的搜索速度而设立的。索引是方案(schema)中的一个数据库对象，与表独立存放</li><li>索引的作用： 在数据库中用来加速对表的查询，通过使用快速路径访问方法快读定位数据，减少了磁盘的I/O</li><li>sql中的索引是非显示索引，也就是在索引创建之后，在用户撤销它之前不会再用到该索引的名字，但是索引在用户查询时会自动起作用</li><li><p>索引的创建有两种情况</p><ul><li>自动： 当在表上定义一个<code>primary key</code> 或者 <code>unique 约束条件</code>时，Oracle数据库自动创建一个对应的唯一索引</li><li>手动： 用户可以创建索引以加速查询</li></ul></li></ul><h3 id="开发使用索引的要点"><a href="#开发使用索引的要点" class="headerlink" title="开发使用索引的要点"></a>开发使用索引的要点</h3><ol><li>索引改善检索操作的性能，但降低数据插入、修改和删除的性能。在执行这些操作时，DBMS必须动态地更新索引</li><li>索引数据可能要占用大量的存储空间</li><li>并非所有数据都适合于索引。唯一性不好的数据（如省）从索引得到的好处不比具有股鞥多可能值的数据（如姓名）从索引中得到的好处多</li><li>索引用于数据过滤和数据排序。如果你经常以某种特定的顺序排序数据，则该数据可能是索引的备选</li><li>可以在索引中定义多个列（例如省+市），这样的索引只在省+市的顺序排序时游泳。如果想按城市排序，则这种索引没用</li></ol><h3 id="索引的操作"><a href="#索引的操作" class="headerlink" title="索引的操作"></a>索引的操作</h3><ul><li><p>创建</p><p><code>create index 索引名称 on 表名(列名1[,列名2]...);</code></p></li><li><p>删除</p><p><code>drop index 索引名</code></p></li></ul><h1 id="数据库设计三范式"><a href="#数据库设计三范式" class="headerlink" title="数据库设计三范式"></a>数据库设计三范式</h1><p>在设计和数据库有关的系统时，数据库表的设计至关重要，这些设计关系整个系统的架构，需要精心的仔细考虑。数据库的设计主要包含了设计表结构和表之间的联系，在设计的过程中，有一些规则应该遵守</p><p><strong>三范式的存在是为了减少数据库中的数据冗余</strong></p><h2 id="第一范式-1NF-：-确保每列保持原子性"><a href="#第一范式-1NF-：-确保每列保持原子性" class="headerlink" title="第一范式(1NF)： 确保每列保持原子性"></a>第一范式(1NF)： 确保每列保持原子性</h2><p>第一范式是最基本的范式，如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式</p><p>第一范式的合理遵循需要根据系统的实际需求来定。比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行，但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对“地址”中某一部分操作的时候将非常方便，这样设计才满足了数据库的第一范式。</p><p>所谓的第一范式是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即<strong>列不可分</strong></p><h2 id="第二范式-2NF-：-确保表中的每列都和主键相关"><a href="#第二范式-2NF-：-确保表中的每列都和主键相关" class="headerlink" title="第二范式(2NF)： 确保表中的每列都和主键相关"></a>第二范式(2NF)： 确保表中的每列都和主键相关</h2><p>第二范式在第一范式的基础之上更进一层。第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</p><h2 id="第三范式-3NF-必须先满足第二范式"><a href="#第三范式-3NF-必须先满足第二范式" class="headerlink" title="第三范式(3NF): 必须先满足第二范式"></a>第三范式(3NF): 必须先满足第二范式</h2><p>第三范式要求在一个数据库表中不包含已在其他表中已包含的非主关键字信息。</p><p>例如： 存在一个部门信息表，其中每个部门有部门编号(dep_id)、部门名称、部门简介等信息，那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门先关的信息加入员工信息表中。如果不存在部门信息表，则根据第三范式，应该创建部门信息表，否则会有大量的数据冗余。</p><p>第三范式就是属性不依赖于其他非主属性</p><p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关</p><h1 id="DBUtil及数据库连接池"><a href="#DBUtil及数据库连接池" class="headerlink" title="DBUtil及数据库连接池"></a>DBUtil及数据库连接池</h1><h2 id="DBUtil"><a href="#DBUtil" class="headerlink" title="DBUtil"></a>DBUtil</h2><p>Commons DbUtils: JDBC Utility Component</p><p>Apache封装的JDBC工具组件</p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>数据库连接池的目的是为了减少频繁开关连接的时间，提高整个系统的响应能力，数据库连接池应该具备几个属性值：</p><ol><li>初始大小</li><li>每次扩容的大小</li><li>连接池的最大个数</li><li>空闲连接的死亡时间</li></ol><p>各种数据库连接池：</p><ul><li>DBCP</li><li>C3P0</li><li>Druid</li><li>hikariCP</li></ul><h3 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a><code>DBCP</code></h3><p>Apache提供的数据库连接池，目前用的比较少</p><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a><code>C3P0</code></h3><p>开源的数据库连接池</p><ol><li><p>下载Jar包并导入项目中</p></li><li><p>使用步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.*;</span><br><span class="line">  </span><br><span class="line">...</span><br><span class="line"><span class="comment">// 加载mysql驱动</span></span><br><span class="line">ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">cpds.setDriverClass( <span class="string">"com.mysql.jdbc.Driver"</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置URL、用户名、密码         </span></span><br><span class="line">cpds.setJdbcUrl( <span class="string">"jdbc:postgresql://localhost/testdb"</span> );</span><br><span class="line">cpds.setUser(<span class="string">"dbuser"</span>); </span><br><span class="line">cpds.setPassword(<span class="string">"dbpassword"</span>);</span><br></pre></td></tr></table></figure><p><code>c3p0</code>若要通过配置文件进行参数配置，则配置文件必须放置在根目录，且文件名为<code>c3p0.properties</code>(properties文件)或<code>c3p0-config.xml</code>(xml文件)</p></li></ol><p><strong>JDBC4之前是必须要填写驱动名称的，但是之后的版本不需要填写</strong></p><h3 id="druid"><a href="#druid" class="headerlink" title="druid"></a><code>druid</code></h3><h3 id="hikariCP"><a href="#hikariCP" class="headerlink" title="hikariCP"></a><code>hikariCP</code></h3><p>配置参见官方文档</p>]]></content>
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构与算法基础</title>
      <link href="/2020/08/18/computerLanguage/algorithm/dataStructure&amp;algorithm/"/>
      <url>/2020/08/18/computerLanguage/algorithm/dataStructure&amp;algorithm/</url>
      <content type="html"><![CDATA[<h1 id="链表结构、栈、队列、递归行为、哈希表"><a href="#链表结构、栈、队列、递归行为、哈希表" class="headerlink" title="链表结构、栈、队列、递归行为、哈希表"></a>链表结构、栈、队列、递归行为、哈希表</h1><h2 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h2><ul><li><p>单向链表节点结构(可以实现成范型)</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        value = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双向链表节点结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> DoubleNode last;</span><br><span class="line">    <span class="keyword">public</span> DoubleNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        value = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="单向链表和双向链表最简单的练习"><a href="#单向链表和双向链表最简单的练习" class="headerlink" title="单向链表和双向链表最简单的练习"></a>单向链表和双向链表最简单的练习</h3><ul><li><p>单链表和双链表如何反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code_ReverseList</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 单向链表单反转 */</span></span><br><span class="line">    <span class="comment">// 1. 定义单向链表</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">            value = date;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 反转单向链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">reverseLinkedList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        Node pre = <span class="keyword">null</span>;</span><br><span class="line">        Node next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = pre;</span><br><span class="line">            pre = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*双向链表反转*/</span></span><br><span class="line">    <span class="comment">// 1. 定义双向链表</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DoubleNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">        <span class="keyword">public</span> DoubleNode last;</span><br><span class="line">        <span class="keyword">public</span> DoubleNode next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoubleNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">            value = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 反转双向链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DoubleNode <span class="title">reverseDoubleList</span><span class="params">(DoubleNode head)</span> </span>&#123;</span><br><span class="line">        DoubleNode pre = <span class="keyword">null</span>;</span><br><span class="line">        DoubleNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = pre;</span><br><span class="line">            head.last = next;</span><br><span class="line">            pre = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除给定值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 指定删除head中值为num的节点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">removeValue</span><span class="params">(Node head, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 首次遍历，过滤头节点为num的情况</span></span><br><span class="line">    <span class="comment">// 找到第一个不需要删的位置</span></span><br><span class="line">    <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(head.value != num) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node pre = head;</span><br><span class="line">    Node cur = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.value == num) &#123;</span><br><span class="line">            <span class="comment">// 当前值为num,将当前值的下一位赋于pre.next</span></span><br><span class="line">            pre.next = cur.next;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当前值保留,记录当前值</span></span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><h3 id="逻辑概念"><a href="#逻辑概念" class="headerlink" title="逻辑概念"></a>逻辑概念</h3><ul><li><p>栈： 先进后出</p></li><li><p>堆： 先进先出</p></li></ul><h3 id="实际实现"><a href="#实际实现" class="headerlink" title="实际实现"></a>实际实现</h3><ul><li><p>双向链表实现</p></li><li><p>数组实现</p></li></ul><h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><ol><li><p>怎么用数组实现不超过固定大小的队列和栈</p><p>栈： 正常使用</p><p>队列： 环形数组</p></li><li><p>实现一个特殊的栈，在基本功能的基础上再实现返回栈中最小元素的功能</p></li></ol>]]></content>
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> algorithm </tag>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面向面试查漏补缺</title>
      <link href="/2020/08/18/computerLanguage/java/%E9%9D%A2%E5%90%91%E9%9D%A2%E8%AF%95%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
      <url>/2020/08/18/computerLanguage/java/%E9%9D%A2%E5%90%91%E9%9D%A2%E8%AF%95%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
      <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组相当于是一种数据结构，很多数据在进行存储的时候需要使用数组</p><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>时间复杂度： <code>O(n^2)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 冒泡排序: 前一个数字与后一个数字比较，若后者大于前者，两者交换</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length -<span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 交换位置</span></span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>平均时间复杂度：O(n2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 选择排序:</span></span><br><span class="line"><span class="comment">* 在长度为N的无序数组中，第一次遍历n-1个数，找到最小的数值与第一个元素交换；</span></span><br><span class="line"><span class="comment">* 第二次遍历n-2个数，找到最小的数值与第二个元素交换；</span></span><br><span class="line"><span class="comment">* ...</span></span><br><span class="line"><span class="comment">* 第n-1次遍历，找到最小的数值与第n-1个元素交换，排序完成。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="comment">// 获取最小值下标</span></span><br><span class="line">            <span class="keyword">if</span>(arr[k] &gt; arr[j]) &#123;</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; arr[k]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[k];</span><br><span class="line">            arr[k] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>平均时间复杂度：O(n2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 插入排序：</span></span><br><span class="line"><span class="comment">* 假定前n-1个数已经排好序，现在将第n个数插到前面的有序数列中，使得这n个数也是排好顺序的。</span></span><br><span class="line"><span class="comment">* 如此反复循环，直到全部排好顺序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j+<span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                <span class="comment">// 第n个数小于前n-1已排好序的数组的最后一位，换位</span></span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 第n个数大于前n-1已排好序的数组的最后一位，直接跳过进入第n+1个数</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序：</span></span><br><span class="line"><span class="comment"> * 采用分治策略</span></span><br><span class="line"><span class="comment"> * 1．先从数列中取出一个数作为基准数。</span></span><br><span class="line"><span class="comment"> * 2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</span></span><br><span class="line"><span class="comment"> * 3．再对左右区间重复第二步，直到各区间只有一个数。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 需要排序的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> begin 排序起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end 排序最终位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = arr[begin];<span class="comment">// 定义数组最左边一个数为基准值</span></span><br><span class="line">    <span class="keyword">boolean</span> rtl = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">int</span> left = begin;</span><br><span class="line">    <span class="keyword">int</span> right = end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt; end+<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(rtl) &#123;</span><br><span class="line">            <span class="comment">// 从右往左移动，将右边的值与基准值比较</span></span><br><span class="line">            <span class="keyword">if</span>(arr[right] &lt; pivot) &#123;</span><br><span class="line">                <span class="comment">// 若右边的值小于基准值，将右边的值填入左边的位置上，左指针向后移动</span></span><br><span class="line">                arr[left] = arr[right];</span><br><span class="line">                left++;</span><br><span class="line">                rtl = <span class="keyword">false</span>;<span class="comment">// 移动左指针</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 右边的值大于基准值，右指针向前移动</span></span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 从左往右，将左边的值与基准值比较</span></span><br><span class="line">            <span class="keyword">if</span>(arr[left] &gt; pivot) &#123;</span><br><span class="line">                <span class="comment">// 若左边的值大于基准值，将左边的值填入右指针位置，右指针向前移动</span></span><br><span class="line">                arr[right] = arr[left];</span><br><span class="line">                right--;</span><br><span class="line">                rtl = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(left == right) &#123;</span><br><span class="line">            arr[left] = pivot;</span><br><span class="line">            <span class="comment">// 分别对左右数组排序</span></span><br><span class="line">            <span class="keyword">if</span>(left-<span class="number">1</span> &gt;= begin) &#123;</span><br><span class="line">                quickSort(arr, begin, left-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(right+<span class="number">1</span> &lt;= end) &#123;</span><br><span class="line">                quickSort(arr, right+<span class="number">1</span>, end);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h2 id="常用的消息队列"><a href="#常用的消息队列" class="headerlink" title="常用的消息队列"></a>常用的消息队列</h2><p><code>ActiveMQ</code> <code>rabbitMQ</code> <code>rocketMQ</code> <code>kafka</code></p><h3 id="activeMQ"><a href="#activeMQ" class="headerlink" title="activeMQ"></a>activeMQ</h3><h3 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><h4 id="为什么要用消息队列"><a href="#为什么要用消息队列" class="headerlink" title="为什么要用消息队列"></a>为什么要用消息队列</h4><p>答题思路： 你们公司有什么业务场景，这个场景有什么技术挑战，如果不用MQ可能会很麻烦，但是你现在用了MQ之后带给了你很多好处</p><p><strong>面试技巧</strong>： 考虑下你负责的系统中是否有类似场景，就是一个系统或者一个模块调用了多个系统或者模块，互相之间的调用很复杂， 维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果用MQ给他异步化解耦，也是可以的。你就需要去考虑在你的项目中，是不是可以运用这个MQ去进行系统的解释</p><ul><li>消息队列的常用场景： 解耦、异步、削峰</li></ul>]]></content>
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
            <tag> Computer Language </tag>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2020/08/17/computerLanguage/java/beforeArchitect/SpringMVC/"/>
      <url>/2020/08/17/computerLanguage/java/beforeArchitect/SpringMVC/</url>
      <content type="html"><![CDATA[<h1 id="SpringMVC初识"><a href="#SpringMVC初识" class="headerlink" title="SpringMVC初识"></a>SpringMVC初识</h1><h2 id="什么是MVC？"><a href="#什么是MVC？" class="headerlink" title="什么是MVC？"></a>什么是MVC？</h2><p><code>MVC</code>是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。将业务逻辑、数据、显示分离方法来组织代码。MVC主要作用是降低了视图与业务逻辑间的双向耦合。是一种<strong>架构模式</strong></p><p><code>Model</code>(模型): 数据模型。提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都是分离开来： Value Object（数据DAO） 和服务层（行为Service），也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><code>View</code>(视图)： 负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西</p><p><code>Controller</code>（控制器）： 接收用户请求、委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。控制器做了个调度员的工作</p><p><strong>最典型MVC: JSP + Servlet + JavaBean</strong></p><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>SpringMVC是Spring框架的一个模块</p><p>SpringMVC运行流程：</p>]]></content>
      
      <categories>
          
          <category> framework,SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> framework </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring</title>
      <link href="/2020/08/10/computerLanguage/java/beforeArchitect/spring/"/>
      <url>/2020/08/10/computerLanguage/java/beforeArchitect/spring/</url>
      <content type="html"><![CDATA[<h1 id="Spring初识"><a href="#Spring初识" class="headerlink" title="Spring初识"></a>Spring初识</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>什么是框架？某些个人或组织定义了一系列的类或接口，提前定义好一些实现，用户可以在这些类和接口的基础上使用这些类来迅速形成某个领域或者某个行业的解决方案，简化开发过程，提高开发效率。</p><h2 id="软件设计发展历程"><a href="#软件设计发展历程" class="headerlink" title="软件设计发展历程"></a>软件设计发展历程</h2><h3 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h3><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起以减少部署节点和成本，此时用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><h3 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h3><p>当访问量逐渐增大，单一应用增加及其带来的及速度月俩月小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率此时用于加速前端页面开发的Web框架(MVC)是关键。</p><h3 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h3><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务服用及整合的分布式服务框架(RPC)是关键。</p><h3 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a>流动计算架构</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需要增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><p><strong>Spring出现之前使用的是EJB</strong></p><h2 id="主流框架演变之路"><a href="#主流框架演变之路" class="headerlink" title="主流框架演变之路"></a>主流框架演变之路</h2><ol><li><p>JSP + Servlet + JavaBean</p><ul><li><p>JSP: Java Server Page 能内置Java代码，但配置比较麻烦</p></li><li><p>Servlet: Server Applet</p></li><li><p>JavaBean: 更多用于描述现实世界某个具体事物的抽象</p></li></ul></li><li><p>MVC三层架构</p><p>Model + View + Control</p><p> 层次分清，耦合性低</p></li><li><p>使用EJB进行应用开发，但是EJB是重量级框架，使用时有过多的接口和依赖，侵入性强，在使用上比较麻烦</p></li><li><p>SSH(Struts1/Struts2 + Hibernate + Spring)</p></li><li><p>SpringMVC + MyBatis + Spring</p></li><li><p>SpringBoot开发，约定大于配置</p></li></ol><h1 id="Spring理论概念"><a href="#Spring理论概念" class="headerlink" title="Spring理论概念"></a>Spring理论概念</h1><p><strong>Spring框架作为主流框架立于不败之地在于其生态</strong></p><p>官网： <a href="https://spring.io/" target="_blank" rel="noopener">https://spring.io/</a></p><h2 id="关于版本"><a href="#关于版本" class="headerlink" title="关于版本"></a>关于版本</h2><ul><li><p>GA（General Availability）：表示正式发布的版本，官方推荐使用此版本</p></li><li><p>PRE： 预览版，内部测试版，主要给开发人员和测试人员测试用</p></li><li>SNAPSHOT： 快照版，可稳定使用，且仍在继续改进版本</li></ul><h2 id="核心解释"><a href="#核心解释" class="headerlink" title="核心解释"></a>核心解释</h2><p>Spring是一个开源框架，为了简化企业开发而生，使开发变得更加优雅和简洁</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li><p>通过DI、AOP和消除样板式代码来简化企业开发</p></li><li><p>Spring框架之外还存在一个构建在核心框架之上的庞大生态圈，它将Spring扩展到不同领域，如Web服务、REST、移动开发以及NoSQL</p></li><li>低侵入式设计，代码的污染极低</li><li>独立于各种应用服务器，基于Spring的框架的应用可以真正实现Write Once, Run Anywhere</li><li>Spring的IOC容器降低了业务对象替换的复杂性，提高了组件之间的解耦</li><li>Spring的AOP支持允许将一些通用任务如安全、事务、日志等进行集中式处理，从而提供了更好的服用</li><li>Spring的ORM和DAO提供了与第三方持久层框架的良好整合，并简化了底层的数据库访问</li><li>Spring的高度开放性，并不强制应用完全依赖于Spring,开发者可自由选用Spring框架的部分或者全部</li></ol><h2 id="IOC-Inversion-of-Control-控制反转"><a href="#IOC-Inversion-of-Control-控制反转" class="headerlink" title="IOC(Inversion of Control) 控制反转"></a>IOC(Inversion of Control) 控制反转</h2><h3 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h3><p>IOC与依赖注入(DI)同理，这是一个通过依赖注入对象的过程，也就是说他们所使用的对象，是通过构造函数参数、工厂方法的参数或从工厂方法的构造函数或返回值的对象实例设置的属性，然后容器在创建bean时注入这些需要的依赖。这个过程相对于普通创建对象的过程是反向的，因此称之为IOC。</p><p>谁控制谁： IOC容器控制对象</p><p>控制什么： 实现过程中所需要依赖的对象</p><p>什么是反转： IOC容器之前我们都是在对象中主动去创建依赖的对象，这是正转；有了IOC之后依赖的对象直接由IOC容器创建后注入到对象中，由主动创建变成了被动接受，这是反转</p><p>哪些方面被反转：依赖的对象</p><h3 id="IOC与DI"><a href="#IOC与DI" class="headerlink" title="IOC与DI"></a>IOC与DI</h3><p>IOC是设计思想，DI是具体的实现方式</p><h1 id="Spring的使用"><a href="#Spring的使用" class="headerlink" title="Spring的使用"></a>Spring的使用</h1>]]></content>
      
      <categories>
          
          <category> framework,Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> framework </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机网络基础知识</title>
      <link href="/2020/08/10/computerLanguage/java/beforeArchitect/networkBase/"/>
      <url>/2020/08/10/computerLanguage/java/beforeArchitect/networkBase/</url>
      <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>什么是服务器？</p><p>服务器又称伺服器，只要是一台功能、性能差不多的电脑就能作为服务器。</p><p>服务器的主要作用是提供数据来源</p><p>Apache服务器： 世界排名第一的Web服务器软件</p><p>Nginx服务器： 高性能Http和反向代理web服务器</p><h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><p>域名解析： 目的是让服务器认识域名，让域名也认识服务器</p><h2 id="超文本传输协议-HTTP协议"><a href="#超文本传输协议-HTTP协议" class="headerlink" title="超文本传输协议(HTTP协议)"></a>超文本传输协议(HTTP协议)</h2><h3 id="认知HTTP协议"><a href="#认知HTTP协议" class="headerlink" title="认知HTTP协议"></a>认知HTTP协议</h3><p>在网络请求别人网站的时候，地址(URL)必须以HTTP或HTTPs开头</p><h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><ol><li><p>当用户在浏览器地址栏中输入网址(URL)后按回车后到底发生了什么？</p><p> 用户输入地址按回车 –&gt; 浏览器向服务器端发起一次<strong>上行请求</strong> –&gt; 服务器收到上行请求做出<strong>下行响应</strong> –&gt; 浏览器拿到下行响应渲染页面</p></li><li><p>HTTP与HTTP有何异同</p><p> 相同点： 都是超文本传输协议，但是HTTPS相对更安全一点</p></li></ol><ol start="3"><li><p>一个网址的URL是由什么组成的</p><ul><li><p><code>http</code>: 超文本传输协议</p></li><li><p><code>www</code>: 别名</p></li><li><p><code>taobao</code>: 域名</p></li><li><p><code>.com</code>: 域名尾缀</p></li></ul><p>常用的域名尾缀</p><p> | 域名尾缀 | 描述 |<br> | – | — |<br> | .cn | 中国国家顶级域名 |<br> | .gov | 政府机构域名尾缀 |<br> | .com | 盈利商业组织（公司） |<br> | .me | 前南斯拉夫地区西南部的国家黑山共和国的国家域名 (饿了么网站使用的域名尾缀就是.me)</p><ul><li><p><code>:8080</code> :端口号,范围（0~65535）</p><p>  服务器默认端口8080</p></li></ul></li></ol>]]></content>
      
      <categories>
          
          <category> network,basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> basic </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2020/04/29/computerLanguage/java/beforeArchitect/springboot/"/>
      <url>/2020/04/29/computerLanguage/java/beforeArchitect/springboot/</url>
      <content type="html"><![CDATA[<h1 id="SpringBoot基础"><a href="#SpringBoot基础" class="headerlink" title="SpringBoot基础"></a>SpringBoot基础</h1><h2 id="框架介绍"><a href="#框架介绍" class="headerlink" title="框架介绍"></a>框架介绍</h2><p>SpringBoot主要解决的是在微服务架构下简化配置（有快速配置）、前后端分离、快速开发</p><p>优点： </p><ul><li>提供了快速启动入门</li><li>开箱即用、提供默认配置</li><li>内嵌容器化web项目</li><li>没有冗余代码生成和XML配置要求</li></ul><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>模板引擎： 如 <code>Thymeleaf</code>, <code>FreeMarker</code></p><p>有嵌套和解析的过程，先加载静态页面，在静态页面上添加一些标记，模板引擎的内核会根据添加的标记动态渲染数据</p><p><strong>计算向数据移动</strong></p><h3 id="MVC架构思想"><a href="#MVC架构思想" class="headerlink" title="MVC架构思想"></a>MVC架构思想</h3><p>? JVM垃圾回收机制现在已经不是引入计数器的方式，改为GCroot</p><p>? Spring不支持循环引用，主要是因为其自身结构问题。</p><h3 id="基于SpringBoot的MVC"><a href="#基于SpringBoot的MVC" class="headerlink" title="基于SpringBoot的MVC"></a>基于SpringBoot的MVC</h3><ul><li>数据的展示查询</li></ul><h3 id="分层解释"><a href="#分层解释" class="headerlink" title="分层解释"></a>分层解释</h3><ul><li><p><code>Controller</code>层</p><p>一般写业务逻辑跳转</p></li><li><p><code>Service</code>层</p><p>业务层逻辑代码</p></li><li><p><code>DAO</code>层</p><p>操作持久层</p></li></ul><h3 id="各种依赖"><a href="#各种依赖" class="headerlink" title="各种依赖"></a>各种依赖</h3><h4 id="JPA-Java-Persistence-API"><a href="#JPA-Java-Persistence-API" class="headerlink" title="JPA(Java Persistence API)"></a>JPA(Java Persistence API)</h4><p>  添加依赖 <code>Spring-data-jpa</code>, 用于访问数据源的框架，可以把数据库的表映射成对象，一一对应</p><h3 id="注释解说"><a href="#注释解说" class="headerlink" title="注释解说"></a>注释解说</h3><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a><code>@RequestMapping</code></h4><p>请求路径</p><h4 id="PathVariable-quot-key-quot"><a href="#PathVariable-quot-key-quot" class="headerlink" title="@PathVariable(&quot;key&quot;)"></a><code>@PathVariable(&quot;key&quot;)</code></h4><p>取URI中<code>key</code>对应的值</p><h1 id="实践中报错记录"><a href="#实践中报错记录" class="headerlink" title="实践中报错记录"></a>实践中报错记录</h1><h2 id="下载依赖包速度过慢"><a href="#下载依赖包速度过慢" class="headerlink" title="下载依赖包速度过慢"></a>下载依赖包速度过慢</h2><p>解决方法： 配置阿里云镜像地址</p><p>全局配置步骤： </p><ol><li>找到maven的<code>setting.xml</code>文件，若没有可以新建</li><li><p>在<code>setting.xml</code>文件的<code>mirrors</code>节点下面添加子节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="运行成功并退出"><a href="#运行成功并退出" class="headerlink" title="运行成功并退出"></a>运行成功并退出</h2><p><code>Process finished with exit code 0</code></p><p>原因： <code>Pom.xml</code>文件缺少依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="引入spring-security每次调用需要输入登录名密码"><a href="#引入spring-security每次调用需要输入登录名密码" class="headerlink" title="引入spring-security每次调用需要输入登录名密码"></a>引入<code>spring-security</code>每次调用需要输入登录名密码</h2><p>解决办法： 关闭验证</p><ol><li><p><code>springboot 2.0</code> 之前可通过yml配置关闭验证：</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">security.basic.enabled=false</span></span><br><span class="line"><span class="string">management.security.enabled=false</span></span><br></pre></td></tr></table></figure></li><li><p><code>springboot 2.x</code>后关闭验证</p><p> <code>springboot 2.x</code> 后上述配置被废除，需要在启动类前的 <code>@SpringBootApplication</code> 注解中加入 <code>exclude</code> 属性 <code>scurityAutoConfiguration</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = SecurityAutoConfiguration.class)</span><br></pre></td></tr></table></figure></li></ol><h2 id="数据库连接报错"><a href="#数据库连接报错" class="headerlink" title="数据库连接报错"></a>数据库连接报错</h2><p>报错内容: <code>java.sql.SQLException: The server time zone value &#39;�й���׼ʱ��&#39; is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the &#39;serverTimezone&#39; configuration property) to use a more specifc time zone value if you want to utilize time zone support.</code></p><p>报错原因： 数据库连接时区配置问题</p><p>解决方法： 数据库配置添加时区配置 <code>serverTimezone=UTC</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">$&#123;MYSQL_USER:root&#125;</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">$&#123;MYSQL_PASSWORD:123456&#125;</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://$&#123;MYSQL_HOST:localhost&#125;:$&#123;MYSQL_PORT:3306&#125;/$&#123;MYSQL_DATABASE:dbname&#125;?serverTimezone=UTC&amp;useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8</span></span><br></pre></td></tr></table></figure><hr><p>参考资料：</p>]]></content>
      
      <categories>
          
          <category> framework,Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> framework </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端基础之canvas</title>
      <link href="/2020/03/21/computerLanguage/web/canvas/"/>
      <url>/2020/03/21/computerLanguage/web/canvas/</url>
      <content type="html"><![CDATA[<p>canvas最早由Apple引入WebKit，用于Mac OS X的dashboard，后来又在safari和Google Chrome被实现。基于Geoko 1.8的浏览器（如firefox1.5）支持此元素。</p><p><code>&lt;canvas&gt;</code>元素是WhatWG Web applications 1.0规范的一部分，也包含于HTML5中。<code>&lt;canvas&gt;</code>不再是语义化标签，存在兼容性问题，因此使用语义化标签兼容插件无法解决兼容问题。</p><h1 id="canvas体验"><a href="#canvas体验" class="headerlink" title="canvas体验"></a>canvas体验</h1><p>绘图步骤：</p><ol><li><p>准备画布</p><p> 使用<code>&lt;canvas&gt;</code>标签定义一个画布，默认画布为透明色(<code>rgba(0, 0, 0, 0)</code>)，大小为300*150</p><p> 可在<code>&lt;canvas&gt;</code>的样式中设置边框，但不设置大小，画布大小在<code>&lt;canvas&gt;</code>属性中设置</p><h2 id="canvas尺寸设置"><a href="#canvas尺寸设置" class="headerlink" title="canvas尺寸设置"></a>canvas尺寸设置</h2><ul><li><p>在样式中设置<code>canvas</code>尺寸：</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">canvas</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  运行结果：</p><p>  <img src="/source/data/img/html/canvas/canvas尺寸样式.png" alt="canvas使用样式设置尺寸"></p></li><li><p>使用<code>canvas</code>属性设置画布尺寸</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"600px"</span> <span class="attr">height</span>=<span class="string">"400px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  运行结果：</p><p>  <img src="/source/data/img/html/canvas/canvas尺寸属性.png" alt="canvas使用属性设置尺寸"></p><p>可以看出虽然两种方法设置的画布最终大小是一致的，但画布中的内容却不一样。</p><p><strong>使用样式设置画布大小，相当于对画布进行了放大操作，画布中的内容也会被拉伸；使用canvas自带属性设置画布大小设置的是画布的实际大小，内容不会有影响</strong></p></li></ul></li><li><p>准备绘图工具</p><p> <code>&lt;canvas&gt;</code>标签中不能写内容，因此绘图工具只能在js中设置</p></li><li><p>利用工具绘图</p><p> 绘图步骤也需写在JS中</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取canvas元素</span></span><br><span class="line"><span class="keyword">var</span> myCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取上下文(此处上下文为canvas的回执工具箱)</span></span><br><span class="line"><span class="keyword">var</span> ctx = myCanvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 移动画笔</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 绘制直线(轨迹/绘制路径)</span></span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 描边</span></span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></li></ol><p><strong>canvas不支持3d效果，一般使用web gl绘制3d效果的网页</strong></p><h1 id="绘制平行线"><a href="#绘制平行线" class="headerlink" title="绘制平行线"></a>绘制平行线</h1><h2 id="绘制两条平行线"><a href="#绘制两条平行线" class="headerlink" title="绘制两条平行线"></a>绘制两条平行线</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = myCanvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制第一条线</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制第二条线</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描边</span></span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><h2 id="关于描边"><a href="#关于描边" class="headerlink" title="关于描边"></a>关于描边</h2><p>描边默认的宽度是1px,默认颜色为黑色，但实际在浏览器显示为2px,浅黑色</p><p>描边线的中心位置与刻度线对齐，因此描边线会占据浏览器上下各0.5px，但浏览器无法解析0.5px，只能解析1px，因此最终显示结果是宽度为2px,颜色饱和度降低</p><p>解决方案： 前后(Y轴)移动0.5px</p><h3 id="绘制三条不同颜色的平行线"><a href="#绘制三条不同颜色的平行线" class="headerlink" title="绘制三条不同颜色的平行线"></a>绘制三条不同颜色的平行线</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = myCanvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启新路径</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制第一条蓝线</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">'blue'</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启新路径</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line"><span class="comment">// 绘制第二条红线</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">'red'</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">20</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启新路径</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line"><span class="comment">// 绘制第三条绿线</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">300</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">'green'</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">30</span>;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p>绘制不同属性的线条时，需要用<code>ctx.beginPath();</code>来开启新路径解决样式覆盖问题</p><h1 id="绘制三角形"><a href="#绘制三角形" class="headerlink" title="绘制三角形"></a>绘制三角形</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p>使用此方法绘制出的三角形会出现起始点和lineto的连接点无法闭合产生缺角的问题:</p><p><img src="/source/data/img/html/canvas/canvas手动闭合三角形.png" alt="canvas绘制手动闭合三角形"></p><p>解决方案：使用<code>ctx.closePath()</code>让canvas自动闭合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line"><span class="comment">// ctx.lineTo(200,100);</span></span><br><span class="line">ctx.closePath();<span class="comment">// 关闭路径</span></span><br><span class="line">ctx.lineWidth = <span class="number">10</span>;    </span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><img src="/source/data/img/html/canvas/canvas自动闭合三角形.png" alt="canvas绘制自动闭合三角形"></p><h2 id="绘制填充的三角形"><a href="#绘制填充的三角形" class="headerlink" title="绘制填充的三角形"></a>绘制填充的三角形</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">'#FF4040'</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p>绘制结果：</p><p><img src="/source/data/img/html/canvas/canvas填充三角形.png" alt="canvas绘制填充三角形"></p><p><strong>填充时不再使用<code>ctx.stroke()</code>而是使用<code>ctx.fill()</code>,同样的，填充样式属性用的是<code>fillStyle</code>而不是<code>strokeStyle</code></strong></p><h1 id="绘制镂空正方形"><a href="#绘制镂空正方形" class="headerlink" title="绘制镂空正方形"></a>绘制镂空正方形</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顺时针绘制100*100小正方形</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.closePath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆时针绘制200*200大正方形</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">250</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">250</span>,<span class="number">250</span>);</span><br><span class="line">ctx.lineTo(<span class="number">50</span>,<span class="number">250</span>);</span><br><span class="line">ctx.closePath();</span><br><span class="line"></span><br><span class="line">ctx.fill();<span class="comment">// 非零环绕填充规则进行填充</span></span><br></pre></td></tr></table></figure><p>绘制结果：</p><p><img src="/source/data/img/html/canvas/canvas绘制镂空正方形.png" alt="canvas绘制镂空正方形"></p><p><strong>非零环绕规则</strong>：从区域内往外画一条足够长的线，线与顺时针路径相交，计数器+1，与逆时针路径相交，计数器-1，计数器最终不为0则填充</p><p><img src="/source/data/img/html/canvas/非零环绕规则图解.png" alt="非零环绕规则图解"></p><h2 id="与线条相关的属性-画笔状态"><a href="#与线条相关的属性-画笔状态" class="headerlink" title="与线条相关的属性(画笔状态)"></a>与线条相关的属性(画笔状态)</h2><ul><li><p><code>lineWidth</code>: 线宽，默认1px</p></li><li><p><code>lineCap</code>: 线末端属性： butt、round、square</p></li><li><p><code>lineJoin</code>: 相交线的拐点： miter(默认)、round、bevel</p></li><li><p><code>strokeStyle</code>: 线的颜色</p></li><li><p><code>fillStyle</code>: 填充颜色</p></li><li><p><code>setLineDash()</code>: 设置虚线</p><p>  <code>setLineDash()</code>方法中需要传一个数组，用来描述虚线的排列方式,如<code>ctx.setLineDash([5,10,15,20])</code></p></li></ul><ul><li><p><code>getLineDash()</code>: 获取虚线宽度集合</p></li><li><p><code>lineDashOffset</code>: 设置虚线偏移量(负值向右偏移)</p></li></ul><h1 id="绘制渐变色矩形"><a href="#绘制渐变色矩形" class="headerlink" title="绘制渐变色矩形"></a>绘制渐变色矩形</h1><p>绘制思路： 绘制点组成线，为每个点上色</p><h1 id="绘制折线图"><a href="#绘制折线图" class="headerlink" title="绘制折线图"></a>绘制折线图</h1><p>绘制流程： 绘制网格 –&gt; 绘制坐标系 –&gt; 绘制点 –&gt; 连点成线</p><p>具体实现： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 构造函数</span></span><br><span class="line"><span class="keyword">var</span> LineChart = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取绘制工具</span></span><br><span class="line">    <span class="keyword">this</span>.ctx = ctx || <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画布大小</span></span><br><span class="line">    <span class="keyword">this</span>.canvasWidth = <span class="keyword">this</span>.ctx.canvas.width;</span><br><span class="line">    <span class="keyword">this</span>.canvasHeight = <span class="keyword">this</span>.ctx.canvas.height;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置网格大小</span></span><br><span class="line">    <span class="keyword">this</span>.gridSize = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置坐标系的间距</span></span><br><span class="line">    <span class="keyword">this</span>.space = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置坐标原点位置</span></span><br><span class="line">    <span class="keyword">this</span>.x0 = <span class="keyword">this</span>.space;</span><br><span class="line">    <span class="keyword">this</span>.y0 = <span class="keyword">this</span>.canvasHeight - <span class="keyword">this</span>.space;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置箭头大小</span></span><br><span class="line">    <span class="keyword">this</span>.arrowSize = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置点的大小</span></span><br><span class="line">    <span class="keyword">this</span>.dotSize = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 行为和方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">LineChart.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.drawGrid();</span><br><span class="line">    <span class="keyword">this</span>.drawCoordinate();</span><br><span class="line">    <span class="keyword">this</span>.drawDots(data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制网格</span></span><br><span class="line">LineChart.prototype.drawGrid = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// X轴方向线条数 = 画布高度 / 网格大小  向下取整</span></span><br><span class="line">    <span class="keyword">var</span> xLine = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.canvasHeight / <span class="keyword">this</span>.gridSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制x轴方向线</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= xLine; i++) &#123;</span><br><span class="line">       <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">       <span class="keyword">this</span>.ctx.moveTo(<span class="number">0</span>, i * <span class="keyword">this</span>.gridSize - <span class="number">0.5</span>);</span><br><span class="line">       <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.canvasWidth, i * <span class="keyword">this</span>.gridSize - <span class="number">0.5</span>);</span><br><span class="line">       <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">'#eee'</span>;</span><br><span class="line">       <span class="keyword">this</span>.ctx.stroke();            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Y轴方向线条数 = 画布宽度 / 网格大小 向下取整</span></span><br><span class="line">    <span class="keyword">var</span> yLine = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.canvasWidth / <span class="keyword">this</span>.gridSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制Y轴方向线</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= yLine; i++) &#123;</span><br><span class="line">       <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">       <span class="keyword">this</span>.ctx.moveTo(i * <span class="keyword">this</span>.gridSize - <span class="number">0.5</span>, <span class="number">0</span>);</span><br><span class="line">       <span class="keyword">this</span>.ctx.lineTo(i * <span class="keyword">this</span>.gridSize - <span class="number">0.5</span>, <span class="keyword">this</span>.canvasHeight);</span><br><span class="line">       <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">'#eee'</span>;</span><br><span class="line">       <span class="keyword">this</span>.ctx.stroke();            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制坐标系</span></span><br><span class="line">LineChart.prototype.drawCoordinate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 绘制X轴</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">    <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0, <span class="keyword">this</span>.y0);</span><br><span class="line">    <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.canvasWidth - <span class="keyword">this</span>.space, <span class="keyword">this</span>.y0);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// X轴箭头</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.canvasWidth - <span class="keyword">this</span>.space - <span class="keyword">this</span>.arrowSize, <span class="keyword">this</span>.y0 - <span class="keyword">this</span>.arrowSize / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.canvasWidth - <span class="keyword">this</span>.space - <span class="keyword">this</span>.arrowSize, <span class="keyword">this</span>.y0 + <span class="keyword">this</span>.arrowSize / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.canvasWidth - <span class="keyword">this</span>.space, <span class="keyword">this</span>.y0);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.ctx.fill();</span><br><span class="line">    <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">'black'</span>;</span><br><span class="line">    <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制Y轴</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">    <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0, <span class="keyword">this</span>.y0);</span><br><span class="line">    <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space, <span class="keyword">this</span>.space);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Y轴箭头</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.x0 + <span class="keyword">this</span>.arrowSize / <span class="number">2</span>, <span class="keyword">this</span>.space + <span class="keyword">this</span>.arrowSize);</span><br><span class="line">    <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.x0 - <span class="keyword">this</span>.arrowSize / <span class="number">2</span>, <span class="keyword">this</span>.space + <span class="keyword">this</span>.arrowSize);</span><br><span class="line">    <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space, <span class="keyword">this</span>.space);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.ctx.fill();</span><br><span class="line">    <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制点</span></span><br><span class="line">LineChart.prototype.drawDots = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 传入数据的坐标不是canvas坐标，因此需要先转换成canvas坐标，再进行绘制和连线</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> item = data[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> canvasX = _this.x0 + item.x;<span class="comment">// canvas x轴坐标 = canvas原点X轴坐标 + 数据X轴坐标</span></span><br><span class="line">        <span class="keyword">var</span> canvasY = _this.y0 - item.y;<span class="comment">// canvas y轴坐标 = canvas原点y轴坐标 - 数据Y轴坐标</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制点</span></span><br><span class="line">        _this.ctx.beginPath();</span><br><span class="line">        _this.ctx.moveTo(canvasX - _this.dotSize / <span class="number">2</span>, canvasY - _this.dotSize / <span class="number">2</span>);<span class="comment">// 起始位置为点的左上角位置</span></span><br><span class="line">        _this.ctx.lineTo(canvasX + _this.dotSize / <span class="number">2</span>, canvasY - _this.dotSize / <span class="number">2</span>);</span><br><span class="line">        _this.ctx.lineTo(canvasX + _this.dotSize / <span class="number">2</span>, canvasY + _this.dotSize / <span class="number">2</span>);</span><br><span class="line">        _this.ctx.lineTo(canvasX - _this.dotSize / <span class="number">2</span>, canvasY + _this.dotSize / <span class="number">2</span>);</span><br><span class="line">        _this.ctx.closePath();</span><br><span class="line"></span><br><span class="line">        _this.ctx.fill();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将点连成线 (第一个点起点为(x0,y0),其他坐标起点为上一个点)</span></span><br><span class="line">        _this.ctx.beginPath();</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</span><br><span class="line">            _this.ctx.moveTo( _this.x0,  _this.y0);                </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            _this.ctx.moveTo( _this.x0 + data[i<span class="number">-1</span>].x, _this.y0 - data[i<span class="number">-1</span>].y);</span><br><span class="line">        &#125;</span><br><span class="line">        _this.ctx.lineTo(canvasX, canvasY);</span><br><span class="line"></span><br><span class="line">        _this.ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 初始化</span></span><br><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">    &#123;</span><br><span class="line">        x: <span class="number">100</span>,</span><br><span class="line">        y: <span class="number">120</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        x: <span class="number">150</span>,</span><br><span class="line">        y: <span class="number">300</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        x: <span class="number">400</span>,</span><br><span class="line">        y: <span class="number">360</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        x: <span class="number">430</span>,</span><br><span class="line">        y: <span class="number">200</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        x: <span class="number">470</span>,</span><br><span class="line">        y: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lineChart = <span class="keyword">new</span> LineChart();</span><br><span class="line">lineChart.init(data);</span><br></pre></td></tr></table></figure><h1 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h1><p>矩形：</p><ul><li><p><code>rect(x轴坐标,Y轴坐标,长度,高度)</code> </p><ul><li><p>X轴坐标、Y轴坐标表示矩形左上角的点的位置</p></li><li><p>此方法绘制的是轨迹，要显示出来还必须使用<code>stroke()</code>或<code>fill()</code>进行描边或填充</p></li><li><p>绘制的路径不是独立路径</p></li></ul></li><li><p><code>strokeRect(x轴坐标,Y轴坐标,长度,高度)</code></p><ul><li><p>绘制描边矩形</p></li><li><p>此方法绘制有自己的独立路径，即默认自带<code>beginPath()</code>，不会被其他路径样式覆盖</p></li></ul></li><li><p><code>fillRect(x轴坐标,Y轴坐标,长度,高度)</code></p><ul><li><p>绘制填充矩形</p></li><li><p>此方法绘制有自己的独立路径，即默认自带<code>beginPath()</code>，不会被其他路径样式覆盖</p></li></ul></li><li><p><code>clearRect(x轴坐标,Y轴坐标,长度,高度)</code></p><ul><li>清除矩形内容</li></ul></li></ul><h2 id="绘制渐变矩形"><a href="#绘制渐变矩形" class="headerlink" title="绘制渐变矩形"></a>绘制渐变矩形</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> linearGradient = ctx.createLinearGradient(<span class="number">100</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">100</span>);<span class="comment">// 设置渐变方向，以两点的坐标来定</span></span><br><span class="line">linearGradient.addColorStop(<span class="number">0</span>,<span class="string">'pink'</span>);<span class="comment">// 起始颜色，若中间需要加别的颜色可以调整第一个参数为0~1之间</span></span><br><span class="line">linearGradient.addColorStop(<span class="number">1</span>,<span class="string">'blue'</span>);<span class="comment">// 结束颜色</span></span><br><span class="line"></span><br><span class="line">ctx.fillStyle = linearGradient;</span><br><span class="line"></span><br><span class="line">ctx.fillRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">200</span>);</span><br></pre></td></tr></table></figure><h1 id="绘制曲线"><a href="#绘制曲线" class="headerlink" title="绘制曲线"></a>绘制曲线</h1><h2 id="弧形"><a href="#弧形" class="headerlink" title="弧形"></a>弧形</h2><p>一个弧度 = 一个半径的长度</p><ul><li><p><code>arc(圆心x轴,圆心y轴,起始弧度,结束弧度,绘制方向)</code></p><ul><li><p>圆心x轴,圆心y轴为圆心坐标，类型为<code>number</code></p></li><li><p>起始弧度与结束弧度类型为<code>number</code>,π用<code>Math.PI</code>表示</p></li><li><p>绘制方向类型为<code>boolean</code>，默认为顺时针</p></li><li><p>此方法绘制的是路径，需要使用描边才能显示</p><h2 id="扇形"><a href="#扇形" class="headerlink" title="扇形"></a>扇形</h2></li></ul></li></ul><p>起始点放在弧线的圆心位置，绘制弧线，闭合路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="built_in">Math</span>.PI * <span class="number">3</span> / <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">ctx.closePath();</span><br><span class="line"></span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p>起始点若不设置直接闭合，则绘制出的为扇形</p><h2 id="n等分随机颜色的圆"><a href="#n等分随机颜色的圆" class="headerlink" title="n等分随机颜色的圆"></a>n等分随机颜色的圆</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">8</span>;<span class="comment">// 等分数</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="built_in">Math</span>.PI * <span class="number">2</span> / num;<span class="comment">// 每份弧度</span></span><br><span class="line"><span class="keyword">var</span> startAngle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> w = ctx.canvas.width;<span class="comment">// 画布宽度</span></span><br><span class="line"><span class="keyword">var</span> h = ctx.canvas.height;<span class="comment">// 画布高度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取随机颜色</span></span><br><span class="line"><span class="keyword">var</span> getRandomColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">    <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'rgb('</span>+ r + <span class="string">','</span> + g + <span class="string">','</span> + b +<span class="string">')'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制随机等分圆形</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">    startAngle = i * angle;</span><br><span class="line">    <span class="keyword">var</span> endAngle = (i + <span class="number">1</span>) * angle;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(w / <span class="number">2</span>,h / <span class="number">2</span>);</span><br><span class="line">    ctx.arc(w / <span class="number">2</span>,h / <span class="number">2</span>, h / <span class="number">2</span>,startAngle,endAngle);</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.fillStyle = getRandomColor();</span><br><span class="line">    ctx.fill();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="根据数据绘制饼图"><a href="#根据数据绘制饼图" class="headerlink" title="根据数据绘制饼图"></a>根据数据绘制饼图</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> data = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">3</span>];<span class="comment">// 动态数据    </span></span><br><span class="line"><span class="keyword">var</span> w = ctx.canvas.width;<span class="comment">// 画布宽度</span></span><br><span class="line"><span class="keyword">var</span> h = ctx.canvas.height;<span class="comment">// 画布高度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取随机颜色</span></span><br><span class="line"><span class="keyword">var</span> getRandomColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">    <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'rgb('</span>+ r + <span class="string">','</span> + g + <span class="string">','</span> + b +<span class="string">')'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取总数</span></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    total = total + data[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据每份比例绘制饼图</span></span><br><span class="line"><span class="keyword">var</span> startAngle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;      </span><br><span class="line">    <span class="keyword">var</span> endAngle = startAngle +  <span class="built_in">Math</span>.PI * <span class="number">2</span> * (data[i] / total);</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(w / <span class="number">2</span>,h / <span class="number">2</span>);</span><br><span class="line">    ctx.arc(w / <span class="number">2</span>,h / <span class="number">2</span>, h / <span class="number">2</span>,startAngle,endAngle);</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.fillStyle = getRandomColor();</span><br><span class="line">    ctx.fill();</span><br><span class="line"></span><br><span class="line">    startAngle = endAngle;<span class="comment">// 下一区域起始弧度为本区域结束弧度，此处必须要赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h1><ul><li><p><code>strokeText(文本内容,x坐标,y坐标)</code></p><ul><li><p>文本绘制的起点在左下角，矩形绘制的起点在左上角</p></li><li><p><code>strokeText</code>绘制出的是描边的文字，字体为空心，若要实心则使用<code>fillText</code>绘制</p></li></ul></li><li><p><code>textAlign</code></p><ul><li>文本对齐方式，基于起始坐标的对齐方式</li></ul></li><li><p><code>font</code></p><ul><li>设置文本大小、字体</li></ul></li><li><p><code>textBaseline</code></p><ul><li><p>设置基线（垂直对齐方式），基于起始坐标的对齐方式</p></li><li><p>可取值： <code>top</code>、<code>middle</code>、 <code>bottom</code>、 <code>hanging</code>、 <code>alphabetic</code>、 <code>ideographic</code></p></li><li><p><code>hanging</code> 文本的基线处于文本的正上方并且和文本相粘合(适用于印度文)</p></li><li><p><code>alphabetic</code> 默认值，基线处于文本下方，并穿过文字(适用于英文)</p></li><li><p><code>ideographic</code> 与 <code>bottom</code> 相似(适用于中文)</p></li></ul></li><li><p><code>measureText(文本内容)</code></p><ul><li><p>获取文本的宽度对象</p></li><li><p><strong>若取文本长度则需要xxx.ctx.measureText(xx).width</strong></p></li></ul></li></ul><h1 id="绘制带文本的饼图"><a href="#绘制带文本的饼图" class="headerlink" title="绘制带文本的饼图"></a>绘制带文本的饼图</h1><p><a href="https://garden.aezo.cn/demos/canvas饼状图.html">https://garden.aezo.cn/demos/canvas饼状图.html</a></p><h1 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h1><p>绘制图片使用方法<code>drawImage()</code>,可传三个参数、五个参数、九个参数</p><h2 id="绘制思路"><a href="#绘制思路" class="headerlink" title="绘制思路"></a>绘制思路</h2><ol><li><p>加载图片至内存,创建image对象</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">var</span> img = doucment.createElement(<span class="string">'img'</span>);</span><br><span class="line">img.src = <span class="string">'image/dude.png'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();<span class="comment">// Image()为JS提供的内置构造函数</span></span><br><span class="line">img.src = <span class="string">'image/dude.png'</span>;</span><br></pre></td></tr></table></figure></li><li><p>图片加载完成才能执行代码，因此必须写在onload函数里面</p><p> <strong>部分浏览器如果有缓存时，图片可能会在onload函数触发之前就已经加载完毕，第一次加载图片时已经触发了onload事件，含有缓存时不再触发onload事件，为保证兼容性，最好把onload事件写在图片加载之前</strong></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();<span class="comment">// Image()为JS提供的内置构造函数</span></span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 此处实现图片绘制</span></span><br><span class="line">&#125;</span><br><span class="line">img.src = <span class="string">'image/dude.png'</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="三种绘制方法"><a href="#三种绘制方法" class="headerlink" title="三种绘制方法"></a>三种绘制方法</h2><ul><li><p>三个参数 <code>darwImage(img, x, y)</code></p><ul><li><p><code>img</code> 图片对象、canvas对象、 video对象</p></li><li><p><code>x</code>、<code>y</code> 图片绘制的左上角</p></li></ul></li><li><p>五个参数 <code>darwImage(img, x, y, w, h)</code></p><ul><li><p><code>img</code> 图片对象、canvas对象、 video对象</p></li><li><p><code>x</code>、<code>y</code> 图片绘制的左上角</p></li><li><p><code>w</code>、<code>h</code> 图片绘制尺寸设置，会对图片进行缩放而不是裁剪</p></li></ul></li><li><p>九个参数 <code>drawImage(img, x, y, w, h, x1, y1, w1, h1)</code></p><ul><li><p><code>img</code> 图片对象、canvas对象、 video对象</p></li><li><p><code>x</code>、<code>y</code>、<code>w</code>、<code>h</code> 图片中的一个矩形区域</p></li><li><p><code>x1</code>、<code>y1</code>、<code>w1</code>、<code>h1</code> 画布中的一个矩形区域, <code>w1</code>、<code>h1</code>是图片的缩放尺寸而不是裁剪</p></li></ul></li></ul><h2 id="帧动画"><a href="#帧动画" class="headerlink" title="帧动画"></a>帧动画</h2><h3 id="绘制关键思路"><a href="#绘制关键思路" class="headerlink" title="绘制关键思路"></a>绘制关键思路</h3><ol><li><p>动态获取当前图片的尺寸</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imageWidth = image.width;</span><br><span class="line"><span class="keyword">var</span> imageHeight = image.height;</span><br></pre></td></tr></table></figure></li><li><p>计算出每个小人物的尺寸</p></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><a href="https://garden.aezo.cn/demos/canvas帧动画.html">https://garden.aezo.cn/demos/canvas帧动画.html</a></p><h3 id="方向键控制精灵行走的帧动画"><a href="#方向键控制精灵行走的帧动画" class="headerlink" title="方向键控制精灵行走的帧动画"></a>方向键控制精灵行走的帧动画</h3><p><a href="https://garden.aezo.cn/demos/canvas方向键控制行走动画.html">https://garden.aezo.cn/demos/canvas方向键控制行走动画.html</a></p><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><hr><p>参考视频</p><p> <a href="https://www.bilibili.com/video/av53813293?p=2" target="_blank" rel="noopener">https://www.bilibili.com/video/av53813293?p=2</a> (canvas视频【高级教程】)</p>]]></content>
      
      <categories>
          
          <category> web,CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> web </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UML</title>
      <link href="/2020/02/26/others/UML/starUml/"/>
      <url>/2020/02/26/others/UML/starUml/</url>
      <content type="html"><![CDATA[<h1 id="UML基础-1"><a href="#UML基础-1" class="headerlink" title="UML基础 ^1"></a>UML基础 <a href="https://www.bilibili.com/video/av34973179?from=search&amp;seid=955581513016587565" title="熟练使用UML" target="_blank" rel="noopener">^1</a></h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p><code>OO(Object-Orientation)</code> 面向对象，一种系统建模技术 </p></li><li><p><code>OOP(Object-Orientation Programming)</code> 按照<code>OO</code>的方法来开发程序的过程</p></li><li><p><code>OOAD(Object Oriented Analysis and Design)</code> 面向对象的分析与设计，根据<code>OO</code>的方法学，对软件系统进行分析和设计的过程(分析阶段<code>OOA</code>、设计阶段<code>OOD</code>)</p><ul><li><p><code>OOA</code>阶段需要解决的核心问题是 <code>what to do</code></p><ul><li><p>建立针对业务问题域的清晰视图</p></li><li><p>列出系统必须要完成的核心任务</p></li><li><p>针对问题域建立公共词汇表</p></li><li><p>列出针对此问题域的最佳解决方案</p></li></ul></li><li><p><code>OOD</code>阶段需要解决的核心问题是 <code>How to do</code></p><ul><li><p>如何解决具体的业务问题</p></li><li><p>引入系统工作所需的支持元素</p></li><li><p>定义系统的实现策略</p></li></ul></li></ul></li><li><p><code>对象</code>: </p><ul><li><p>客观存在的、唯一的实体</p></li><li><p>是面向对象编程过程中分析与解决问题的出发点与基础</p></li><li><p>拥有自己的标识、数据与行为</p></li><li><p>可以简单或复杂</p></li><li><p>可以抽象或具体</p></li><li><p>在<code>OOP</code>中是一个类的动态实例</p></li></ul></li></ul><h3 id="OOP主要特征"><a href="#OOP主要特征" class="headerlink" title="OOP主要特征"></a>OOP主要特征</h3><ul><li><p>抽象(abstract)</p><ul><li><p>忽略一个对象或实体的细节而只关注其本质特征的过程</p></li><li><p>简化功能与格式</p></li><li><p>帮助用户与对象交互</p></li></ul></li><li><p>封装(encapsulation)</p><ul><li><p>隐藏数据和实现</p></li><li><p>提供公共方法供用户调用功能</p></li><li><p>对象的两种视图： 外部视图(对象能做的工作)、内部视图(对象如何完成工作)  </p></li></ul></li><li><p>继承(inheritance)</p><ul><li><p>通过存在的类型定义新类型的机制</p></li><li><p>通常在两个类型之间存在<code>is a</code>或<code>kind of</code>这样的关系</p></li><li><p>通过继承可实现代码重用，是多态的基础</p></li></ul></li><li><p>多态(polymorphism)</p><ul><li><p>一个名称，多种形式</p></li><li><p>基于继承的多态</p></li><li><p>调用方法时根据所给对象的不同，选择不同的处理方式</p></li></ul></li><li><p>关联(association)</p><ul><li><p>对象之间交互时的一种引用方式</p></li><li><p>当一个对象通过对另一个对象的引用去使用另一个对象的服务或操作时，两个对象之间便产生了关联</p></li></ul></li><li><p>聚合(aggregation)</p><ul><li><p>一种关系较强的关联关系，一个对象成为另一个对象的组成部分</p></li><li><p>两个对象之间存在<code>has a</code>的关系，一个对象作为另一个对象的属性存在，在外部对象被生产时可由客户端指定与其关联的内部对象</p></li><li><p>e.g. 汽车与轮胎的关系： 轮胎作为汽车的一部分可以和汽车分别生产后装配起来，但汽车也可换别新轮胎，轮胎也可与其他汽车装配使用</p></li></ul></li><li><p>组合(composition)</p><ul><li><p>关联关系中最为强烈的一种关系</p></li><li><p>当一个对象包含另一个对象时，外部对象负责管理内部对象的生命周期情况</p></li><li><p>内部对象的创建又由外部对象自己控制</p></li><li><p>外部对象不存在时内部对象也不能存在</p></li></ul></li><li><p>内聚与耦合(cohesion &amp; coupling)</p><p>内聚： 度量一个类独立完成某项工作的能力</p><p>耦合： 度量系统内或系统之间依赖关系的复杂度</p><p>设计原则： 增加内聚，减少耦合(高内聚低耦合)</p></li></ul><h3 id="域模型"><a href="#域模型" class="headerlink" title="域模型"></a>域模型</h3><p>在面向对象术语中也可称为设计模型，由具有状态和行为的域对象组成。</p><p>域对象之间的关系：</p><ul><li><p>关联(Association)</p></li><li><p>依赖(Dependency)</p></li><li><p>聚集(Aggregation)</p><p>整体和部分之间的关系</p></li><li><p>一般化(泛化)(Generalization)</p><p>类之间的继承关系</p></li></ul><h3 id="开发过程概述"><a href="#开发过程概述" class="headerlink" title="开发过程概述"></a>开发过程概述</h3><p>传统开发过程： 瀑布模型</p><p><img src="/source/data/img/uml/瀑布模型.png" alt="传统开发过程"></p><p>OOAD开发过程：</p><ul><li><p>大项目分解成子项目</p></li><li><p>使用UML工具</p></li><li><p>统一软件开发过程是迭代、递增的开发过程</p></li></ul><h3 id="迭代、递增的项目生命周期"><a href="#迭代、递增的项目生命周期" class="headerlink" title="迭代、递增的项目生命周期"></a>迭代、递增的项目生命周期</h3><p>在每一个迭代的阶段应该做以下工作：</p><ul><li><p>选择并分析相关用例</p></li><li><p>根据所选架构进行设计</p></li><li><p>在组件层次实现设计</p></li><li><p>验证组件满足用例的需要</p></li></ul><p>当一次迭代满足目标后，开发进入下一个迭代周期。</p><p>主要阶段：</p><p>Inception - start up</p><p>Elaboration - refine</p><p>Constructon - implement</p><p>Transition - promotion</p><p>每个周期包含一次或多次迭代</p><p>一个阶段的结束称之为“里程碑(milestone)”</p><h4 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h4><p>此阶段的增量集中于：</p><ul><li><p>项目启动</p></li><li><p>建立业务模型</p></li><li><p>定义业务问题域</p></li><li><p>找出主要的风险因素</p></li><li><p>定义项目需求的外延</p></li><li><p>创建业务问题域的相关说明文档</p></li></ul><h4 id="细化阶段"><a href="#细化阶段" class="headerlink" title="细化阶段"></a>细化阶段</h4><p>此阶段增量集中于： </p><ul><li><p>高层的分析与设计</p></li><li><p>建立项目的基础框架</p></li><li><p>监督主要的风险因素</p></li><li><p>制定达成项目目标的创建计划</p></li></ul><h4 id="构建阶段"><a href="#构建阶段" class="headerlink" title="构建阶段"></a>构建阶段</h4><p>代码及功能的实现</p><h4 id="移交阶段"><a href="#移交阶段" class="headerlink" title="移交阶段"></a>移交阶段</h4><p>此阶段增量集中于：</p><ul><li><p>向用户发布产品</p></li><li><p>beta测试</p></li><li><p>执行性能调优，用户培训和接收测试</p></li></ul><h4 id="每个阶段包含的工作流"><a href="#每个阶段包含的工作流" class="headerlink" title="每个阶段包含的工作流"></a>每个阶段包含的工作流</h4><p>每一次递增都由5部分组成： 需求与初始分析、分析、设计、实现、测试。</p><p>每一次迭代执行工作流的深度不同，早期的迭代在深度上覆盖初始工作流，后期迭代在深度上覆盖后期工作流。</p><h4 id="迭代、递增生命周期的优势"><a href="#迭代、递增生命周期的优势" class="headerlink" title="迭代、递增生命周期的优势"></a>迭代、递增生命周期的优势</h4><ul><li><p>降低成本</p></li><li><p>便于更好地维护项目进度</p></li><li><p>便于团队的协作开发</p></li><li><p>便于适应用户需求的动态变化</p></li></ul><h2 id="UML简介"><a href="#UML简介" class="headerlink" title="UML简介"></a>UML简介</h2><p><code>Unified Modeling Language</code>: 统一建模语言。图形化语言表示。</p><h3 id="UML图的分类"><a href="#UML图的分类" class="headerlink" title="UML图的分类"></a>UML图的分类</h3><h4 id="静态模型-static-model"><a href="#静态模型-static-model" class="headerlink" title="静态模型(static model)"></a>静态模型(static model)</h4><ul><li><p>创建并记录一个系统的静态特征</p></li><li><p>反映一个软件系统基础、固定的框架结构</p></li><li><p>创建相关问题域主要元素的视图</p></li></ul><p>静态建模包括： 用例图(user case diagrams)、类图(class diagrams)、对象图(object diagrams)、组件图(component diagrams)、部署图(deployment diagrams)</p><h4 id="动态模型-dynamic-model"><a href="#动态模型-dynamic-model" class="headerlink" title="动态模型(dynamic model)"></a>动态模型(dynamic model)</h4><p>动态建模用以展示系统的行为</p><p>动态建模包括： 时序图(sequence diagrams)、协作图(collaboration diagrams)、状态图(state chart diagrams)、活动图(activity diagrams)</p><h2 id="九大核心UML图"><a href="#九大核心UML图" class="headerlink" title="九大核心UML图"></a>九大核心UML图</h2><h2 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h2><p>展示系统的核心功能与其交互的用户，用户被称之为<code>&quot;活动者(Actor)&quot;</code></p><p>用例使用椭圆表示，为简化建模过程，用例图可标注优先级</p><h3 id="使用starUML绘制用例图"><a href="#使用starUML绘制用例图" class="headerlink" title="使用starUML绘制用例图"></a>使用starUML绘制用例图</h3><ol><li>在 <code>Model Explorer</code>工具栏中选中<code>Model</code>–&gt;右键选择<code>Add Diagram</code> –&gt; 选择 <code>Use Case Diagram</code></li></ol><p><img src="/source/data/img/uml/用例图绘制1.png" alt="用例图绘制步骤1"></p><ol start="2"><li>在<code>Tool Box</code>工具栏中选择模板进行绘制</li></ol><p><img src="/source/data/img/uml/用例图绘制2.png" alt="用例图绘制步骤2"></p><p>上图表示 <code>活动者admin</code>可执行<code>add</code> <code>update</code> <code>delete</code> <code>query</code>操作，<code>活动者guest</code>只能执行<code>query</code>操作</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>表现类的特征，描述多个类、接口特征以及对象之间的协作与交互。</p><p>类图由一个或多个矩形区域构成，包括类型(类名)、属性(可选)、操作(可选)</p><h3 id="使用starUML绘制类图"><a href="#使用starUML绘制类图" class="headerlink" title="使用starUML绘制类图"></a>使用starUML绘制类图</h3><p><img src="/source/data/img/uml/类图示例.png" alt="类图示例"></p><hr><p>参考文章</p>]]></content>
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Visio</title>
      <link href="/2020/02/26/others/visio/"/>
      <url>/2020/02/26/others/visio/</url>
      <content type="html"><![CDATA[<h1 id="UML基础-1"><a href="#UML基础-1" class="headerlink" title="UML基础 ^1"></a>UML基础 <a href="https://www.bilibili.com/video/av34973179?from=search&amp;seid=955581513016587565" title="熟练使用UML" target="_blank" rel="noopener">^1</a></h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p><code>OO(Object-Orientation)</code> 面向对象，一种系统建模技术 </p></li><li><p><code>OOP(Object-Orientation Programming)</code> 按照<code>OO</code>的方法来开发程序的过程</p></li><li><p><code>OOAD(Object Oriented Analysis and Design)</code> 面向对象的分析与设计，根据<code>OO</code>的方法学，对软件系统进行分析和设计的过程(分析阶段<code>OOA</code>、设计阶段<code>OOD</code>)</p><ul><li><p><code>OOA</code>阶段需要解决的核心问题是 <code>what to do</code></p><ul><li><p>建立针对业务问题域的清晰视图</p></li><li><p>列出系统必须要完成的核心任务</p></li><li><p>针对问题域建立公共词汇表</p></li><li><p>列出针对此问题域的最佳解决方案</p></li></ul></li><li><p><code>OOD</code>阶段需要解决的核心问题是 <code>How to do</code></p><ul><li><p>如何解决具体的业务问题</p></li><li><p>引入系统工作所需的支持元素</p></li><li><p>定义系统的实现策略</p></li></ul></li></ul></li><li><p><code>对象</code>: </p><ul><li><p>客观存在的、唯一的实体</p></li><li><p>是面向对象编程过程中分析与解决问题的出发点与基础</p></li><li><p>拥有自己的标识、数据与行为</p></li><li><p>可以简单或复杂</p></li><li><p>可以抽象或具体</p></li><li><p>在<code>OOP</code>中是一个类的动态实例</p></li></ul></li></ul><h3 id="OOP主要特征"><a href="#OOP主要特征" class="headerlink" title="OOP主要特征"></a>OOP主要特征</h3><ul><li><p>抽象(abstract)</p><ul><li><p>忽略一个对象或实体的细节而只关注其本质特征的过程</p></li><li><p>简化功能与格式</p></li><li><p>帮助用户与对象交互</p></li></ul></li><li><p>封装(encapsulation)</p><ul><li><p>隐藏数据和实现</p></li><li><p>提供公共方法供用户调用功能</p></li><li><p>对象的两种视图： 外部视图(对象能做的工作)、内部视图(对象如何完成工作)  </p></li></ul></li><li><p>继承(inheritance)</p><ul><li><p>通过存在的类型定义新类型的机制</p></li><li><p>通常在两个类型之间存在<code>is a</code>或<code>kind of</code>这样的关系</p></li><li><p>通过继承可实现代码重用，是多态的基础</p></li></ul></li><li><p>多态(polymorphism)</p><ul><li><p>一个名称，多种形式</p></li><li><p>基于继承的多态</p></li><li><p>调用方法时根据所给对象的不同，选择不同的处理方式</p></li></ul></li><li><p>关联(association)</p><ul><li><p>对象之间交互时的一种引用方式</p></li><li><p>当一个对象通过对另一个对象的引用去使用另一个对象的服务或操作时，两个对象之间便产生了关联</p></li></ul></li><li><p>聚合(aggregation)</p><ul><li><p>一种关系较强的关联关系，一个对象成为另一个对象的组成部分</p></li><li><p>两个对象之间存在<code>has a</code>的关系，一个对象作为另一个对象的属性存在，在外部对象被生产时可由客户端指定与其关联的内部对象</p></li><li><p>e.g. 汽车与轮胎的关系： 轮胎作为汽车的一部分可以和汽车分别生产后装配起来，但汽车也可换别新轮胎，轮胎也可与其他汽车装配使用</p></li></ul></li><li><p>组合(composition)</p><ul><li><p>关联关系中最为强烈的一种关系</p></li><li><p>当一个对象包含另一个对象时，外部对象负责管理内部对象的生命周期情况</p></li><li><p>内部对象的创建又由外部对象自己控制</p></li><li><p>外部对象不存在时内部对象也不能存在</p></li></ul></li><li><p>内聚与耦合(cohesion &amp; coupling)</p><p>内聚： 度量一个类独立完成某项工作的能力</p><p>耦合： 度量系统内或系统之间依赖关系的复杂度</p><p>设计原则： 增加内聚，减少耦合(高内聚低耦合)</p></li></ul><h3 id="域模型"><a href="#域模型" class="headerlink" title="域模型"></a>域模型</h3><p>在面向对象术语中也可称为设计模型，由具有状态和行为的域对象组成。</p><p>域对象之间的关系：</p><ul><li><p>关联(Association)</p></li><li><p>依赖(Dependency)</p></li><li><p>聚集(Aggregation)</p><p>整体和部分之间的关系</p></li><li><p>一般化(泛化)(Generalization)</p><p>类之间的继承关系</p></li></ul><h3 id="开发过程概述"><a href="#开发过程概述" class="headerlink" title="开发过程概述"></a>开发过程概述</h3><p>传统开发过程： 瀑布模型</p><p><img src="/source/data/img/uml/瀑布模型.png" alt="传统开发过程"></p><p>OOAD开发过程：</p><ul><li><p>大项目分解成子项目</p></li><li><p>使用UML工具</p></li><li><p>统一软件开发过程是迭代、递增的开发过程</p></li></ul><h3 id="迭代、递增的项目生命周期"><a href="#迭代、递增的项目生命周期" class="headerlink" title="迭代、递增的项目生命周期"></a>迭代、递增的项目生命周期</h3><p>在每一个迭代的阶段应该做以下工作：</p><ul><li><p>选择并分析相关用例</p></li><li><p>根据所选架构进行设计</p></li><li><p>在组件层次实现设计</p></li><li><p>验证组件满足用例的需要</p></li></ul><p>当一次迭代满足目标后，开发进入下一个迭代周期。</p><p>主要阶段：</p><p>Inception - start up</p><p>Elaboration - refine</p><p>Constructon - implement</p><p>Transition - promotion</p><p>每个周期包含一次或多次迭代</p><p>一个阶段的结束称之为“里程碑(milestone)”</p><h4 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h4><p>此阶段的增量集中于：</p><ul><li><p>项目启动</p></li><li><p>建立业务模型</p></li><li><p>定义业务问题域</p></li><li><p>找出主要的风险因素</p></li><li><p>定义项目需求的外延</p></li><li><p>创建业务问题域的相关说明文档</p></li></ul><h4 id="细化阶段"><a href="#细化阶段" class="headerlink" title="细化阶段"></a>细化阶段</h4><p>此阶段增量集中于： </p><ul><li><p>高层的分析与设计</p></li><li><p>建立项目的基础框架</p></li><li><p>监督主要的风险因素</p></li><li><p>制定达成项目目标的创建计划</p></li></ul><h4 id="构建阶段"><a href="#构建阶段" class="headerlink" title="构建阶段"></a>构建阶段</h4><p>代码及功能的实现</p><h4 id="移交阶段"><a href="#移交阶段" class="headerlink" title="移交阶段"></a>移交阶段</h4><p>此阶段增量集中于：</p><ul><li><p>向用户发布产品</p></li><li><p>beta测试</p></li><li><p>执行性能调优，用户培训和接收测试</p></li></ul><h4 id="每个阶段包含的工作流"><a href="#每个阶段包含的工作流" class="headerlink" title="每个阶段包含的工作流"></a>每个阶段包含的工作流</h4><p>每一次递增都由5部分组成： 需求与初始分析、分析、设计、实现、测试。</p><p>每一次迭代执行工作流的深度不同，早期的迭代在深度上覆盖初始工作流，后期迭代在深度上覆盖后期工作流。</p><h4 id="迭代、递增生命周期的优势"><a href="#迭代、递增生命周期的优势" class="headerlink" title="迭代、递增生命周期的优势"></a>迭代、递增生命周期的优势</h4><ul><li><p>降低成本</p></li><li><p>便于更好地维护项目进度</p></li><li><p>便于团队的协作开发</p></li><li><p>便于适应用户需求的动态变化</p></li></ul><h2 id="UML简介"><a href="#UML简介" class="headerlink" title="UML简介"></a>UML简介</h2><p><code>Unified Modeling Language</code>: 统一建模语言。图形化语言表示。</p><h3 id="UML图的分类"><a href="#UML图的分类" class="headerlink" title="UML图的分类"></a>UML图的分类</h3><h4 id="静态模型-static-model"><a href="#静态模型-static-model" class="headerlink" title="静态模型(static model)"></a>静态模型(static model)</h4><ul><li><p>创建并记录一个系统的静态特征</p></li><li><p>反映一个软件系统基础、固定的框架结构</p></li><li><p>创建相关问题域主要元素的视图</p></li></ul><p>静态建模包括： 用例图(user case diagrams)、类图(class diagrams)、对象图(object diagrams)、组件图(component diagrams)、部署图(deployment diagrams)</p><h4 id="动态模型-dynamic-model"><a href="#动态模型-dynamic-model" class="headerlink" title="动态模型(dynamic model)"></a>动态模型(dynamic model)</h4><p>动态建模用以展示系统的行为</p><p>动态建模包括： 时序图(sequence diagrams)、协作图(collaboration diagrams)、状态图(state chart diagrams)、活动图(activity diagrams)</p><h2 id="九大核心UML图"><a href="#九大核心UML图" class="headerlink" title="九大核心UML图"></a>九大核心UML图</h2><h2 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h2><p>展示系统的核心功能与其交互的用户，用户被称之为<code>&quot;活动者(Actor)&quot;</code></p><p>用例使用椭圆表示，为简化建模过程，用例图可标注优先级</p><h3 id="使用starUML绘制用例图"><a href="#使用starUML绘制用例图" class="headerlink" title="使用starUML绘制用例图"></a>使用starUML绘制用例图</h3><ol><li>在 <code>Model Explorer</code>工具栏中选中<code>Model</code>–&gt;右键选择<code>Add Diagram</code> –&gt; 选择 <code>Use Case Diagram</code></li></ol><p><img src="/source/data/img/uml/用例图绘制1.png" alt="用例图绘制步骤1"></p><ol start="2"><li>在<code>Tool Box</code>工具栏中选择模板进行绘制</li></ol><p><img src="/source/data/img/uml/用例图绘制2.png" alt="用例图绘制步骤2"></p><p>上图表示 <code>活动者admin</code>可执行<code>add</code> <code>update</code> <code>delete</code> <code>query</code>操作，<code>活动者guest</code>只能执行<code>query</code>操作</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>表现类的特征，描述多个类、接口特征以及对象之间的协作与交互。</p><p>类图由一个或多个矩形区域构成，包括类型(类名)、属性(可选)、操作(可选)</p><h3 id="使用starUML绘制类图"><a href="#使用starUML绘制类图" class="headerlink" title="使用starUML绘制类图"></a>使用starUML绘制类图</h3><p><img src="/source/data/img/uml/类图示例.png" alt="类图示例"></p><hr><p>参考文章</p>]]></content>
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序</title>
      <link href="/2020/02/04/computerLanguage/miniProgram/wechat_miniprogram/"/>
      <url>/2020/02/04/computerLanguage/miniProgram/wechat_miniprogram/</url>
      <content type="html"><![CDATA[<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>参考微信小程序官方文档： <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/getstart.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/getstart.html</a></p><ol><li>注册账号</li></ol><ul><li><p>每个邮箱仅能申请一个小程序</p></li><li><p>邮箱必须未被微信公众号注册且未被微信用户绑定</p></li></ul><ol start="2"><li><p>获取APPID</p></li><li><p>下载微信小程序开发工具，下载地址： <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></p></li></ol><h1 id="小程序Demo"><a href="#小程序Demo" class="headerlink" title="小程序Demo"></a>小程序Demo</h1><p>启动微信小程序开发工具，使用测试appid新建项目。</p><h2 id="小程序结构目录"><a href="#小程序结构目录" class="headerlink" title="小程序结构目录"></a>小程序结构目录</h2><table><thead><tr><th>结构</th><th>传统web</th><th>微信小程序</th></tr></thead><tbody><tr><td>结构</td><td>HTML</td><td>WXML</td></tr><tr><td>样式</td><td>CSS</td><td>WXSS</td></tr><tr><td>逻辑</td><td>JavaScript</td><td>JavaScript</td></tr><tr><td>配置</td><td>无</td><td>JSON</td></tr></tbody></table><p><strong>传统web是三层结构，微信小程序是四层结构，多了一层配置.json</strong></p><h2 id="初始化demo结构分析"><a href="#初始化demo结构分析" class="headerlink" title="初始化demo结构分析"></a>初始化demo结构分析</h2><ul><li><p>pages 用于存放页面</p></li><li><p>utils 存放工具类</p></li><li><p>app.js 小程序入口文件</p></li><li><p>app.json 公共配置文件，配置小程序大体结构(默认标题等)</p></li><li><p>app.wxss 全局样式</p></li><li><p>project.config.json 对应小程序开发工具详情中的内容</p></li></ul><h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><p>一个小程序应用包括最基本的两种配置文件： 全局设置的app.json和页面自己的page.json</p><p><strong>配置文件中不能出现注释</strong></p><h3 id="全局配置文件app-json"><a href="#全局配置文件app-json" class="headerlink" title="全局配置文件app.json"></a>全局配置文件app.json</h3><p>全局配置文件可配置小程序的所有页面路径、界面表现、网络超时时间、底部tab等。</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html</a></p><p>Demo中的默认配置如下： </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/logs"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"window"</span>: &#123;</span><br><span class="line">    <span class="attr">"backgroundTextStyle"</span>: <span class="string">"light"</span>,</span><br><span class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#fff"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"WeChat"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTextStyle"</span>: <span class="string">"black"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"style"</span>: <span class="string">"v2"</span>,</span><br><span class="line">  <span class="attr">"sitemapLocation"</span>: <span class="string">"sitemap.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>pages 整个小程序中拥有的页面路径</p><p>  一般新增页面时需要进行两步操作： 1. 在指定位置新增页面 2. 将新增页面路径填入app.json的pages中</p><p>  使用小程序开发工具，直接在app.json中添加pages路径，编译后会自动新增文件和文件夹</p><p>  小程序加载顺序是根据页面路径的配置而来</p></li><li><p>window</p><p>  设置小程序的状态栏、导航条、标题、窗口背景色等</p><p>  <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#window" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#window</a></p></li><li><p>tabBar </p><p>  配置底部导航栏</p><ul><li><p><code>list</code>: tab的列表，最少 2 个、最多 5 个 tab<br>  tab 按数组的顺序排序，每个项都是一个对象，其属性值只有四个：<br>  <code>pagePath</code>、<code>text</code>、<code>iconPath</code>、<code>selectedIconPath</code></p></li><li><p><code>color</code>: tab 上的文字默认颜色，仅支持十六进制颜色</p><p>示例： </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"pages"</span>: [<span class="string">"pages/index/index"</span>, <span class="string">"pages/logs/index"</span>],</span><br><span class="line">    <span class="attr">"window"</span>: &#123;</span><br><span class="line">        <span class="attr">"navigationBarTitleText"</span>: <span class="string">"Demo"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"tabBar"</span>: &#123;</span><br><span class="line">        <span class="attr">"list"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"pagePath"</span>: <span class="string">"pages/index/index"</span>,</span><br><span class="line">            <span class="attr">"text"</span>: <span class="string">"首页"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"pagePath"</span>: <span class="string">"pages/logs/logs"</span>,</span><br><span class="line">            <span class="attr">"text"</span>: <span class="string">"日志"</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"networkTimeout"</span>: &#123;</span><br><span class="line">        <span class="attr">"request"</span>: <span class="number">10000</span>,</span><br><span class="line">        <span class="attr">"downloadFile"</span>: <span class="number">10000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"debug"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"navigateToMiniProgramAppIdList"</span>: [<span class="string">"wxe5f52902cf4de896"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面配置文件"><a href="#页面配置文件" class="headerlink" title="页面配置文件"></a>页面配置文件</h3><p>用来表示页面目录下的<code>page.json</code>和小程序页面相关的配置，可以在此独立定义每个页面的一些属性，如顶部颜色、是否允许下拉刷新等。</p><p>页面的配置只能设置app.json中部分<code>window</code>配置项的内容，页面中的配置项会覆盖<code>app.json</code>的<code>window</code>中相同的配置项</p><h2 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h2><p><code>WXML(WeiXin Markup Language)</code>是框架设计的一套语言，集合基础组件、事件系统可以构建出页面的结构</p><h3 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/view.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/component/view.html</a></p><p>名称|    功能说明<br>-|-<br><code>cover-image</code>|    覆盖在原生组件之上的图片视图<br><code>cover-view</code>|    覆盖在原生组件之上的文本视图<br><code>movable-area</code>|    movable-view的可移动区域<br><code>movable-view</code>|    可移动的视图容器，在页面中可以拖拽滑动<br><code>scroll-view</code>|    可滚动视图区域<br><code>swiper</code>|    滑块视图容器<br><code>swiper-item</code>    |仅可放置在swiper组件中，宽高自动设置为100%<br><code>view</code>|    视图容器</p></li><li><p><code>view</code> 标签</p><p>  类似于<code>div</code>，但有自己的属性</p><p>  如<code>hover-class</code>表示 指定按下去的样式类</p></li><li><p><code>text</code>标签</p><p>  显示普通的文本，只能嵌套text</p><p>  <code>selectable</code> 表示文本是否可选，默认为否</p><p>  <code>decode</code> 表示是否解码，默认为否</p></li><li><p><code>image</code>图片标签</p><p>  默认宽度为320px,高度240px</p><p>  <strong>此标签其实是web中的图片标签和背景图片的结合，并且不支持web中的背景图片的写法</strong></p><p>  属性名| 类型 | 默认值 | 说明<br>  -|-|-|-<br>  src|string| |图片地址<br>  mode|String|’scaleToFill’|图片裁剪、缩放的模式<br>  lazy-load|Boolean|false|图片懒加载，只针对page与scroll-view下的image起作用</p></li><li><p><code>swiper</code>标签</p><p>  轮播图组件，默认宽度100%,高度150%</p><p>  子元素必须有<code>swiper-item</code></p></li><li><p><code>navigator</code>标签</p><p>  导航组件，类似超链接标签</p><p>  <code>target</code>: 在哪个目标发生跳转，默认当前小程序，可选值self/miniProgram</p><p>  <code>url</code>: 当前小程序内跳转链接</p><p>  <code>open-type</code>: 跳转方式</p></li><li><p><code>video</code></p><p>  视频。原生组件，类似于web中的video</p></li><li><p>自定义组件</p><p>  一个组件由<code>json</code> <code>wxml</code> <code>wxss</code> <code>js</code> 4个文件组成</p><ol><li><p>声明组件</p><p> 需要在json文件中进行自定义组件声明</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"component"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑组件</p></li><li><p>使用自定义组件</p><p> 在页面的<code>json</code>文件中进行引用声明，并提供对应的组件名和组件路径</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 引用声明</span><br><span class="line">    "usingComponents": &#123;</span><br><span class="line">        // 要使用的组件名称     // 组件的路径</span><br><span class="line">        "component-tag-name": "path/to/the/custom/component"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>WXML文件中使用&#123;&#123;&#125;&#125;</p><p>属性中要体现布尔类型的值，也必须加上两个大括号。</p><p>错误写法: <code>&lt;checkbox checked=&quot;false&quot;&gt;&lt;/checkbox&gt;</code></p><p>正确写法: <code>&lt;checkbox checked=&quot;&amp;#123;&amp;#123;false&amp;#125;&amp;#125flase&quot;&gt;&lt;/checkbox&gt;</code></p><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3></li><li><p>三元运算</p><p>  <code>&lt;view hidden=&quot;&amp;#123;&amp;#123; flag ? true : false &amp;#125;&amp;#125&quot;&gt;Hidden&lt;/view&gt;</code></p></li><li><p>算术运算</p><p>  在&#123;&#123;&#125;&#125;中直接进行算术运算</p></li><li><p>逻辑判断</p><p>  <code>wx:if</code> if条件</p><p><strong>花括号和引号之间如果有空格，最终将被解析成字符串</strong></p></li></ul></li></ul><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p><code>wx:for</code></p><p>项的变量名默认为<code>item</code>，<code>wx:for-item</code>可以指定数组当前元素的变量名</p><p>下标变量名默认为<code>index</code>, <code>wx:for-inidex</code>可以指定数组当前下标的变量名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span></span><br><span class="line">    &#123;&#123;index&#125;&#125;: &#123;&#123;item.meaasge&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        array:[&#123;</span><br><span class="line">            message: 'hello'</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            message:'what'</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="WXSS"><a href="#WXSS" class="headerlink" title="WXSS"></a>WXSS</h3><p>WXSS(WeiXin Style Sheet)是一套样式语言，用于描述WXML的组件样式，与CSS相比，WXSS扩展的特性有： 尺寸单位、样式导入</p><ul><li><p>尺寸单位<code>rpx</code></p><p>  <code>rpx</code>(responsive pixel): 可根据屏幕宽度进行自适应</p></li><li><p>样式导入</p></li></ul><p>使用<code>import</code>语句导入</p><p><code>@import &quot;被导入文件路径&quot;</code></p><p><strong>样式文件wxss中的注释不能用<code>//</code>,只能用`/</strong>/`**</p>]]></content>
      
      <categories>
          
          <category> miniProgram </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> miniProgram </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx</title>
      <link href="/2020/02/01/computerLanguage/Nginx/Nginx/"/>
      <url>/2020/02/01/computerLanguage/Nginx/Nginx/</url>
      <content type="html"><![CDATA[<h1 id="Nginx背景"><a href="#Nginx背景" class="headerlink" title="Nginx背景"></a>Nginx背景</h1><p>Nginx与Apache一样都是一种WEB服务器。基于REST架构风格，以统一资源描述符（Uniform Resoucrces Identifier）URI或者统一资源定位符(Uniform Resources Locator)URL作为共同一句，通过HTTP协议提供各种网络服务。</p><p><code>REST架构风格</code>: 架构的一种编码规范</p><p>普通的请求格式为： 域名:端口号/接口地址 e.g. <a href="http://ip:port/queryUserInfo?id=1" target="_blank" rel="noopener">http://ip:port/queryUserInfo?id=1</a></p><p>使用REST风格的请求方式： <a href="http://ip:port/queryUserInfo/1" target="_blank" rel="noopener">http://ip:port/queryUserInfo/1</a></p><p><code>Apache</code></p><p>优点： 稳定 开源 跨平台</p><p>缺点: 重量级 不支持高并发 运行数以万计的并发访问会导致服务器消耗大量内存</p><h1 id="Nginx概述"><a href="#Nginx概述" class="headerlink" title="Nginx概述"></a>Nginx概述</h1><ul><li><p>高性能的HTTP和反向代理web服务器，轻量级</p></li><li><p>提供IMAP/POP3/SMTP服务</p></li><li><p>发布于2004年10月4日(第一个公开版本为0.1.0)，稳定版1.4.0与2013年4月24日发布，选择1.4.0之后的版本使用</p></li><li><p>由C语言编写</p></li><li><p>跨平台服务器</p></li><li><p>Nginx有自己的函数库，并且除了zlib PCRE 和OpenSSL之外，标准模块只使用系统库C库函数，如不需要或考虑到潜在的授权冲突，可以不使用这些第三方库</p></li></ul><h1 id="Nginx优势"><a href="#Nginx优势" class="headerlink" title="Nginx优势"></a>Nginx优势</h1><ul><li><p>占有内存少，在3w并发的连接中，开启10个nginx进程消耗内存大约为150M</p></li><li><p>处理高并发能力强，官方测试能支持5w并发连接</p></li><li><p>简单，配置文件通俗易懂</p></li><li><p>免费、开源</p></li><li><p>支持Rewriter重写，能根据域名、URL的不同，将HTPP请求分到不同的后端服务器群组</p></li><li><p>内置健康检查，如果nginx后端有几个服务器宕机了，不会影响前端访问，能自动检测服务状态</p></li><li><p>节省带宽，支持GZIP压缩，可以添加浏览器本地缓存的Header头</p></li><li><p>稳定性高，反向代理，很少宕机</p></li></ul><h1 id="Nginx应用场景"><a href="#Nginx应用场景" class="headerlink" title="Nginx应用场景"></a>Nginx应用场景</h1><h2 id="功能与应用场景"><a href="#功能与应用场景" class="headerlink" title="功能与应用场景"></a>功能与应用场景</h2><ul><li><p>web服务器、轻量级 —— 充当代理服务器</p></li><li><p>负载均衡 —— IP负载、静态负载</p></li><li><p>支持缓存 —— 动静分离</p></li><li><p>能处理高并发 —— 限流、健康监控</p></li></ul><h1 id="Linux下Nginx安装-未跟着操作，此段先跳过"><a href="#Linux下Nginx安装-未跟着操作，此段先跳过" class="headerlink" title="Linux下Nginx安装(未跟着操作，此段先跳过)"></a>Linux下Nginx安装(未跟着操作，此段先跳过)</h1><h1 id="Nginx命令-Linux环境下"><a href="#Nginx命令-Linux环境下" class="headerlink" title="Nginx命令(Linux环境下)"></a>Nginx命令(Linux环境下)</h1><h2 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h2><p><code>cd sbin/</code> 切换到安装目录下的<code>/sbin</code>目录，该目录下有<code>nginx</code>的命令</p><p><code>./nginx</code> 直接运行<code>nginx</code>命令</p><h3 id="查看Nginx是否启动成功"><a href="#查看Nginx是否启动成功" class="headerlink" title="查看Nginx是否启动成功"></a>查看Nginx是否启动成功</h3><p>方法1： <code>ss -tanl</code> </p><pre><code>查看正在运行的端口号，找到nginx默认端口号`80`，若`80`端口正常启动，表示Nginx启动成功</code></pre><p>方法2： <code>ps -ef|grep nginx</code></p><pre><code>查看nginx的进程，若启动成功则会出现两个nginx进程，master为主进程，负责接收请求；worker为子进程，负责转发请求</code></pre><p>方法3： 在浏览器中输入<code>服务器ip</code>,若访问不到，可能是因为当前机器无法访问服务器，若服务器本地访问不到端口，应先开启端口 (虚拟机的防火墙需要通过80端口，自己的电脑关闭防火墙)</p><pre><code>开启端口: `/sbin/iptables -I INPUT -p tcp --dport -j ACCEPT`若端口开启后依旧访问不到，则需要关闭本地防火墙</code></pre><p>出现<code>Welcome to nginx!</code>界面则表示启动成功</p><h2 id="停止Nginx"><a href="#停止Nginx" class="headerlink" title="停止Nginx"></a>停止Nginx</h2><p>使用 <code>./nginx -s stop</code> 或 <code>./nginx -s quit</code>命令都能停止运行</p><ul><li><p><code>./nginx -s stop</code> 先查出nginx的进程id再使用kill命令强制杀掉进程</p></li><li><p><code>./nginx -s quit</code> 待nginx进程处理任务完毕进行停止</p></li></ul><h2 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h2><p><code>./nginx -s reload</code></p><h1 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h1><p>打开配置文件夹中的<code>nginx.conf</code>文件，默认的配置文件中包含三个大模块：</p><ul><li><p>基础全局模块： </p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line"># nginx进程数，建议设置为CPU总核心数，默认为1</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"># 定义全局错误日志类型 [debug | info | notice | warn | error | crit]</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line"># 进程pid文件，指定nginx进程运行文件存放地址</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"># 最大打开文件数连接,连接上限，与工作模式相关</span><br><span class="line">worker_rlimit_nofile 65535;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>事件模块(events)</p></li></ul><p>用于配置网络模块，网络信息</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    # 单个进程最大连接数 最大连接数=连接数*进程数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">    # 网络连接超时时间，默认为60s</span><br><span class="line">    keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">    # 头部信息的缓存大小</span><br><span class="line">    client_header_buffer_size 4k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li>请求(http)模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen       9000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><ol><li>HTTP模块(代理、缓存、日志定义和第三方模块)</li><li>EVENTS模块(网络连接)</li><li>全局模块(全局指令，日志路径，PID路径，用户信息等)</li></ol><h3 id="HTTP模块子模块"><a href="#HTTP模块子模块" class="headerlink" title="HTTP模块子模块"></a>HTTP模块子模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    http &#123;</span><br><span class="line">    </span><br><span class="line">    #### 全局模块 </span><br><span class="line"></span><br><span class="line">    # 文件扩展名与文件类型映射表</span><br><span class="line">    include       mime.types;</span><br><span class="line"></span><br><span class="line">    # 默认的文件类型(stream流类型、text类型、XML、HTML等，默认为字符流)</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # 默认编码 默认为utf-8</span><br><span class="line">    # charset utf-8;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    #### FASTCGI模块 用于改善网络性能，减少资源占用，提高访问速度</span><br><span class="line"></span><br><span class="line">    # fastcgi_connect_timeout 300;</span><br><span class="line">    # fastcgi_send_timeout 300;</span><br><span class="line">    # fastcgi_read_timeout 300;</span><br><span class="line"></span><br><span class="line">    #### Gzip模块 </span><br><span class="line"></span><br><span class="line">    # 默认关闭压缩模式</span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    #### server模块，虚拟主机模块，一个http可以含有多个server</span><br><span class="line">    server &#123;</span><br><span class="line">        # 监听端口</span><br><span class="line">        listen       80;</span><br><span class="line"></span><br><span class="line">        # 域名可以有多个， 用空格隔开</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen       9000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>正向代理、反向代理、透明代理</p><p>Ngnix下载安装后默认为正向代理，但Nginx最常用的是反向代理，因此需要手动配置。</p><p>Nginx配置中，若<code>http</code>模块配置了<code>upstream servermap</code>则表示反向代理，无则为正向代理，默认为无。</p><h1 id="Nginx集群搭建"><a href="#Nginx集群搭建" class="headerlink" title="Nginx集群搭建"></a>Nginx集群搭建</h1><ol><li><p>搭建三台tomcat服务器及一台代理服务器nginx，并保证分别可以单独访问</p></li><li><p>配置nginx</p><ul><li><p><code>cp nginx.conf nginx.conf.bak</code> </p><p>  备份<code>nginx.conf</code>文件，命名为<code>nginx.conf.bak</code></p></li><li><p><code>vi nginx.conf</code> 修改<code>nginx.conf</code>文件</p><p>在<code>nginx.conf</code>文件中的<code>http</code>模块中添加反向代理配置： </p><p>a. 配置服务器</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line">http &#123;</span><br><span class="line">    # 将请求转发到以下配置中的服务器中</span><br><span class="line">    upstream localhost &#123;</span><br><span class="line">        server 第一台服务器的ip或域名;</span><br><span class="line">        server 第二台服务器的ip或域名;</span><br><span class="line">        server 第三台服务器的ip或域名;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>b. 修改默认重定向地址    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line">http &#123;</span><br><span class="line">    # 将请求转发到以下配置中的服务器中</span><br><span class="line">    upstream localhost &#123;</span><br><span class="line">        server 第一台服务器的ip或域名;</span><br><span class="line">        server 第二台服务器的ip或域名;</span><br><span class="line">        server 第三台服务器的ip或域名;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            # root html;</span><br><span class="line">            # index index.html index.htm;</span><br><span class="line"></span><br><span class="line">            # 添加请求代理配置</span><br><span class="line">            proxy_pass http://localhost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>`proxy_pass`和`updstream`后面跟的都是`server_name`,即上述改动中，浏览器访问`http://localhost:80`时，会先找到代理配置` proxy_pass http://localhost;`,再根据`upstream`中`server_name`为`localhost`的配置启动对应的服务器。</code></pre><ol start="3"><li>修改完<code>nginx.conf</code>文件后需要重启<code>nginx</code></li></ol><h1 id="Nginx负载均衡"><a href="#Nginx负载均衡" class="headerlink" title="Nginx负载均衡"></a>Nginx负载均衡</h1><p>Nginx支持的负载策略： 轮询法(默认)、加权轮询法(权重法)、源地址哈希法、最小连接数法、第三方法则(Fair、url_hash)</p><h2 id="轮询法"><a href="#轮询法" class="headerlink" title="轮询法"></a>轮询法</h2><p>将请求按照顺序轮流分配到后端服务器上，均衡地对待后端的每一台服务器，不关心服务器实际的连接数和当前的系统负载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream localhost &#123;</span><br><span class="line">    server 192.168.1.1:8080 weight=1;</span><br><span class="line">    server 192.168.1.2:8080 weight=1;</span><br><span class="line">    server 192.168.1.3:8080 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置中<code>weight</code>表示权重，值越大表示权重越高，接收请求的几率越大，连接数越多。<code>weight</code>相同时，还是轮询法，可不写<code>weight</code></p><h2 id="加权轮询法-weight"><a href="#加权轮询法-weight" class="headerlink" title="加权轮询法(weight)"></a>加权轮询法(weight)</h2><p>性能比较强的服务器可以将<code>weight</code>值调高一点</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream localhost &#123;</span><br><span class="line">    server 192.168.1.1:8080 weight=10;</span><br><span class="line">    server 192.168.1.2:8080 weight=3;</span><br><span class="line">    server 192.168.1.3:8080 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="源地址哈希法"><a href="#源地址哈希法" class="headerlink" title="源地址哈希法"></a>源地址哈希法</h2><p>Nginx获取客户端的IP地址，通过哈希函数计算得到一个数值，用该数值对服务器列表的个数进行取模运算，得到的结果便是客户端要访问服务器的序号，同一个ip地址最终计算出来的后端服务器的序号是一致的。</p><p>哈希法可以保证同一个ip的请求被打到固定的机器上，可以解决集群模式下session共享问题：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream localhost &#123;</span><br><span class="line">    # 使用哈希法</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.1.1:8080 weight=1;</span><br><span class="line">    server 192.168.1.2:8080 weight=1;</span><br><span class="line">    server 192.168.1.3:8080 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="最小连接数法"><a href="#最小连接数法" class="headerlink" title="最小连接数法"></a>最小连接数法</h2><p>由于后台服务器配置不尽相同，对于请求的速度有快有慢，最小连接数法根据后台服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用率，合理分流到每台服务器。</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream localhost &#123;</span><br><span class="line">    # 使用最小连接数法</span><br><span class="line">    least_conn;</span><br><span class="line">    server 192.168.1.1:8080 weight=1;</span><br><span class="line">    server 192.168.1.2:8080 weight=1;</span><br><span class="line">    server 192.168.1.3:8080 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="第三方模块算法"><a href="#第三方模块算法" class="headerlink" title="第三方模块算法"></a>第三方模块算法</h2><h3 id="第三方模块的下载和安装"><a href="#第三方模块的下载和安装" class="headerlink" title="第三方模块的下载和安装"></a>第三方模块的下载和安装</h3><h4 id="Fair插件安装"><a href="#Fair插件安装" class="headerlink" title="Fair插件安装"></a>Fair插件安装</h4><ul><li><p>下载地址： <a href="https://github.com/gnosek/nginx-upstream-fair" target="_blank" rel="noopener">https://github.com/gnosek/nginx-upstream-fair</a></p></li><li><p>解压zip</p></li><li><p>增加模块: <code>./configure --prefix=/opt/nginx --add-module=/opt/nginx-upstream-fair-master</code></p></li><li><p>default_port问题修改： <code>cd nginx-upstream-fair-master</code></p></li><li><p><code>sed -i &#39;s/default_port/no_port/g&#39; ngx_http_upstream_fair_module.c</code></p></li><li><p><code>make</code></p></li><li><p><code>make install</code></p></li></ul><h4 id="hash插件安装"><a href="#hash插件安装" class="headerlink" title="hash插件安装"></a>hash插件安装</h4><ul><li><p>下载地址: <a href="https://github.com/evanmiller/nginx_upstream_hash" target="_blank" rel="noopener">https://github.com/evanmiller/nginx_upstream_hash</a></p></li><li><p>解压zip</p></li><li><p>增加模块 <code>./configure --prefix=/opt/nginx --add-module=/opt/nginx-upstream-hash-master</code></p></li><li><p><code>make</code></p></li><li><p><code>make install</code></p></li></ul><p><strong>此算法在Nginx1.7.2版本中已被废弃</strong></p><h3 id="Fair"><a href="#Fair" class="headerlink" title="Fair"></a>Fair</h3><ul><li><p>比weight、ip_hash更智能的负载均衡算法</p></li><li><p>可根据页面大小和加载时间长短智能地进行负载均衡，根据后台服务器响应时间来分配请求，相应时间段的优先分配</p></li><li><p>Nginx本身不支持fair，需要安装upstream_fair模块</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream localhost &#123;</span><br><span class="line">        # fair</span><br><span class="line">        fair;</span><br><span class="line">        server 192.168.1.1:8080 weight=1;</span><br><span class="line">        server 192.168.1.2:8080 weight=1;</span><br><span class="line">        server 192.168.1.3:8080 weight=1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a>url_hash</h3><p><strong>此算法在Nginx1.7.2版本中已被废弃</strong></p><p>根据访问的URL的哈希结果来分配请求，使每个URL定向到一台后端服务器，可进一步提高后端缓存服务器的效率，使用此算法时，与<code>Fair</code>一样先安装第三方插件</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream localhost &#123;</span><br><span class="line">        # url_hash</span><br><span class="line">        hash $request_uri;</span><br><span class="line">        server 192.168.1.1:8080 weight=1;</span><br><span class="line">        server 192.168.1.2:8080 weight=1;</span><br><span class="line">        server 192.168.1.3:8080 weight=1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ofbiz</title>
      <link href="/2019/10/23/computerLanguage/frameworks/ofbiz/"/>
      <url>/2019/10/23/computerLanguage/frameworks/ofbiz/</url>
      <content type="html"><![CDATA[<h1 id="Ofbiz权限设计"><a href="#Ofbiz权限设计" class="headerlink" title="Ofbiz权限设计"></a>Ofbiz权限设计</h1><h2 id="相关表"><a href="#相关表" class="headerlink" title="相关表"></a>相关表</h2><h2 id="用户登录表-user-login"><a href="#用户登录表-user-login" class="headerlink" title="用户登录表 user_login"></a>用户登录表 <code>user_login</code></h2><h2 id="安全组列表-security-group"><a href="#安全组列表-security-group" class="headerlink" title="安全组列表 security_group"></a>安全组列表 <code>security_group</code></h2><h2 id="登录用户和安全组关系表-user-login-security-group"><a href="#登录用户和安全组关系表-user-login-security-group" class="headerlink" title="登录用户和安全组关系表 user_login_security_group"></a>登录用户和安全组关系表 <code>user_login_security_group</code></h2><h2 id="权限组列表-security-permission"><a href="#权限组列表-security-permission" class="headerlink" title="权限组列表 security_permission"></a>权限组列表 <code>security_permission</code></h2><p>‘security_permission’中的数据是在 <code>xxxSecurityPermissionSeedData.xml</code>文件中配置的，<code>xxx</code>表示组件名称</p><h2 id="安全组与权限关系表-security-group-permission"><a href="#安全组与权限关系表-security-group-permission" class="headerlink" title="安全组与权限关系表 security_group_permission"></a>安全组与权限关系表 <code>security_group_permission</code></h2>]]></content>
      
      <categories>
          
          <category> framework,Ofbiz </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> framework </tag>
            
            <tag> Ofbiz </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter</title>
      <link href="/2019/10/23/computerLanguage/frameworks/flutter/"/>
      <url>/2019/10/23/computerLanguage/frameworks/flutter/</url>
      <content type="html"><![CDATA[<h1 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h1><p>初学flutter，以跑起来为主，其他细节慢慢补充</p><h1 id="下载与安装-Windows系统"><a href="#下载与安装-Windows系统" class="headerlink" title="下载与安装(Windows系统)"></a>下载与安装(Windows系统)</h1><p>官网地址: <a href="https://dart.dev/" target="_blank" rel="noopener">https://dart.dev/</a> </p><h2 id="Windows系统两种安装方式"><a href="#Windows系统两种安装方式" class="headerlink" title="Windows系统两种安装方式"></a>Windows系统两种安装方式</h2><ol><li>通过命令行安装[不推荐]</li><li><p>使用官方提供的软件安装</p><ul><li>下载地址： <a href="http://www.gekorm.com/dart-windows/" target="_blank" rel="noopener">http://www.gekorm.com/dart-windows/</a></li><li>下载安装完成后，在命令行中输入<code>dart --version</code>，出现版本号表示安装成功</li></ul></li></ol><p><strong>MAC系统只能通过命令行进行安装</strong></p><h2 id="Dart开发工具配置Dart"><a href="#Dart开发工具配置Dart" class="headerlink" title="Dart开发工具配置Dart"></a>Dart开发工具配置Dart</h2><p>Dart的开发工具有很多: IntelliJ IDEA WebStorm Atom Vscode等。</p><h3 id="Vscode中配置Dart"><a href="#Vscode中配置Dart" class="headerlink" title="Vscode中配置Dart"></a>Vscode中配置Dart</h3><ol><li>搜索安装<code>Dart</code>插件</li><li>搜索安装<code>code runner</code>以运行文件</li></ol><p><strong>Vscode安装完插件后需要重启才能生效</strong></p><h1 id="Dart-语法"><a href="#Dart-语法" class="headerlink" title="Dart 语法"></a>Dart 语法</h1><h2 id="入口方法"><a href="#入口方法" class="headerlink" title="入口方法"></a>入口方法</h2><p>入口方法为<code>main</code>方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Hello Dart'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无返回值的<code>main</code>方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Hello Dart'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注释方式"><a href="#注释方式" class="headerlink" title="注释方式"></a>注释方式</h2><p>使用 <code>//</code>、 <code>///</code> 、<code>/**/</code> 均能注释</p><h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>dart定义变量时，可以不预先定义变量类型 也可以指定变量类型</p><p>不预先定义变量类型使用<code>var</code>进行声明</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'this is var'</span>;</span><br></pre></td></tr></table></figure><p>指定变量类型：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> str = <span class="string">'this is String'</span>;</span><br></pre></td></tr></table></figure><p><strong>使用了<code>var</code>就不能指定类型，指定了类型就不能使用<code>var</code></strong></p><h4 id="变量名称命名规则"><a href="#变量名称命名规则" class="headerlink" title="变量名称命名规则"></a>变量名称命名规则</h4><ol><li>变量名必须由数字、字母、下划线和美元符号(<code>$</code>)组成</li><li>标识符开头不能是数字</li><li>标识符不能是保留字和关键字</li><li>变量的名字区分大小写</li><li>标识符要见名思意： 变量名称建议用名词，方法名建议用动词</li></ol><h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><p>使用修饰符<code>const</code>、<code>final</code>进行修饰</p><ul><li><code>const</code> 定义的常量值不变，一开始就需要赋值</li><li><p><code>final</code> 可以先不赋值，但只能赋值一次 </p><p>  <code>final</code>不仅有<code>const</code>的编译时常量的特性，还有运行时常量的特性，调用方法时得到常量值可以用<code>final</code>修饰</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">    <span class="keyword">final</span> a = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  const b = new DateTime.now(); 错误写法，运行会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="字符串-String类型"><a href="#字符串-String类型" class="headerlink" title="字符串 (String类型)"></a>字符串 (String类型)</h3><h4 id="字符串的定义方式"><a href="#字符串的定义方式" class="headerlink" title="字符串的定义方式"></a>字符串的定义方式</h4><pre><code>- 可以用单引号(&apos;&apos;)或者双引号定义(&quot;&quot;)- 使用三个单引号(&apos;&apos;&apos;  &apos;&apos;&apos;)或者三个双引号(&quot;&quot;&quot;  &quot;&quot;&quot;)可定义多行字符串</code></pre><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">'单引号定义字符串'</span>;</span><br><span class="line">  <span class="built_in">print</span>(str);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> str2 = <span class="string">"双引号定义字符串"</span>;</span><br><span class="line">  <span class="built_in">print</span>(str2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> str3 = <span class="string">''' </span></span><br><span class="line"><span class="string">                三个单引号</span></span><br><span class="line"><span class="string">                定义</span></span><br><span class="line"><span class="string">                多行</span></span><br><span class="line"><span class="string">                字符串</span></span><br><span class="line"><span class="string">                '''</span>;</span><br><span class="line">  <span class="built_in">print</span>(str3);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> str4 = <span class="string">""" 三个双引号</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                  定义</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                  多行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                  字符串  </span></span><br><span class="line"><span class="string">                  </span></span><br><span class="line"><span class="string">                  """</span>;</span><br><span class="line">  <span class="built_in">print</span>(str4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h4><ol><li><p>使用<code>$</code></p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">'donkey'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'monkey'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"one: $str1,$str2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"two: $str1 $str2"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出结果：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">one: donkey,monkey</span><br><span class="line">two: donkey monkey</span><br></pre></td></tr></table></figure></li><li><p>使用<code>+</code></p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">'donkey'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="string">'monkey'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"one: "</span> + str1 + <span class="string">","</span> + str2);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"two: "</span> + str1 + <span class="string">" "</span> + str2);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出结果： </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">one: donkey,monkey</span><br><span class="line">two: donkey monkey</span><br></pre></td></tr></table></figure></li></ol><h3 id="数值类型-Number型"><a href="#数值类型-Number型" class="headerlink" title="数值类型(Number型)"></a>数值类型(Number型)</h3><p><code>int</code>  必须是整型</p><p><code>double</code> 浮点型， 也可赋值整型,但会带上小数点</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">double</span> d = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"d: "</span> + <span class="string">"$d"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"i: "</span> + <span class="string">"$i"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d: 1.0</span><br><span class="line">i: 1</span><br></pre></td></tr></table></figure><p>注： 此处打印时使用<code>print(&quot;d: &quot; + d);</code> 会报类型错误</p><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>bool值只能为<code>true</code>或<code>false</code></p><h3 id="数组-集合类型-List"><a href="#数组-集合类型-List" class="headerlink" title="数组/集合类型 (List)"></a>数组/集合类型 (List)</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义List方式1</span></span><br><span class="line">    <span class="keyword">var</span> list = [<span class="string">"abc"</span>,<span class="string">"aaa"</span>,<span class="string">"ccc"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义List方式2</span></span><br><span class="line">    <span class="keyword">var</span> list2 = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">    list2.add(<span class="string">"nanana"</span>);</span><br><span class="line">    list2.add(<span class="string">"ninini"</span>);</span><br><span class="line">    list2.add(<span class="string">"nununu"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(list2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义指定类型的List</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> list3 = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();<span class="comment">// 只能添加String类型的元素</span></span><br><span class="line"></span><br><span class="line">    list3.add(<span class="string">"111"</span>);</span><br><span class="line">    list3.add(<span class="string">"222"</span>);</span><br><span class="line">    list3.add(<span class="string">"333"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(list3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[abc, aaa, ccc]</span><br><span class="line">[nanana, ninini, nununu]</span><br><span class="line">[111, 222, 333]</span><br></pre></td></tr></table></figure><h3 id="字典类型-Map"><a href="#字典类型-Map" class="headerlink" title="字典类型(Map)"></a>字典类型(Map)</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一种定义Map的方式</span></span><br><span class="line">    <span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">18</span></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(person);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(person[<span class="string">"name"</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(person[<span class="string">"age"</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种定义Map的方式</span></span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    p[<span class="string">"name"</span>] = <span class="string">"李四"</span>;</span><br><span class="line">    p[<span class="string">"age"</span>] = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(p);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(p[<span class="string">"name"</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(p[<span class="string">"age"</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;name: 张三, age: 18&#125;</span><br><span class="line">张三</span><br><span class="line">18</span><br><span class="line">&#123;name: 李四, age: 20&#125;</span><br><span class="line">李四</span><br><span class="line">20</span><br></pre></td></tr></table></figure><h3 id="数据类型的判断"><a href="#数据类型的判断" class="headerlink" title="数据类型的判断"></a>数据类型的判断</h3><p>使用关键词<code>is</code>判断数据类型</p><h2 id="运算符-与java一样-先跳过"><a href="#运算符-与java一样-先跳过" class="headerlink" title="运算符 (与java一样 先跳过)"></a>运算符 (与java一样 先跳过)</h2><h2 id="循环语句-与java一样-先跳过"><a href="#循环语句-与java一样-先跳过" class="headerlink" title="循环语句 (与java一样 先跳过)"></a>循环语句 (与java一样 先跳过)</h2><h2 id="集合-与java一样-先跳过"><a href="#集合-与java一样-先跳过" class="headerlink" title="集合 (与java一样 先跳过)"></a>集合 (与java一样 先跳过)</h2><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 方法名称(参数1,参数2,[可选参数1,可选参数2],....) &#123;</span><br><span class="line">    方法体</span><br><span class="line"></span><br><span class="line">    return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数内只能写一行代码</p><h2 id="Dart中类和对象"><a href="#Dart中类和对象" class="headerlink" title="Dart中类和对象"></a>Dart中类和对象</h2><p>Dart中没有<code>public</code> <code>private</code> <code>protected</code> 等修饰符,若要将属性或方法私有化可以使用<code>_</code></p><h1 id="Flutter环境配置"><a href="#Flutter环境配置" class="headerlink" title="Flutter环境配置"></a>Flutter环境配置</h1><h2 id="windows上搭建Flutter-Android运行环境"><a href="#windows上搭建Flutter-Android运行环境" class="headerlink" title="windows上搭建Flutter Android运行环境"></a>windows上搭建Flutter Android运行环境</h2><ol><li>安装配置JDK</li><li>安装Android Studio</li><li>下载配置Flutter SDK</li><li><p>配置Flutter镜像</p><p> <code>build.gradle</code>中將<code>google()</code> <code>jcenter()</code>注釋掉，換成阿里鏡像地址：</p>   <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maven&#123; url <span class="string">'https://maven.aliyun.com/repository/google'</span> &#125;</span><br><span class="line">maven&#123; url <span class="string">'https://maven.aliyun.com/repository/jcenter'</span> &#125;</span><br><span class="line">maven&#123;url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public'</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Flutter-V-1-9-1-2019年9月更新版"><a href="#Flutter-V-1-9-1-2019年9月更新版" class="headerlink" title="Flutter (V 1.9.1 2019年9月更新版)"></a>Flutter (V 1.9.1 2019年9月更新版)</h1><h2 id="跟随官网开始学-https-flutter-dev-docs-get-started-codelab"><a href="#跟随官网开始学-https-flutter-dev-docs-get-started-codelab" class="headerlink" title="跟随官网开始学(https://flutter.dev/docs/get-started/codelab)"></a>跟随官网开始学(<code>https://flutter.dev/docs/get-started/codelab</code>)</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>以下代码均为VsCode中完成，<strong>光标移动到终端</strong>后可执行一些快捷命令：</p><ul><li><p><code>r</code>/<code>R</code> 热部署项目</p></li><li><p><code>p</code> 显示网格</p></li><li><p><code>o</code> 切换平台(IOS/Android平台切换)</p></li><li><p><code>q</code> 退出</p></li></ul><h4 id="第一步-初始化Flutter-app"><a href="#第一步-初始化Flutter-app" class="headerlink" title="第一步 初始化Flutter app"></a>第一步 初始化Flutter app</h4><ol><li>导入<code>material.dart</code> UI库，material官网： <code>https://material.io/</code></li><li><p>书写入口方法并调用</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void main() =&gt; runApp(MyApp());</span><br></pre></td></tr></table></figure><ul><li><code>main()</code> 表示入口方法</li><li><code>=&gt;</code> 箭头函数，后面内容为一行时使用，一种语法糖</li><li><code>MyApp()</code> 自定义的方法</li></ul></li><li><p>声明自定义方法</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildcontext) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;This is for my note!&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(&apos;Demo Page&apos;),),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(&apos;Hello World&apos;),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>上述demo创建了一个<code>Material app</code>,<code>Material</code>是遵循移动端和网页端标准的一种视觉设计语言，官网为 <code>https://material.io/</code>，Flutter中提供了丰富的Material组件</p></li><li><p>自定义的<code>MyApp</code>必须继承<code>StatelessWidget</code>以将自己定义为组件，在Flutter中，万物皆组件，例如： <code>alignment</code>、<code>padding</code>、<code>layout</code></p></li><li><p><code>StatelessWidget</code>是抽象类，因此要重写<code>build</code>方法，重写需要加上<code>@override</code>注释,<code>build</code>方法中必须要有参数<code>BuildContext</code></p></li><li><p><code>Scaffold</code>是<code>Material</code>中的一个组件,提供了自定义<code>appbar</code>、<code>title</code>、<code>body</code>属性来维持<code>home</code>页面的组件树，<code>Scaffold</code>的子组件可以很复杂，用于构建所需界面</p></li><li><p>一个组件的主要方法就是提供<code>build()</code>方法来将其它或者更低级的组件封装来定义界面显示</p></li><li><p>上述demo中的<code>body</code>是由<code>Center</code>组件和其子组件<code>Text</code>组成的，<code>Center</code>组件表示将其子组件设置为居中屏幕对齐</p></li></ul></li></ol><h4 id="第二步-引用外部包"><a href="#第二步-引用外部包" class="headerlink" title="第二步 引用外部包"></a>第二步 引用外部包</h4><p>此步骤中，使用一个外部开源包<code>english_words</code>,此包中含有常用英语以及一些实用短语。</p><p><code>english_words</code>包以及其它开源包可在<code>https://pub.dev/</code>中获取</p><ol><li><p><code>pubspec</code>文件负责管理Flutter APP中的依赖和assets。打开项目根目录下的<code>pubspec.yaml</code>文件，将<code>english_words</code>及其版本添加到依赖列表中：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">name: flutter_app</span><br><span class="line">description: A new Flutter application.</span><br><span class="line"></span><br><span class="line">environment:</span><br><span class="line">  sdk: &quot;&gt;=2.1.0 &lt;3.0.0&quot;</span><br><span class="line"></span><br><span class="line">dependencies:</span><br><span class="line">  flutter:</span><br><span class="line">    sdk: flutter</span><br><span class="line">  cupertino_icons: ^0.1.2</span><br><span class="line">  # 此处添加依赖</span><br><span class="line">  english_words: ^3.1.5</span><br><span class="line"></span><br><span class="line">dev_dependencies:</span><br><span class="line">  flutter_test:</span><br><span class="line">    sdk: flutter</span><br></pre></td></tr></table></figure></li><li><p>依赖添加完成后，VSCode会自动导包，并在根目录下的<code>pubspec.lock</code>文件中自动生成对应外部包的相关信息。如果使用的是<code>Android Studio</code>则需要点击<code>Packages get</code>进行导包，无论使用哪种，只要控制台出现了<code>Running &quot;flutter pub get&quot; in 项目名...</code>就表示已将外部包成功导入项目中</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">english_words:</span><br><span class="line">dependency: &quot;direct main&quot;</span><br><span class="line">description:</span><br><span class="line">  name: english_words</span><br><span class="line">  url: &quot;https://pub.dartlang.org&quot;</span><br><span class="line">source: hosted</span><br><span class="line">version: &quot;3.1.5&quot;</span><br></pre></td></tr></table></figure></li><li><p>在<code>lib/main.dart</code>文件中引入</p><p> <img src="../../../../data/img/flutter/flutter_importPackage.png" alt="flutter引入外包"></p><p> 引入时编辑器会提示此包还未使用、</p></li><li><p>使用<code>english_words</code>生成文字代替上述demo中的<code>Hello World</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">import &apos;package:english_words/english_words.dart&apos;;// 导包</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildcontext) &#123;</span><br><span class="line">    // 注入</span><br><span class="line">    final wordPair = WordPair.random();</span><br><span class="line"></span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;This is for my note!&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(&apos;Demo Page&apos;),),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(wordPair.asPascalCase),// 使用</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 注： <code>wordPair.asPascalCase</code>中<code>PascalCase</code>表示将每个单词的首字母大写，如将<code>helloworld</code>写成<code>HelloWorld</code></p></li><li><p>上述代码每热部署(Android Studio快捷键<code>ctrl+s</code>; VScode在终端键入<code>r</code>)一次,界面就会随机显示不同的词语。因为该词语是在<code>build</code>方法中生成的，每启动一次项目或切换平台时，MaterialApp就会重新进行渲染。</p></li></ol><h4 id="第三步-添加一个有状态的组件"><a href="#第三步-添加一个有状态的组件" class="headerlink" title="第三步 添加一个有状态的组件"></a>第三步 添加一个有状态的组件</h4><p><code>Stateless</code>组件是不可变的，即其所有属性都无法改变——所有值都为final。</p><p><code>Stateful</code>组件的状态在组件的生命周期内可变化。实现一个有状态的组件至少需要两个类</p><p>  1) <code>StatefulWidget</code>类<br>  2) <code>State</code>类</p><p>创建一个<code>State</code>类的对象<code>StatefulWidget</code></p><p><code>StatefulWidget</code>类本身是不可变的，但<code>State</code>类在组件的生命周期中会一直存在</p><p>在此步骤中，会添加一个有状态的组件<code>RandomWords</code>继承新创建父类<code>RandomWordsState</code>，然后就能在无状态组件<code>MyApp</code>中作为<code>child</code>来使用<code>RandomWords</code>了。</p><ol><li><p>在<code>main.dart</code>中创建有状态类<code>RandomWordsState</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class RandomWordsState extends State&lt;RandomWords&gt; &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>State&lt;RandomWords&gt;</code>表示声明一个泛型为<code>RandomWords</code>的通用类<code>State</code>。App中大多数的逻辑和状态都存在这，这里表示状态为<code>RandomWords</code>的组件。这个类将保存随着用户滚动而无限增长的生成的单词对， 以及喜欢的单词对，用户通过重复点击心形 ❤️ 图标来将它们从列表中添加或删除。(<strong>啥玩意儿？没懂</strong>)</p><p> <code>RandomWordsState</code>依赖于<code>RandomWords</code>类</p></li><li><p>在<code>main.dart</code>中添加有状态的<code>RandomWords</code>组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class RandomWords extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  RandomWordsState createState() =&gt; RandomWordsState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加完成后，编辑器会提示<code>RandomWordsState</code>缺少<code>build</code>方法,接下来就是通过将<code>MyApp</code>中的代码移动到<code>RandomWordsState</code>中，为<code>RandomWordsState</code>添加<code>build</code>方法。</p></li><li><p>在<code>RandomWordsState</code>中添加<code>build</code>方法</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class RandomWordsState extends State&lt;RandomWords&gt; &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildContext) &#123;</span><br><span class="line">    final wordPair = WordPair.random();</span><br><span class="line"></span><br><span class="line">    return Text(wordPair.asPascalCase);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改MyApp中生成随机文字部分的代码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildcontext) &#123;</span><br><span class="line"></span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;This is for my note!&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(&apos;Demo Page&apos;),),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: RandomWords(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启App。</p></li></ol><h4 id="第四步-创建无限滚动的ListView"><a href="#第四步-创建无限滚动的ListView" class="headerlink" title="第四步 创建无限滚动的ListView"></a>第四步 创建无限滚动的ListView</h4><p>在此步骤中，你将<code>RandomWordsState</code>扩展成展示词语的列表。用户滚动屏幕，该列表将无限展示词语。</p><p><code>ListView</code>的<code>builder</code>构造函数工厂可以根据需求快速创建列表。</p><ol><li><p>在<code>RandomWordsState</code>中创建一个<code>_suggestions</code>列表来保存推荐的成语。同时创建一个<code>_biggerFont</code>变量来使字体变大。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class RandomWordsState extends State&lt;RandomWords&gt; &#123;</span><br><span class="line">  final _suggestions = &lt;WordPair&gt;[];</span><br><span class="line">  final _biggerFont = const TextStyle(fontSize: 18);</span><br><span class="line">  </span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildContext) &#123;</span><br><span class="line">    final wordPair = WordPair.random();</span><br><span class="line"></span><br><span class="line">    return Text(wordPair.asPascalCase);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 注： 在Dart语法中，前缀用<code>_</code>表示私有</p><p> 接下来为<code>RandomWordsState</code>类添加方法<code>_buildSuggestions()</code>，此方法用于创建显示推荐的词语。</p><p> <code>ListView</code>类中提供了属性<code>itemBuilder</code>,这是一个工厂匿名回调函数，含有两个参数： <code>BuildContext</code>和迭代器<code>i</code>。迭代器从0开始递增，每生成推荐的一次单词对就会自增两次，一次用于<code>ListTile</code>,一次用于<code>Divider</code>。此模式能随着用户的滚动无限出现单词对。</p></li><li><p>在<code>RandomWordsState</code>类中添加<code>_buildSuggestions()</code>方法</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Widget _buildSuggestions() &#123;</span><br><span class="line">  return ListView.builder(</span><br><span class="line">    padding: const EdgeInsets.all(16),</span><br><span class="line">    itemBuilder: (context, i ) &#123;</span><br><span class="line">      if(i.isOdd) return Divider();</span><br><span class="line"></span><br><span class="line">      final index = i ~/ 2;</span><br><span class="line">      if(index &gt;= _suggestions.length) &#123;</span><br><span class="line">        _suggestions.addAll(generateWordPairs().take(10));</span><br><span class="line">      &#125;</span><br><span class="line">      return _buildRow(_suggestions[index]);</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>itemBuilder</code>每产生一对单词对就会被回调一次，并将每对单词对放入<code>ListTile</code>行中。偶数行添加<code>ListTile</code>行；奇数行添加<code>Divider</code>组件将每对单词分开。需要注意的是，<code>Divider</code>在小屏上看起来可能不太明显</p></li><li><p><code>if(i.isOdd) return Divider();</code>表示在<code>ListView</code>的每一行之前加上1像素的分割线</p></li><li><p><code>final index = i ~/ 2;</code>表达式<code>~/</code>表示取<code>i/2</code>结果的整型，向下取整。例如：i为1,2,3,4,5时，得到的结果分别为0,1,1,2,2。此处用于计算<code>ListView</code>中减去分割线后实际的单词对数量。</p></li><li><p>如果是建议列表中最后一个单词对，接着再生成10个单词对，然后添加到建议列表。</p><p><code>_buildSuggestions()</code>方法每生成一对单词对就会调用一次<code>_buildRow</code>。<code>_buildRow</code>用于在<code>ListTile</code>中显示新的单词对以使下一步中每行看起来更漂亮</p></li></ul></li><li><p>在<code>RandomWordsState</code>中添加<code>_buildRow</code>方法</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  Widget _buildRow(WordPair wordPair) &#123;</span><br><span class="line">  return ListTile(</span><br><span class="line">    title: Text(</span><br><span class="line">      wordPair.asPascalCase,</span><br><span class="line">      style: _biggerFont,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更新<code>RandomWordsState</code>类中的<code>build</code>方法，使用<code>_buildSuggestions()</code>代替直接调用单词生成库。脚手架(Scaffold)实现了基本的<code>Material</code>设计视觉布局。将<code>body</code>中的内容改成：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">Widget build(BuildContext buildContext) &#123;</span><br><span class="line">  return Scaffold(</span><br><span class="line">    appBar: AppBar(title: Text(&apos;Infinity scroll word pairs&apos;)),</span><br><span class="line">    body: _buildSuggestions(),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>更新<code>MyApp</code>类中<code>build</code>方法，修改<code>title</code>并将<code>home</code>改成<code>RandomWords</code>组件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildcontext) &#123;</span><br><span class="line"></span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Startup Name Generator&apos;,</span><br><span class="line">      home: RandomWords(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启项目即可查看结果</p></li></ol><h2 id="Flutter内置组件"><a href="#Flutter内置组件" class="headerlink" title="Flutter内置组件"></a>Flutter内置组件</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>MaterialAPP组件作为根组件，具有<code>home</code>属性，<code>home</code>属性调用<code>Scaffold</code>组件</p><p>实例化类时，关键字<code>new</code>可以省略。</p><h3 id="Scaffold组件"><a href="#Scaffold组件" class="headerlink" title="Scaffold组件"></a>Scaffold组件</h3><ul><li><p><code>appBar</code></p><p>顶部导航栏</p></li><li><p><code>body</code></p><p>页面内容</p></li></ul><ul><li><p><code>bottomNavigationBar</code></p><p>底部导航栏</p></li><li><p><code>floatingActionButton</code></p><p>右下角浮动按钮</p></li><li><p><code>drawer</code> 、 <code>endDrawer</code></p><p><code>drawer</code>左侧侧边栏 <code>endDrawer</code></p><p>值类型为<code>Drawer</code>,详见<code>Drawer</code>组件</p></li></ul><h3 id="Text组件"><a href="#Text组件" class="headerlink" title="Text组件"></a>Text组件</h3><p>属性写在<code>Text()</code>中，内容为必填，还有很多可选参数。例如<code>style</code>用来设置文本的样式，值需要使用内置组件<code>TextStyle</code>，<code>TextStyle</code>中可以设置字体大小、颜色等文字相关样式</p><p>Flutter中的文本都不能直接写，必须使用Text进行封装</p><ul><li><p><code>textAlign</code>(文本对齐方式)</p><ul><li><p><code>TextAlign.center</code> 居中</p></li><li><p><code>TextAlign.left</code> 左对齐</p></li><li><p><code>TextAlign.right</code> 右对齐</p></li><li><p><code>TextAlign.justify</code> 两端对齐</p></li></ul></li><li><p><code>textDirection</code> (文本方向)</p><ul><li><p><code>TextDirection.ltr</code> 从左到右</p></li><li><p><code>TextDirection.rtl</code> 从右到左</p></li></ul></li><li><p><code>overflow</code> 文本溢出后的处理方式</p><ul><li><p><code>TextOverflow.ellipsis</code> 溢出部分用<code>...</code>代替</p></li><li><p><code>TextOverflow.fade</code> 文字溢出，从上往下为渐变效果</p></li><li><p><code>TextOverflow.clip</code> 溢出部分裁剪(默认)</p></li></ul></li><li><p><code>textScaleFactor</code> 字体显示倍率</p><p>相对于谁的倍率？父元素？</p></li><li><p><code>maxLines</code> 文字最大显示行数</p></li><li><p><code>style</code> 字体样式设置</p><p>值需要用<code>TextStyle</code>进行封装，可设置字体样式</p><ul><li><p><code>decoration</code> 文字装饰线</p><ul><li><p><code>TextDecoration.overline</code> 上划线</p></li><li><p><code>TextDecoration.lineThrough</code> 中划线(删除线)</p></li><li><p><code>TextDecoration.underline</code> 下划线</p></li><li><p><code>TextDecoration.none</code> 无装饰(默认)</p></li></ul></li><li><p><code>decorationColor</code> 文字装饰线颜色</p></li><li><p><code>decorationStyle</code> 文字装饰线样式</p></li><li><p><code>decorationThickness</code> 文字装饰线粗细</p></li><li><p><code>color</code> 字体颜色</p></li><li><p><code>backgroundColor</code>(文字填充色)</p></li><li><p><code>fontSize</code> (字体大小)</p><p>默认为14像素，若设置了字体显示倍率<code>textScaleFactor</code>,则渲染出来的字体大小 = <code>fontSize</code> * <code>textScaleFactor</code></p></li><li><p><code>fontWeight</code>(字体粗细)</p><ul><li><p><code>FontWeight.bold</code> 加粗 (w700)</p></li><li><p><code>FontWeight.normal</code> 正常(默认 w400)</p></li><li><p><code>FontWeight.wxxx</code> <code>xxx</code>为自定义加粗数值</p></li></ul></li><li><p><code>fontStyle</code> (字体样式是否倾斜)</p><ul><li><code>FontStyle.italic</code> 字体倾斜</li></ul></li><li><p><code>letterSpacing</code> (字间距，常用于中文字体)</p></li><li><p><code>wordSpacing</code> (单词间距)</p></li></ul></li></ul><hr><p>  以下以后慢慢研究</p><ul><li><code>textBaseline</code></li><li><code>height</code></li><li><code>locale</code></li><li><code>foreground</code></li><li><code>background</code></li><li><code>shadows</code></li><li><code>fontFeatures</code> </li><li><code>debugLabel</code></li><li><code>fontFamily</code></li><li><code>fontFamilyFallback</code></li><li><code>package</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &apos;package:flutter/material.dart&apos;; // 引入material.io的UI包</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildContext) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Welcome to flutter&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(&apos;Welcome to Flutter for bar &apos;)</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(</span><br><span class="line">            &apos;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sunt corrupti reprehenderit aliquid harum, perspiciatis aliquam omnis?&apos;,// 文本内容</span><br><span class="line">            textAlign: TextAlign.left,// 文字对齐样式</span><br><span class="line">            maxLines: 1,//最大显示行</span><br><span class="line">            // overflow: TextOverflow.ellipsis,// 文字溢出使用...代替</span><br><span class="line">            overflow: TextOverflow.fade, // 文字溢出，从上往下为渐变效果</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Container组件-容器组件"><a href="#Container组件-容器组件" class="headerlink" title="Container组件/容器组件"></a>Container组件/容器组件</h3><p>作用类似于<code>div</code></p><p>常用属性(键值对)：</p><ul><li><p><code>width</code> 、 <code>height</code></p><p>宽度和高度，此宽高将<code>padding</code>的值包含在内,相当于CSS中的填充盒宽高</p><p>不设置宽高时，<code>Container</code>会自动充满屏幕</p><p><strong>宽高的取值类型定义为了<code>double</code>，好几个视频老师强调如果是整数也需要写成浮点型，但实际写成<code>int</code>型也能执行，有可能是版本更新的原因，暂不深究</strong></p></li><li><p><code>alignment</code>(<strong>内容</strong>对齐方式)</p><p><code>alignment: Alignment.topLeft</code>值为<code>Alignment</code>类型，取值一般为以下</p><ul><li><p><code>Alignment.topLeft</code> 上部靠左对齐</p></li><li><p><code>Alignment.topCenter</code> 上部居中对齐</p></li><li><p><code>Alignment.topRight</code> 上部靠右对齐</p></li><li><p><code>Alignment.center</code> 居中对齐</p></li><li><p><code>Alignment.bottomLeft</code> 下部靠左对齐</p></li><li><p><code>Alignment.bottomCenter</code> 下部居中对齐</p></li><li><p><code>Alignment.bottomRight</code> 下部靠右对齐</p></li></ul></li><li><p><code>padding</code> (内边距)</p><p>默认值为0,类型为<code>EdgeInsets</code></p><ul><li><p><code>EdgeInsets.all(10)</code>  上下左右内边距均为10</p></li><li><p><code>EdgeInsets.fromLTRB(left, top, right, bottom)</code> 左上右下分别设置内边距</p></li></ul></li><li><p><code>margin</code>(外边距)</p><p>基本用法参见<code>padding</code></p></li><li><p><code>color</code> (背景填充色)</p><p><code>color: Colors.pink</code> </p><ul><li><p>此背景色填充范围涵盖<code>padding</code>,相当于CSS中的填充盒</p></li><li><p>取值为<code>Color</code>类</p><ul><li><p><code>Colors.内置颜色单词</code> 框架内置颜色</p></li><li><p><code>Color.fromARGB(a, r, g, b)</code> a、r、g、b分别表示透明度、红、绿、蓝，类型均为<code>int</code></p></li><li><p><code>Color.fromRGBO(r, g, b, opacity)</code> opacity表示透明度，类型为<code>double</code>,其他均为<code>int</code></p></li></ul></li></ul><p><code>color</code>实际上是<code>BoxDecoration(color: color)</code>的简写，因此设置了这里的颜色就不能设置<code>decoration</code>中的任意<code>color</code>(例如<code>border</code>中的颜色),否则执行会报错: <code>Cannot provide both a color and a decoration</code></p></li><li><p><code>decoration</code> (边框及背景颜色)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">decoration: BoxDecoration(</span><br><span class="line">  color: Colors.pink,</span><br><span class="line">  border: Border.all(</span><br><span class="line">    color: Colors.blue,</span><br><span class="line">    width: 20</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>decoration</code>取值为<code>BoxDecoration</code>类，可以设置边框样式及背景填充色</p><p><code>decoration</code>也可设置背景色为渐变，写法如下： </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">body: Center(</span><br><span class="line">  child: Container(</span><br><span class="line">    child: new Text(&apos;Flutter盒模型&apos;, style: TextStyle(fontSize: 40.0)),</span><br><span class="line">    alignment: Alignment.topRight,</span><br><span class="line">    width: 300,</span><br><span class="line">    height: 300,</span><br><span class="line">    // color: Colors.pink,</span><br><span class="line">    padding: const EdgeInsets.fromLTRB(10, 20, 30, 40),</span><br><span class="line">    margin: const EdgeInsets.all(10),</span><br><span class="line">    decoration: new BoxDecoration(</span><br><span class="line">      gradient: const LinearGradient(</span><br><span class="line">        colors: [Colors.pink,Colors.purple,Colors.white]</span><br><span class="line">      ),</span><br><span class="line">      border: Border.all(width: 6,color: Colors.lightBlue)</span><br><span class="line">    ),</span><br><span class="line">  </span><br><span class="line">  )</span><br><span class="line">),</span><br></pre></td></tr></table></figure></li><li><p><code>foregroundDecoration</code> (暂不研究)</p></li><li><p><code>constraints</code>(暂不研究)</p></li><li><p><code>transform</code>(旋转Container)</p><p>类似CSS3中的<code>transform</code>属性，待深究</p></li><li><p><code>child</code> (子元素) <strong>此部分待考究，先往下学</strong></p><p><code>Container</code>的子元素(大概要称为子组件？)</p><p>不设置<code>child</code>和<code>constraints</code>时，内容会自动撑满可用空间。</p><ul><li><p>若未设置宽高值，可用空间为整个父类；</p></li><li><p>若设置了宽高且未设置<code>constraints</code>时，可用空间为所设置的范围内</p></li><li><p>若只设置宽或高，不设置<code>constraints</code>时，未设置的那部分会自动撑满</p></li></ul></li></ul><h3 id="image-图片组件"><a href="#image-图片组件" class="headerlink" title="image(图片组件)"></a>image(图片组件)</h3><p>为图片添加滤镜(图片混合模式)</p><ul><li><p><code>Image.network</code> 添加网络图片</p><ul><li><p><code>src</code> 直接填写，不用封装成字典形式，除<code>src</code>可以直接填写以外，其他属性都要使用字典样式</p></li><li><p><code>alignment</code> 图片对齐方式</p></li><li><p><code>color</code> <code>colorBlendMode</code> 联合使用 用于将图片和背景色混合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">child: new Image.network(</span><br><span class="line">  &apos;https://w.wallhaven.cc/full/dg/wallhaven-dgv8qo.png&apos;,</span><br><span class="line">  color: Colors.greenAccent,</span><br><span class="line">  colorBlendMode: BlendMode.darken,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p><code>fit</code> </p><p>控制图片在容器中显示的效果(拉伸、 挤压等),使用<code>BoxFit</code>类封装</p><ul><li><p><code>BoxFit.fill</code> 充满父容器</p></li><li><p><code>BoxFit.fitHeight</code> 高度方向拉伸充满父容器</p></li><li><p><code>BoxFit.fitWidth</code> 宽度方向拉伸充满父容器</p></li><li><p><code>BoxFit.contain</code> 全图显示，保持原比例，可能会有空隙</p></li><li><p><code>BoxFit.cover</code> 充满父容器且保持原比例，可能会有部分内容被裁切</p></li></ul></li><li><p><code>repeat</code> </p><p>图片在容器中的平铺效果，默认只显示一张图片</p><ul><li><p><code>ImageRepeat.repeatY</code> Y方向平铺</p></li><li><p><code>ImageRepeat.repeatX</code> X方向平铺</p></li></ul></li></ul></li></ul><h4 id="圆角图片实现的两种方式"><a href="#圆角图片实现的两种方式" class="headerlink" title="圆角图片实现的两种方式"></a>圆角图片实现的两种方式</h4><ol><li><p>使用<code>Container</code>的圆角属性<code>borderRadius</code>和 <code>image</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(&apos;I am learning Container&apos;)),</span><br><span class="line">        body: Container(</span><br><span class="line">          width: 300,</span><br><span class="line">          height: 300,</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            color: Colors.pinkAccent,</span><br><span class="line">            borderRadius: BorderRadius.circular(150),// 指定弧度为宽高的一半就能变成圆形</span><br><span class="line">            image: DecorationImage(</span><br><span class="line">              image: NetworkImage(&apos;https://w.wallhaven.cc/full/vm/wallhaven-vmg8r3.jpg&apos;),</span><br><span class="line">              fit: BoxFit.cover</span><br><span class="line">            )</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      theme: ThemeData(primaryColor: Colors.lime),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>ClipOval</code>组件</p><p><code>ClipOval</code>会自动子图片设置弧度，若要设置圆形的图片，需要设置图片的宽高的<code>fit</code>属性，以保证每一张图片都为圆形</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(&apos;I am learning Container&apos;)),</span><br><span class="line">        body: Container(</span><br><span class="line">          child: ClipOval(</span><br><span class="line">            child: Image.network(&apos;https://w.wallhaven.cc/full/42/wallhaven-4277l6.jpg&apos;,</span><br><span class="line">              height: 100,</span><br><span class="line">              width: 100,</span><br><span class="line">              fit: BoxFit.cover</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      theme: ThemeData(primaryColor: Colors.lime),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="引入本地图片"><a href="#引入本地图片" class="headerlink" title="引入本地图片"></a>引入本地图片</h4><p>一般建议存放图标等内容</p><ol><li><p>在根目录中新建文件夹<code>images</code>,在<code>images</code>下创建子文件夹<code>2.0x</code>、<code>3.0x</code>、<code>4.0x</code>… 官网要求必须有<code>2.0x</code>和<code>3.0x</code></p></li><li><p>将图片复制到上面新建的每一个子文件夹中</p><p><strong>Flutter项目运行在手机上时会根据不同屏幕的分辨率加载不同文件夹下对应的图片，因此必须按照上述步骤配置多个文件夹</strong></p></li><li><p>在<code>pubspec.yaml</code>文件中的<code>assets</code>配置图片路径</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assets:</span><br><span class="line">  - images/a_dot_burr.jpeg</span><br><span class="line">  - images/a_dot_ham.jpeg</span><br></pre></td></tr></table></figure></li><li><p>引入本地图片时使用<code>Image.asset</code>来设置图片地址，其他属性设置与<code>Image.network</code>相同</p></li></ol><p><strong>更正：本地图片的文件夹不需要按照步骤1、2中所说的方式定死，只要在<code>pubspec.yaml</code>文件中配置好自定义的文件简爱就可以了，上述步骤可能是老版本限制</strong></p><h3 id="列表组件-ListView"><a href="#列表组件-ListView" class="headerlink" title="列表组件 ListView"></a>列表组件 ListView</h3><p>可用于新闻列表。Fluter中提供了五种常见的列表：垂直列表、垂直图文列表、水平列表、动态列表、矩阵式列表</p><h4 id="列表组件中的参数"><a href="#列表组件中的参数" class="headerlink" title="列表组件中的参数"></a>列表组件中的参数</h4><ul><li><p><code>children</code></p><p>列表中的元素，使用<code>&lt;Widget&gt;[]</code>封装，<code>&lt;Widget&gt;[]</code>中可以添加任何组件，如<code>Container()</code> <code>Image.network(src)</code>等,但一般都是配合<code>ListTile</code>组件使用</p><ul><li><p><code>ListTile</code>参数</p><p>官方文档： <code>A single fixed-height row that typically contains some text as well as a leading or trailing icon.</code></p><ul><li><p><code>title</code> 标题</p></li><li><p><code>subtitle</code> 二级标题</p></li><li><p><code>leading</code> 列表前图标： <code>Icon(Icons.内置图标名)</code>； <code>Icon()</code>中还可以设置其他属性，如图标大小、颜色等，可以以后研究</p></li><li><p><code>trailing</code> 列表末尾图标，设置同<code>leading</code></p></li></ul><p><strong><code>leading</code>和<code>trailing</code>还可以使用<code>Image.asset()</code>设置图片</strong></p></li></ul></li><li><p><code>padding</code> 列表整体的内边距</p></li><li><p><code>scrollDirection</code> 列表方向</p><p>默认为垂直列表，将<code>scrollDirection</code>设置成为<code>Axis.horizontal</code>时，变为水平列表但此处有坑，当<code>children</code>为<code>ListTile</code>时，无法设置<code>ListTile</code>的宽度，此时若设置成为水平列表则会报错 <code>BoxConstraints forces an infinite width</code>。</p><p>水平列表无法使用<code>ListTile</code>??需要研究下<code>ListTile</code>是个啥</p></li></ul><h4 id="动态列表"><a href="#动态列表" class="headerlink" title="动态列表"></a>动态列表</h4><ol><li><p>通过循环语句实现动态列表</p><ul><li><p>在同一类中直接获取数组</p><ul><li><p>自定义一个私有方法返回一个数组，返回类型必须为<code>List&lt;Widget&gt;</code></p></li><li><p>调用自定义方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line"></span><br><span class="line">  List&lt;Widget&gt; _getData() &#123;</span><br><span class="line">    List&lt;Widget&gt; list = new List();</span><br><span class="line"></span><br><span class="line">    for(var i=0; i&lt;20; i++) &#123;</span><br><span class="line">      list.add(ListTile(title: Text(&apos;这是第$i个列表&apos;)));</span><br><span class="line">    &#125;</span><br><span class="line">    return list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(&apos;I am learning Container&apos;)),</span><br><span class="line">        body: Container(</span><br><span class="line">          child: ListView(</span><br><span class="line">              children: _getData()</span><br><span class="line">            ),</span><br><span class="line">        ) </span><br><span class="line">      ),</span><br><span class="line">      theme: ThemeData(primaryColor: Colors.lime),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>导入外部文件中的数据</p><p>假设有外部数据文件<code>data/list.dart</code>如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">List listData = [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;title&quot;: &quot;myhome&quot;,</span><br><span class="line">                      &quot;author&quot;: &quot;lalaby&quot;,</span><br><span class="line">                      &quot;imageUrl&quot;: &quot;https://w.wallhaven.cc/full/nk/wallhaven-nk1gkd.jpg&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;title&quot;: &quot;work&quot;,</span><br><span class="line">                      &quot;author&quot;: &quot;nino&quot;,</span><br><span class="line">                      &quot;imageUrl&quot;: &quot;https://w.wallhaven.cc/full/vm/wallhaven-vmg8r3.jpg&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;title&quot;: &quot;ala&quot;,</span><br><span class="line">                      &quot;author&quot;: &quot;kiyo&quot;,</span><br><span class="line">                      &quot;imageUrl&quot;: &quot;https://w.wallhaven.cc/full/47/wallhaven-47kkd3.jpg&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;title&quot;: &quot;olo&quot;,</span><br><span class="line">                      &quot;author&quot;: &quot;mizu&quot;,</span><br><span class="line">                      &quot;imageUrl&quot;: &quot;https://w.wallhaven.cc/full/42/wallhaven-4277l6.jpg&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;title&quot;: &quot;yojo&quot;,</span><br><span class="line">                      &quot;author&quot;: &quot;yama&quot;,</span><br><span class="line">                      &quot;imageUrl&quot;: &quot;https://w.wallhaven.cc/full/4x/wallhaven-4x93gv.png&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;title&quot;: &quot;yolo&quot;,</span><br><span class="line">                      &quot;author&quot;: &quot;sla&quot;,</span><br><span class="line">                      &quot;imageUrl&quot;: &quot;https://w.wallhaven.cc/full/4v/wallhaven-4vo7vl.jpg&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                  ];</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>- 导入文件数据`import &apos;./data/list.dart&apos;;`- 遍历数据并将结果转成`List`  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Widget&gt; _getData() &#123;</span><br><span class="line">  var tempList = listData.map((value) &#123;</span><br><span class="line">    return ListTile(</span><br><span class="line">      title: Text(value[&quot;title&quot;]),</span><br><span class="line">      subtitle: Text(value[&quot;author&quot;]),</span><br><span class="line">      leading: Image.network(value[&quot;imageUrl&quot;]),</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return tempList.toList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 调用私有方法`_getData()`</code></pre><ol start="2"><li><p>利用<code>ListView</code>提供的<code>builder()</code>方法来实现动态列表</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(&apos;I am learning Container&apos;)),</span><br><span class="line">        body: Component(), </span><br><span class="line">      ),</span><br><span class="line">      theme: ThemeData(primaryColor: Colors.lime),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Component extends StatelessWidget &#123;</span><br><span class="line">  List list = new List();</span><br><span class="line">  Component() &#123;    </span><br><span class="line">    for(var i=0; i&lt;20; i++) &#123;</span><br><span class="line">      list.add(Text(&apos;这是第$i个列表&apos;));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildContext) &#123;</span><br><span class="line">    return ListView.builder(</span><br><span class="line">      itemCount: list.length,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        return ListTile(</span><br><span class="line">          title: list[index],</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="GridView组件"><a href="#GridView组件" class="headerlink" title="GridView组件"></a>GridView组件</h3><p>网格布局，可用于实现商品列表。</p><p>常用两种方式实现网格布局： </p><ol><li><p>通过<code>GridView.count</code>实现</p></li><li><p>通过<code>GridView.builder</code>实现</p></li></ol><h4 id="GridView常用属性"><a href="#GridView常用属性" class="headerlink" title="GridView常用属性"></a>GridView常用属性</h4><ul><li><p><code>children</code></p><p>子元素列表，使用<code>&lt;Widget&gt;[]</code>封装</p></li><li><p><code>crossAxisCount</code> </p><p>一行中Widget的数量</p></li><li><p><code>mainAxisSpacing</code></p><p>子Widget之间垂直距离</p></li><li><p><code>crossAxisSpacing</code></p><p>子Widget之间水平距离</p></li><li><p><code>childAspectRatio</code></p><p>子Widget宽高比,通过调整宽高比来控制子组件的高度，直接设置子组件的高度是无效的</p></li></ul><h4 id="通过GridView-count实现网格布局"><a href="#通过GridView-count实现网格布局" class="headerlink" title="通过GridView.count实现网格布局"></a>通过<code>GridView.count</code>实现网格布局</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildContext)  &#123;</span><br><span class="line"></span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;listView&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(&apos;Change Your Mind&apos;), backgroundColor: Colors.transparent),</span><br><span class="line">        body: GridView.count(</span><br><span class="line">                crossAxisCount: 3,</span><br><span class="line">                mainAxisSpacing: 2,</span><br><span class="line">                crossAxisSpacing: 2,</span><br><span class="line">                childAspectRatio: 0.7,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Image.network(&apos;https://w.wallhaven.cc/full/nk/wallhaven-nk1gkd.jpg&apos;,fit: BoxFit.cover),</span><br><span class="line">                  Image.network(&apos;https://w.wallhaven.cc/full/vm/wallhaven-vmg8r3.jpg&apos;,fit: BoxFit.cover),</span><br><span class="line">                  Image.network(&apos;https://w.wallhaven.cc/full/47/wallhaven-47kkd3.jpg&apos;,fit: BoxFit.cover),</span><br><span class="line">                  Image.network(&apos;https://w.wallhaven.cc/full/42/wallhaven-4277l6.jpg&apos;,fit: BoxFit.cover),</span><br><span class="line">                  Image.network(&apos;https://w.wallhaven.cc/full/4x/wallhaven-4x93gv.png&apos;,fit: BoxFit.cover),</span><br><span class="line">                  Image.network(&apos;https://w.wallhaven.cc/full/4v/wallhaven-4vo7vl.jpg&apos;,fit: BoxFit.cover)</span><br><span class="line">                ],</span><br><span class="line">              )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>使用动态数据：</p><ul><li><p>处理动态数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  import &apos;data/list.dart&apos;;</span><br><span class="line"></span><br><span class="line">  List&lt;Widget&gt; _getData() &#123;</span><br><span class="line">  var tempList = listData.map((value) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Image.network(value[&quot;imageUrl&quot;],fit: BoxFit.cover,),</span><br><span class="line">          Text(value[&quot;title&quot;])</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return tempList.toList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用数据渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(&apos;I am learning Container&apos;)),</span><br><span class="line">        body: Component(), </span><br><span class="line">      ),</span><br><span class="line">      theme: ThemeData(primaryColor: Colors.lime),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Component extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildContext) &#123;</span><br><span class="line">    return GridView.count(</span><br><span class="line">      crossAxisCount: 3,</span><br><span class="line">      mainAxisSpacing: 1,</span><br><span class="line">      crossAxisSpacing: 2,</span><br><span class="line">      children: _getData(),</span><br><span class="line">    );    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="通过GridView-builder实现网格布局"><a href="#通过GridView-builder实现网格布局" class="headerlink" title="通过GridView.builder实现网格布局"></a>通过<code>GridView.builder</code>实现网格布局</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Component extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildContext) &#123;</span><br><span class="line">    return GridView.builder(</span><br><span class="line">      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">        crossAxisCount: 3</span><br><span class="line">      ),</span><br><span class="line">      itemCount: listData.length,</span><br><span class="line">      itemBuilder: _getData</span><br><span class="line">    );    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _getData(context, index) &#123;</span><br><span class="line">    var value = listData[index];</span><br><span class="line">    return Container(</span><br><span class="line">        child: Column(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Image.network(value[&quot;imageUrl&quot;],fit: BoxFit.cover,),</span><br><span class="line">            Text(value[&quot;title&quot;])</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>GridView.builder</code>注意事项：</p><ul><li><p><code>itemCount</code>表示需要处理的数据的长度</p></li><li><p><code>itemBuilder</code>表示处理数据的方法，需要传入<code>context</code>和<code>index</code>两个参数</p></li><li><p><code>gridDelegate</code> 用来控制每行显示的组件个数及组件之间横向纵向距离以及宽高比等，使用<code>SliverGridDelegateWithFixedCrossAxisCount</code>封装</p></li><li><p><code>gridDelegate</code>为必填项，若为空，运行时会报错30486<code>The following assertion was thrown building Component(dirty): &#39;package:flutter/src/widgets/scroll_view.dart&#39;: Failed assertion: line 1491 pos 15: &#39;gridDelegate != null&#39;: is not true.</code></p></li></ul><h3 id="常见的页面布局组件-padding-Row-Column-Expanded"><a href="#常见的页面布局组件-padding-Row-Column-Expanded" class="headerlink" title="常见的页面布局组件 (padding Row Column Expanded)"></a>常见的页面布局组件 (<code>padding</code> <code>Row</code> <code>Column</code> <code>Expanded</code>)</h3><h4 id="Padding组件"><a href="#Padding组件" class="headerlink" title="Padding组件"></a>Padding组件</h4><p>HTML中常见的布局标签都有<code>padding</code>属性，但Flutter中很多组件都没有<code>padding</code>属性，一般采用<code>Padding</code>组件来处理容器与子容器间接的间距</p><p>常用属性</p><ul><li><p><code>padding</code></p><p>设置内边距值</p></li><li><p><code>child</code></p><p>放入需要设置内边距的子组件</p></li></ul><h3 id="Row组件"><a href="#Row组件" class="headerlink" title="Row组件"></a>Row组件</h3><p>水平布局组件</p><p>常用参数</p><ul><li><p><code>mainAxisAlignment</code></p><p>主轴的排序方式(水平方向)</p><ul><li><p><code>MainAxisAlignment.center</code> 子元素整体居中显示</p></li><li><p><code>MainAxisAlignment.end</code> 子元素整体靠最右显示</p></li><li><p><code>MainAxisAlignment.spaceAround</code> 子元素之间的距离是元素到两边的距离的两倍</p></li><li><p><code>MainAxisAlignment.between</code> 子元素之间两边的距离为0，元素中间距离相等</p></li><li><p><code>MainAxisAlignment.spaceEvenly</code> 子元素之间和两边的距离平均分配</p></li></ul></li><li><p><code>crossAxisAlignment</code></p><p>次轴(垂直方向)的排序方式，相对于外层Y轴方向的显示方式</p><ul><li><p><code>CrossAxisAlignment.start</code> Y轴最上方</p></li><li><p><code>CrossAxisAlignment.end</code> Y轴最下方</p></li><li><p><code>CrossAxisAlignment.stretch</code> Y方向上拉伸至充满父元素 </p></li><li><p><code>CrossAxisAlignment.baseline</code> 设置成<code>baseline</code>时，必须设置<code>textBaseline</code>,否则会运行出错</p></li></ul></li><li><p><code>children</code></p><p>组件子元素</p></li></ul><h3 id="Column组件"><a href="#Column组件" class="headerlink" title="Column组件"></a>Column组件</h3><p>垂直布局组件</p><p>属性和Row组件基本一致，但主轴方向是垂直方向，次轴方向为水平方向</p><h3 id="Expanded组件"><a href="#Expanded组件" class="headerlink" title="Expanded组件"></a>Expanded组件</h3><p>类似于Web中的Flex布局</p><p>常用属性：</p><ul><li><p><code>flex</code></p></li><li><p><code>child</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Component extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildContext) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      color: Colors.grey,</span><br><span class="line">      child:  Row(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Expanded(</span><br><span class="line">              flex: 1,</span><br><span class="line">              child: Container(child: Text(&apos;sdfsdfs&apos;), color: Colors.blue,),</span><br><span class="line">            ),</span><br><span class="line">            Expanded(</span><br><span class="line">              flex: 2,</span><br><span class="line">              child: Container(child: Text(&apos;rstgs rrtgs&apos;), color: Colors.pink,),</span><br><span class="line">            ),</span><br><span class="line">            Expanded(</span><br><span class="line">              flex: 2,</span><br><span class="line">              child: Container(child: Text(&apos;uyki tkjh&apos;), color: Colors.green,),</span><br><span class="line">            ),</span><br><span class="line">            Expanded(</span><br><span class="line">              flex: 2,</span><br><span class="line">              child: Container(child: Text(&apos;sdhbev &apos;), color: Colors.deepOrange,),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="SizeBox组件"><a href="#SizeBox组件" class="headerlink" title="SizeBox组件"></a>SizeBox组件</h3><p>元素与元素之间的间距可以用<code>margin属性</code>也可以用<code>SizeBox</code>组件，一般常用的是<code>SizeBox</code></p><h3 id="Stack层叠组件"><a href="#Stack层叠组件" class="headerlink" title="Stack层叠组件"></a>Stack层叠组件</h3><p>用于实现定位布局可单独使用，也可以<code>Align</code>组件或<code>Positioned</code>组件联用</p><h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><ul><li><p><code>alignment</code></p><p><code>Stack</code>组件中的所有元素对齐方式,无法对单个元素进行定位，可与<code>Align</code>或<code>Positioned</code>联用控制单个元素定位</p><p><code>Align</code>组件通过设置<code>alignment</code>来对单个元素进行定位</p><p><code>Positioned</code>组件通过设置<code>left</code> <code>right</code> <code>top</code> <code>bottom</code>等的值来对单个元素进行定位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Component extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildContext) &#123;</span><br><span class="line">    return Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        height: 400,</span><br><span class="line">        width: 300,</span><br><span class="line">        color: Colors.pinkAccent,</span><br><span class="line">        child: Stack(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Align(</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              child: Image.network(&quot;https://w.wallhaven.cc/full/42/wallhaven-42pr69.jpg&quot;,width: 120,height: 120),</span><br><span class="line">            ),</span><br><span class="line">            Align(</span><br><span class="line">              alignment: Alignment.topLeft,</span><br><span class="line">              child: Image.network(&quot;https://w.wallhaven.cc/full/4l/wallhaven-4lepvl.jpg&quot;,width: 120,height: 120),</span><br><span class="line">            ),</span><br><span class="line">            Align(</span><br><span class="line">              alignment: Alignment.bottomLeft,</span><br><span class="line">              child: Image.network(&quot;https://w.wallhaven.cc/full/4g/wallhaven-4g3dgq.jpg&quot;,width: 120,height: 120),</span><br><span class="line">            ),</span><br><span class="line">            Align(</span><br><span class="line">              alignment: Alignment.topRight,</span><br><span class="line">              child: Image.network(&quot;https://w.wallhaven.cc/full/vm/wallhaven-vmx6gm.jpg&quot;,width: 120,height: 120),</span><br><span class="line">            ),</span><br><span class="line">            Align(</span><br><span class="line">              alignment: Alignment.bottomRight,</span><br><span class="line">              child: Image.network(&quot;https://w.wallhaven.cc/full/x1/wallhaven-x15qpv.jpg&quot;,width: 120,height: 120),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>children</code></p></li></ul><h3 id="AspectRatio组件"><a href="#AspectRatio组件" class="headerlink" title="AspectRatio组件"></a>AspectRatio组件</h3><p>调整子元素child的宽高比</p><h3 id="Card组件"><a href="#Card组件" class="headerlink" title="Card组件"></a>Card组件</h3><p>卡片组件，内容可由大多数类型的组件组成，<code>Card</code>具有圆角和阴影，让它看起来更具立体感</p><p>常用属性：</p><ul><li><p><code>margin</code></p><p>外边距</p></li><li><p><code>child</code></p><p>子组件</p></li><li><p><code>Shape</code></p><p>设置阴影效果，默认阴影效果为圆角的长方形边</p></li></ul><p>卡片组件可以包含任何组件，但建议结合<code>ListView</code>组件一起使用,但需要注意的是<code>ListView</code>组件不能嵌套<code>ListView</code>组件</p><h4 id="图文卡片的实现"><a href="#图文卡片的实现" class="headerlink" title="图文卡片的实现"></a>图文卡片的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">class Component extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext buildContext) &#123;</span><br><span class="line">    return ListView(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Card(</span><br><span class="line">          margin: EdgeInsets.all(10),</span><br><span class="line">          child: Column(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              AspectRatio(</span><br><span class="line">                aspectRatio: 4/3,</span><br><span class="line">                child: Image.network(&quot;https://w.wallhaven.cc/full/ox/wallhaven-ox7357.jpg&quot;,fit: BoxFit.cover,),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                leading: ClipOval(                  </span><br><span class="line">                  child: Image.network(&quot;https://w.wallhaven.cc/full/13/wallhaven-13op8v.jpg&quot;,fit: BoxFit.cover,height: 50,width: 50,),</span><br><span class="line">                ),</span><br><span class="line">                title: Text(&quot;Candy Nija&quot;),</span><br><span class="line">                subtitle: Text(&quot;my first photo&quot;),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Card(</span><br><span class="line">          margin: EdgeInsets.all(10),</span><br><span class="line">          child: Column(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              AspectRatio(</span><br><span class="line">                aspectRatio: 4/3,</span><br><span class="line">                child: Image.network(&quot;https://w.wallhaven.cc/full/13/wallhaven-13op8v.jpg&quot;,fit: BoxFit.cover,),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                leading: ClipOval(                  </span><br><span class="line">                  child: Image.network(&quot;https://w.wallhaven.cc/full/ey/wallhaven-eyv2z8.jpg&quot;,fit: BoxFit.cover,height: 50,width: 50,),</span><br><span class="line">                ),</span><br><span class="line">                title: Text(&quot;Cindy Casio&quot;),</span><br><span class="line">                subtitle: Text(&quot;stop and think&quot;),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Card(</span><br><span class="line">          margin: EdgeInsets.all(10),</span><br><span class="line">          child: Column(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              AspectRatio(</span><br><span class="line">                aspectRatio: 4/3,</span><br><span class="line">                child: Image.network(&quot;https://w.wallhaven.cc/full/vg/wallhaven-vg2gl8.jpg&quot;,fit: BoxFit.cover,),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                // leading: ClipOval(                  </span><br><span class="line">                //   child: Image.network(&quot;https://w.wallhaven.cc/full/39/wallhaven-397326.jpg&quot;,fit: BoxFit.cover,height: 50,width: 50,),</span><br><span class="line">                // ),</span><br><span class="line">                leading: CircleAvatar(backgroundImage: NetworkImage(&quot;https://w.wallhaven.cc/full/39/wallhaven-397326.jpg&quot;),),</span><br><span class="line">                title: Text(&quot;Joker Nija&quot;),</span><br><span class="line">                subtitle: Text(&quot;Another life&quot;),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Wrap组件"><a href="#Wrap组件" class="headerlink" title="Wrap组件"></a>Wrap组件</h3><p><code>Row</code>组件和<code>Column</code>组件分别是控制的是单行单列的布局，<code>Wrap</code>组件在主轴方向上空间不足时，会自动向次轴方向上扩展显示以实现流布局</p><p>常用属性： </p><ul><li><p><code>direction</code> 主轴方向</p><p>  <code>Axis.vertical</code> 垂直</p><p>  <code>Axis.horizontal</code> 水平</p></li><li><p><code>alignment</code> 主轴对齐方式</p></li><li><p><code>spacing</code> 元素之间主轴方向上的间距，直接输入数值即可</p></li><li><p><code>runSpacing</code> 元素之间在次轴方向上的间距</p></li></ul><h3 id="按钮组件"><a href="#按钮组件" class="headerlink" title="按钮组件"></a>按钮组件</h3><p>按钮的属性基本一致，只是显示的样式不同</p><ul><li><p><code>RaiseButton</code> 凸起按钮组件</p><p><code>Create a filled button.</code></p><p>默认为一个灰色填充效果的按钮</p><p><code>RaiseButton</code>组件中必须有属性<code>onPressed</code>监听，否则设置的样式等会无效</p></li><li><p><code>FlatButton</code> 扁平化按钮</p></li><li><p><code>OutlineButton</code> 线框按钮</p></li><li><p><code>IconButton</code> 图标按钮</p></li><li><p><code>ButtonBar</code> 按钮组</p></li><li><p><code>FloatingActionButton</code> 浮动按钮</p></li></ul><h3 id="StatefulWidget组件"><a href="#StatefulWidget组件" class="headerlink" title="StatefulWidget组件"></a>StatefulWidget组件</h3><p>Flutter中自定义组件其实就是在定义一个类，这个类需要继承<code>StatelessWidget</code>/<code>StatefulWidget</code></p><ul><li><p><code>StatelessWidget</code> 表示无状态组件，状态不可变</p></li><li><p><code>StatefulWidget</code> 表示有状态组件，持有的状态可在Widget生命周期改变。如果想改变页面中的数据，则需要使用<code>StatefulWidget</code></p></li></ul><p>VsCode中装插件<code>Awesome Flutter Snippets</code>后,输入<code>statelessW</code>/<code>statefulW</code>即可自动生成自定义组件的基本结构</p><p><code>State</code>类中有一个方法<code>setState()</code>可以改变值重新渲染页面</p><h3 id="BottomNavigationBar组件"><a href="#BottomNavigationBar组件" class="headerlink" title="BottomNavigationBar组件"></a>BottomNavigationBar组件</h3><p>底部导航条组件，是Scaffold的参数</p><p>常用参数</p><ul><li><p><code>items</code></p><ul><li><p>底部导航条按钮集合，至少要有两个<code>BottomNavigationBarItem</code>，否则运行报错<code>&#39;items.length &gt;= 2&#39;: is not true.</code></p></li><li><p>返回类型为<code>BottomNavigationBarItem</code>集合，参数有：</p><ul><li><p><code>icon</code> 图标</p></li><li><p><code>title</code> 标题名</p></li><li><p><code>activeIcon</code> 选中时图标</p></li></ul></li></ul></li><li><p><code>currentIndex</code></p><p>默认选中第几个</p></li><li><p><code>onTap</code></p><p>选中变化回调函数</p></li><li><p><code>fixedColor</code></p><p>选中的颜色</p></li><li><p><code>type</code></p><p>配置底部导航栏可以有多个按钮</p><ul><li><p><code>BottomNavigationBarType.shifting</code></p><p>切换导航时有淡入淡出效果且不显示未选中的按钮</p></li><li><p><code>BottomNavigationBarType.fixed</code></p></li></ul></li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>Flutter中通过<code>Navigator</code>组件管理路由导航，并提供了管理堆栈的方法，如<code>Navigator.push</code>和<code>Navigator.pop</code></p><p>Flutter提供了额两种配置路由跳转的方式： 基本路由和命名路由</p><h4 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h4><p>固定写法： </p><ul><li><p><code>Navigator.push</code> 跳转至下一级子页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).push(</span><br><span class="line">  MaterialPageRoute(</span><br><span class="line">    builder: (context) =&gt; SearchPage() // SearchPage为需要跳转的页面</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><code>Navigator.pop</code> 退出当前页面，返回上一级页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pop();</span><br></pre></td></tr></table></figure></li></ul><h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h4><ol><li><p>在<code>main.dart</code>文件中的<code>MaterialApp</code>中的<code>routes</code>属性进行配置路由</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">routes: &#123;</span><br><span class="line">  &apos;/search&apos; : (context) =&gt; SearchPage(),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过使用<code>Navigator.pushNamed(context,&#39;路由名&#39;)</code>跳转</p><p> 路由名必须要跟<code>routes</code>中的名字对应</p></li></ol><p>命名路由传值</p><p>官方demo只是为了指定路由传值，以下写法可以改成通用传值: </p><ul><li><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义路由 arguments表示可选参数</span></span><br><span class="line"><span class="keyword">final</span> routes  = &#123;</span><br><span class="line">  <span class="string">'/search'</span> : (context, &#123;arguments&#125;) =&gt; SearchPage(arguments: arguments),</span><br><span class="line">  <span class="string">'/form'</span> : (context, &#123;arguments&#125;) =&gt; SearchPage(arguments: arguments),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      <span class="comment">// 切换路由时的操作</span></span><br><span class="line">      onGenerateRoute: (settings) &#123;</span><br><span class="line">        <span class="keyword">final</span> String name = settings.name;<span class="comment">// 获取路由名称</span></span><br><span class="line">        <span class="keyword">final</span> Function pageContentBuilder = <span class="keyword">this</span>.routes[name];<span class="comment">// 将自定义配置的路由名赋给pageContentBuilder</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pageContentBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">// pageContentBuilder不为空，利用MaterialPageRoute进行跳转</span></span><br><span class="line">          <span class="keyword">if</span> (settings.arguments != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Route route = MaterialPageRoute(</span><br><span class="line">              builder: (context) =&gt; </span><br><span class="line">                pageContentBuilder(context,arguments: settings.arguments));<span class="comment">// settings.arguments为传递的参数</span></span><br><span class="line">            <span class="keyword">return</span> route;</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Route route= MaterialPageRoute(</span><br><span class="line">              builder: (context) =&gt; </span><br><span class="line">                pageContentBuilder(context));</span><br><span class="line">            <span class="keyword">return</span> route;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      home: Tabs(),</span><br><span class="line">      theme: ThemeData(primaryColor: Colors.lime)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> arguments;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">SearchPage</span><span class="params">(&#123;<span class="keyword">this</span>.arguments&#125;)</span></span>;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Container(</span><br><span class="line">        child: Scaffold(</span><br><span class="line">          appBar: AppBar(title: Text(<span class="string">'搜索'</span>),),</span><br><span class="line">          body: Container(</span><br><span class="line">            child: Row(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                RaisedButton(</span><br><span class="line">                  child: Text(<span class="string">'查询$&#123;arguments != null ? arguments['</span>id<span class="string">'] : '</span><span class="number">0</span><span class="string">'&#125;'</span>),</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    </span><br><span class="line">                  &#125;,</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>路由配置可最终抽离成一个单独的文件<code>Routes.dart</code>:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../pages/Search.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../pages/Tabs.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line"><span class="keyword">final</span> routes  = &#123;</span><br><span class="line">  <span class="string">'/'</span> : (context, &#123;arguments&#125;) =&gt; Tabs(),</span><br><span class="line">  <span class="string">'/search'</span> : (context, &#123;arguments&#125;) =&gt; SearchPage(arguments: arguments),</span><br><span class="line">  <span class="string">'/form'</span> : (context, &#123;arguments&#125;) =&gt; SearchPage(arguments: arguments),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由跳转</span></span><br><span class="line">var onGenerateRoute = (settings) &#123;</span><br><span class="line">        <span class="keyword">final</span> String name = settings.name;</span><br><span class="line">        <span class="keyword">final</span> Function pageContentBuilder = routes[name];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pageContentBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">// If you push the route</span></span><br><span class="line">          <span class="keyword">if</span> (settings.arguments != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Cast the arguments to the correct type: ScreenArguments.</span></span><br><span class="line">            <span class="keyword">final</span> Route route = MaterialPageRoute(</span><br><span class="line">              builder: (context) =&gt; </span><br><span class="line">                pageContentBuilder(context,arguments: settings.arguments));</span><br><span class="line">            <span class="keyword">return</span> route;</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Route route= MaterialPageRoute(</span><br><span class="line">              builder: (context) =&gt; </span><br><span class="line">                pageContentBuilder(context));</span><br><span class="line">            <span class="keyword">return</span> route;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br></pre></td></tr></table></figure><p><code>main.dart</code>配置如下:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'routes/Routes.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>=&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      onGenerateRoute: onGenerateRoute,</span><br><span class="line">      initialRoute: <span class="string">'/'</span>, <span class="comment">// 初始化加载的路由</span></span><br><span class="line">      theme: ThemeData(primaryColor: Colors.lime),</span><br><span class="line">      <span class="comment">// routes: &#123;</span></span><br><span class="line">      <span class="comment">//   '/search' : (context) =&gt; SearchPage(),</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由替换以及返回到根路由"><a href="#路由替换以及返回到根路由" class="headerlink" title="路由替换以及返回到根路由"></a>路由替换以及返回到根路由</h3><ul><li><p><code>Navigator.of(context).pushReplacementNamed(&#39;路由名&#39;)</code></p><p>替换路由，将当前页面替换成指定页面，替换后的页面点击返回时，返回的还是当前页面的上一级</p><p>因此可以借助路由替换来实现返回根路由</p></li><li><p><code>Navigator.of(context).pushAndRemoveUntil(newRoute, predicate)</code></p><p>直接返回根目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pushAndRemoveUntil(MaterialPageRoute(</span><br><span class="line">                builder: (context) =&gt; Tabs(),<span class="comment">// 根路由页面</span></span><br><span class="line">              ), (route) =&gt; route = <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="AppBar组件"><a href="#AppBar组件" class="headerlink" title="AppBar组件"></a>AppBar组件</h3><p>将<code>MaterialApp</code>中的<code>debugShowCheckedModeBanner</code>设置成为<code>false</code>则不显示右上角<code>debugg</code>图标</p><p>顶部导航</p><ul><li><p><code>title</code> </p><p>顶部导航文字 </p></li><li><p><code>backgroundColor</code></p><p>导航栏背景颜色</p></li><li><p><code>leading</code></p><p>导航栏左侧加元素，一般是图标,如果需要点击图标监听事件，则需要用<code>IconButton</code></p></li><li><p><code>actions</code></p><p>导航栏右侧添加元素</p></li><li><p><code>centerTitle</code></p><p>设置文本是否居中</p></li><li><p><code>automaticallyImplyLeading</code></p><p>导航栏左侧是否显示自动生成的<code>leading</code>图标</p><ul><li><p>/// Controls whether we should try to imply the leading widget if null.<br>///<br>/// If true and [leading] is null, automatically try to deduce what the leading<br>/// widget should be. If false and [leading] is null, leading space is given to [title].<br>/// If leading widget is not null, this parameter has no effect.</p></li></ul></li></ul><h3 id="TabController"><a href="#TabController" class="headerlink" title="TabController"></a>TabController</h3><ul><li><p>在<code>MaterialApp</code>的<code>home</code>内添加<code>DefaultTabController()</code>,设置标签长度<code>length</code></p><p>  若不配置<code>length</code>,运行时会报错：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The method &apos;&gt;=&apos; was called on null.</span><br><span class="line">···</span><br><span class="line">When the exception was thrown, this was the stack:</span><br><span class="line">I/flutter ( 3567): #0      Object.noSuchMethod (dart:core-patch/object_patch.dart:51:5)</span><br><span class="line">I/flutter ( 3567): #1      new DefaultTabController (package:flutter/src/material/tab_controller.dart:315:22)</span><br></pre></td></tr></table></figure></li><li><p>在<code>AppBar()</code>的<code>bottom</code>属性中添加<code>TabBar()</code></p></li><li><p>在<code>body</code>中设置<code>TabView()</code>,定义标签切换对应的页面</p><p><code>TabView()</code>的长度必须与<code>TabBar()</code>中的一致，否则报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The following assertion was thrown building TabBarView(dirty, dependencies: [_TabControllerScope],</span><br><span class="line">I/flutter ( 3567): state: _TabBarViewState#351c0):</span><br><span class="line">I/flutter ( 3567): Controller&apos;s length property (2) does not match the</span><br><span class="line">I/flutter ( 3567): number of tabs (3) present in TabBar&apos;s tabs property.</span><br></pre></td></tr></table></figure></li></ul><p>demo示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">  theme: ThemeData(primaryColor: Colors.lime),</span><br><span class="line">  home: DefaultTabController(</span><br><span class="line">    length: <span class="number">2</span>,</span><br><span class="line">    child: Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">"data"</span>),</span><br><span class="line">        bottom: TabBar(</span><br><span class="line">          tabs: &lt;Widget&gt;[</span><br><span class="line">            Tab(text: <span class="string">"热门"</span>,),</span><br><span class="line">            Tab(text: <span class="string">"推荐"</span>,)</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      body: TabBarView(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                ListView(</span><br><span class="line">                  children: &lt;Widget&gt;[</span><br><span class="line">                    ListTile(title: Text(<span class="string">"热门标签内容"</span>),),</span><br><span class="line">                    ListTile(title: Text(<span class="string">"热门标签内容"</span>),),</span><br><span class="line">                    ListTile(title: Text(<span class="string">"热门标签内容"</span>),),</span><br><span class="line">                    ListTile(title: Text(<span class="string">"热门标签内容"</span>),),</span><br><span class="line">                    ListTile(title: Text(<span class="string">"热门标签内容"</span>),),</span><br><span class="line">                  ],</span><br><span class="line">                ),</span><br><span class="line">                ListView(</span><br><span class="line">                  children: &lt;Widget&gt;[</span><br><span class="line">                    ListTile(title: Text(<span class="string">"推荐标签内容"</span>),),</span><br><span class="line">                    ListTile(title: Text(<span class="string">"推荐标签内容"</span>),),</span><br><span class="line">                    ListTile(title: Text(<span class="string">"推荐标签内容"</span>),),</span><br><span class="line">                    ListTile(title: Text(<span class="string">"推荐标签内容"</span>),),</span><br><span class="line">                    ListTile(title: Text(<span class="string">"推荐标签内容"</span>),),</span><br><span class="line">                  ],</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">    ),</span><br><span class="line">))</span><br></pre></td></tr></table></figure><h3 id="Divider组件"><a href="#Divider组件" class="headerlink" title="Divider组件"></a>Divider组件</h3><p>分割线</p><h3 id="Drawer组件"><a href="#Drawer组件" class="headerlink" title="Drawer组件"></a>Drawer组件</h3><p><code>Drawer</code>组件中可以设置<code>DrawerHeader</code>组件,设置抽屉头部样式</p><p><code>UserAccountsDrawerHeader</code>组件可以快速实现头部组件样式，显示用户头像信息等</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><h4 id="TextField-文本框组件"><a href="#TextField-文本框组件" class="headerlink" title="TextField 文本框组件"></a><code>TextField</code> 文本框组件</h4><h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><h3 id="flutter-swiper-轮播图"><a href="#flutter-swiper-轮播图" class="headerlink" title="flutter_swiper 轮播图"></a>flutter_swiper 轮播图</h3><h2 id="实践中的踩坑记录"><a href="#实践中的踩坑记录" class="headerlink" title="实践中的踩坑记录"></a>实践中的踩坑记录</h2><h3 id="更换APP图标及名称"><a href="#更换APP图标及名称" class="headerlink" title="更换APP图标及名称"></a>更换APP图标及名称</h3><ul><li><p>更换图标 </p><p>Android &amp; IOS 图标一键生成网站： <a href="http://icon.wuruihong.com/" target="_blank" rel="noopener">http://icon.wuruihong.com/</a></p><p>上传一张原图片后，会自动生成压缩包，下载解压后可以看到Android和IOS两个文件夹</p><ul><li><p>将Android文件夹的内容复制到<code>项目根目录\android\app\src\main\res</code>,将原文件夹替换</p></li><li><p>将IOS文件夹的内容复制到<code>项目根目录\ios\Runner\Assets.xcassets</code>下，将原<code>AppIcon.appiconset</code>文件夹替换</p></li></ul></li><li><p>更换APP名称</p><ul><li><p>Android名称： 打开<code>项目根目录\android\app\src\main</code>文件夹下的<code>AndroidManifest.xml</code>文件，修改<code>android:label</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"io.flutter.app.FlutterApplication"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"聖巡"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/LaunchTheme"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:configChanges</span>=<span class="string">"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hardwareAccelerated</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:windowSoftInputMode</span>=<span class="string">"adjustResize"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- This keeps the window background of the activity showing</span></span><br><span class="line"><span class="comment">             until Flutter renders its first frame. It can be removed if</span></span><br><span class="line"><span class="comment">             there is no splash screen (such as the default splash screen</span></span><br><span class="line"><span class="comment">             defined in @style/LaunchTheme). --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"io.flutter.app.android.SplashScreenUntilFirstFrame"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>IOS名称： 打开<code>项目根目录\ios\Runner</code>下的<code>info.plist</code>文件，修改<code>dict.String</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleDevelopmentRegion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>$(DEVELOPMENT_LANGUAGE)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleExecutable<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>$(EXECUTABLE_NAME)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIdentifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>$(PRODUCT_BUNDLE_IDENTIFIER)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleInfoDictionaryVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>6.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>聖巡<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundlePackageType<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>APPL<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleShortVersionString<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>$(FLUTTER_BUILD_NAME)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleSignature<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>????<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>$(FLUTTER_BUILD_NUMBER)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>LSRequiresIPhoneOS<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchStoryboardName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>LaunchScreen<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIMainStoryboardFile<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>UISupportedInterfaceOrientations<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationPortrait<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationLandscapeLeft<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationLandscapeRight<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>UISupportedInterfaceOrientations~ipad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationPortrait<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationPortraitUpsideDown<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationLandscapeLeft<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIInterfaceOrientationLandscapeRight<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIViewControllerBasedStatusBarAppearance<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>此命名规范来自Dart官方网站： <code>https://dart.dev/guides/language/effective-dart/style</code></p><p>Dart中的命名方式有三种： <code>UpperCamelCase</code> 首字母大写(包括第一个字母)的驼峰式、<code>lowerCamelCase</code>首字母大写，第一个字母小写的驼峰式、<code>lowercase_with_underscores</code>带有下划线的小写字母</p><ol><li><p><code>Classes, enums, typedefs, and type parameters should capitalize the first letter of each word (including the first word), and use no separators.</code></p><p> 类名、枚举、<code>typedefs</code>(这啥？)、泛型参数采用<code>UpperCamelCase</code></p></li><li><p><code>DO name libraries, packages, directories, and source files using lowercase_with_underscores.</code></p><p>库名、包名、文件夹名、文件名采用<code>lowercase_with_underscores</code>(小写字母+下划线)</p></li><li><p><code>DO name import prefixes using lowercase_with_underscores.</code></p><p>重命名导入的包时，采用<code>lowercase_with_underscores</code>(小写字母+下划线)</p></li><li><p><code>DO name other identifiers using lowerCamelCase.</code></p><p>命名其他时采用<code>lowerCamelCase</code></p></li><li><p><code>PREFER using lowerCamelCase for constant names.</code></p><p>最好使用<code>lowerCamelCase</code>来命名常量</p></li></ol><h3 id="嵌入地图"><a href="#嵌入地图" class="headerlink" title="嵌入地图"></a>嵌入地图</h3><p>我为啥一上来就用了个这么虐心的组件？？？o(╥﹏╥)o</p><h4 id="高德地图"><a href="#高德地图" class="headerlink" title="高德地图"></a>高德地图</h4><p><code>amap_base_flutter</code>插件可以实现定位、简单的地图展示、导航、搜索等功能</p><p>Android版：</p><ul><li><p>在<code>pubspec.yaml</code>文件中引入依赖，无需添加版本号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  amap_location:</span><br></pre></td></tr></table></figure></li><li><p>至高德地图<code>https://lbs.amap.com/api/android-sdk/guide/create-project/get-key</code>注册<code>API key</code></p></li><li><p>修改 <code>项目目录/app/build.gradle</code> 在<code>android/defaultConfig</code>节点修改<code>manifestPlaceholders</code>,新增百度地图AK配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  .... 你的代码</span><br><span class="line"></span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">      .....</span><br><span class="line">      manifestPlaceholders = [</span><br><span class="line">              AMAP_KEY : &quot;你的高德地图AK&quot;, // 高德地图AK</span><br><span class="line">      ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h3><ol><li><p>引入<code>dio</code>包</p><p> <code>dio</code>是一个强大的<code>Dart Http</code>请求库，支持<code>Restful API</code>、<code>FormData</code>、拦截器、请求取消、Cookie管理、文件上传/下载、超时、自定义适配器等…</p><p> 在<code>pubspec.yaml</code>文件中添加依赖:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">  dio:</span> <span class="string">^3.x.x</span>  <span class="string">//</span> <span class="string">请使用pub上3.0.0分支的最新版本(本人用的是3.0.5)</span></span><br></pre></td></tr></table></figure></li></ol><p>常见报错信息：</p><ul><li><p><code>SocketException: Failed host lookup: &#39;www.baidu.com&#39; (OS Error: No address associated with hostnam, errno = 7)</code></p><p>  测试DIO做请求时，写了个方法get百度首页数据，返回此报错，结果发现是手机没联网导致，emmm…</p></li><li><p><code>Unhandled Exception: DioError [DioErrorType.RESPONSE]: Http status error [400]</code></p><ul><li><p>状态为400可能有很多原因，此为碰到的其中之一</p><p><code>post</code>发送请求时一直没反应，状态为400，后来终于发现是封装方法是出现问题</p><p><code>get</code>方法： </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>(url, &#123;data, options, cancelTocken&#125;) <span class="keyword">async</span>&#123;</span><br><span class="line">  Response response;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(url, queryParameters: data, options: options, cancelToken: cancelToken);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'get success---------<span class="subst">$&#123;response.statusCode&#125;</span>'</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'get success---------<span class="subst">$&#123;response.data&#125;</span>'</span>);</span><br><span class="line">      </span><br><span class="line">  &#125; on DioError <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'get error---------$e'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> response.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>post</code>方法：</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">post(url, &#123;data, options, cancelToken&#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">  Response response;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    response = <span class="keyword">await</span> dio.post(url, data: data, options: options, cancelToken: cancelToken);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'get success---------<span class="subst">$&#123;response.statusCode&#125;</span>'</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'get success---------<span class="subst">$&#123;response.data&#125;</span>'</span>);</span><br><span class="line">  &#125; on DioError <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'get error---------$e'</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> response.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>get</code>方法中，接收参数的属性是<code>queryParameters</code>,<code>post</code>方法中，接收参数的属性是<code>data</code>,一开始将<code>post</code>方法中接收参数的属性写成了<code>queryParameters</code>,结果做请求时一直毫无反应，debug进去发现报了<code>Http status error [400]</code>的错。坑！</p></li></ul></li><li><p><code>DioError [DioErrorType.RESPONSE]: Http status error [415]</code></p></li></ul><h2 id="报错集锦"><a href="#报错集锦" class="headerlink" title="报错集锦"></a>报错集锦</h2><ul><li><p><code>* Error running Gradle: ProcessException: Process &quot;D:\vscodework\yardApp\android\gradlew.bat&quot; exited abnormally: Configure project :app</code></p><p>八成是被墙了，下载不下来依赖，在环境变量中配置一下两个参数就解决了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line"></span><br><span class="line">PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br></pre></td></tr></table></figure><p>环境变量配置好后需要重启电脑才能生效</p></li></ul><hr><p>参考资料：</p><ol><li><p>Flutter官网： <a href="https://flutter.dev/" target="_blank" rel="noopener">https://flutter.dev/</a></p></li><li><p>技术胖教学视频： <a href="https://www.bilibili.com/watchlater/#/av35800108/p1" target="_blank" rel="noopener">https://www.bilibili.com/watchlater/#/av35800108/p1</a></p></li><li><p>Material官网： <a href="https://material.io/" target="_blank" rel="noopener">https://material.io/</a></p></li><li><p>Flutter教程_2019年最新Flutter 零基础入门实战教程:  <a href="https://www.bilibili.com/watchlater/?spm_id_from=666.19.b_62696c692d6865616465722d6d.17#/av53072584/p17" target="_blank" rel="noopener">https://www.bilibili.com/watchlater/?spm_id_from=666.19.b_62696c692d6865616465722d6d.17#/av53072584/p17</a></p></li></ol>]]></content>
      
      <categories>
          
          <category> framework,Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> UI </tag>
            
            <tag> framework </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端基础之CSS</title>
      <link href="/2019/10/13/computerLanguage/web/css/"/>
      <url>/2019/10/13/computerLanguage/web/css/</url>
      <content type="html"><![CDATA[<h1 id="CSS一些基本概念"><a href="#CSS一些基本概念" class="headerlink" title="CSS一些基本概念"></a>CSS一些基本概念</h1><h2 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS规则 = 选择器 + 声明块</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>选择器： 选中元素</p><ol><li>ID选择器： 选中的是对应id值的元素</li><li>元素选择器</li><li>类选择器</li></ol><h3 id="声明块"><a href="#声明块" class="headerlink" title="声明块"></a>声明块</h3><p>出现在<code>{}</code>中，声明块包含很多声明（属性），每一个声明（属性）表达了某一方面的样式</p><h2 id="CSS代码书写位置"><a href="#CSS代码书写位置" class="headerlink" title="CSS代码书写位置"></a>CSS代码书写位置</h2><ol><li>内部样式表</li></ol><p>书写在<code>&lt;style&gt;</code>元素中，一般放在<code>&lt;head&gt;</code>里面</p><ol start="2"><li>内联样式表（元素样式表）</li></ol><p>直接书写在元素的style属性中</p><ol start="3"><li>外部样式表[推荐]</li></ol><p>将样式书写到独立的css文件中</p><p>1) 外部样式表可以解决多页面样式重复的问题<br>2) 有利于浏览器缓存，从而提高页面响应速度<br>3) 有利于代码分离(HTML和CSS)，更容易阅读和维护</p><h1 id="常见样式声明"><a href="#常见样式声明" class="headerlink" title="常见样式声明"></a>常见样式声明</h1><ol><li><code>color</code></li></ol><p>元素内部的文字颜色</p><p><strong>预设值</strong>： 定义好的单词</p><p><strong>三原色(色值)</strong>： 光学三原色（红、绿、蓝），每个颜色可以使用0-255之间的数字来表达色值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rgb表示法：</span><br><span class="line">rgb(0,255,0)</span><br><span class="line">hex(16进制)表示法：</span><br><span class="line">#红绿蓝</span><br></pre></td></tr></table></figure><p>常用的颜色色号：</p><p>淘宝红： #ff4400,#f40<br>黑色： #000000，#000<br>白色： #ffffff, #fff<br>红： #f00<br>绿： #0f0<br>蓝： #00f<br>紫： #f0f<br>青： #0ff<br>黄： #ff0<br>灰色： #ccc</p><ol start="2"><li><code>background-color</code></li></ol><p>元素背景颜色</p><ol start="3"><li><code>font-size</code></li></ol><p>元素内部文字的尺寸大小</p><p>1) 像素尺寸 px<br>2) 相对单位 em 相对父元素的字体大小 </p><p>每个元素必须有字体大小，如果没有声明，则直接使用父元素的字体大小；若果没有父元素(即html元素)，则使用基准字号，即浏览器中设置的字体大小</p><blockquote><p>user agent:  UA, 用户代理（浏览器）</p></blockquote><ol start="4"><li><code>font-weight</code></li></ol><p>文字粗细程度，可以取值数字，可以取值为预设值</p><p><strong>预设值</strong></p><p>normal–&gt;400 (不加粗)<br>bold–&gt;700 (加粗)</p><blockquote><p>strong元素默认显示加粗字体</p></blockquote><ol start="5"><li><code>font-family</code></li></ol><p>文字类型</p><p>必须用户计算机中存在的字体才会有效</p><p>使用多个字体，以匹配不同环境</p><p>最后一般会加上<code>sans-serif</code>,非衬线字体。 当用户计算机未安装指定的所有字体时，使用计算机自带字体</p><ol start="6"><li><code>font-style</code></li></ol><p>字体样式，通常用它设置斜体</p><blockquote><p>i、em 元素默认样式是斜体; 实际使用中，通常用它表示一个图标</p></blockquote><ol start="7"><li><code>text-decoration</code></li></ol><p>文本修饰，给文本加斜线(删除线、下划线等)</p><blockquote><p>a元素默认带有下划线；  del元素 表示错误内容 默认带有删除线； s元素 表示废弃/过期内容(比如商品原价等) 默认带有删除线</p></blockquote><ol start="8"><li><code>text-indent</code></li></ol><p>表示首行文本缩进，可以写像素<code>px</code>，也可以写<code>em</code></p><ol start="9"><li><code>line-height</code></li></ol><p>行高，每行文本的高度，该值越大，每行文本的距离越大</p><p>设置行高为容器的高度，可以让单行文本垂直居中</p><p>行高可以设置为纯数字，表示相对于当前元素的字体大小 [多行文字时推荐此写法]</p><ol start="10"><li>width</li></ol><p>宽度</p><ol start="11"><li><code>height</code></li></ol><p>高度</p><ol start="12"><li><code>letter-spacing</code></li></ol><p>文字间隙</p><ol start="13"><li><code>text-align</code></li></ol><p>文字水平对齐样式，默认左对齐</p><h1 id="选择器-1"><a href="#选择器-1" class="headerlink" title="选择器"></a>选择器</h1><p>选择器： 帮助你精准的选中想要的元素</p><h2 id="简单选择器"><a href="#简单选择器" class="headerlink" title="简单选择器"></a>简单选择器</h2><ol><li><p>ID选择器</p></li><li><p>元素选择器</p></li><li><p>类选择器</p></li><li><p>通配符选择器</p></li></ol><p><code>*</code> : 表示选择所有</p><ol start="5"><li>属性选择器</li></ol><p>根据属性名和属性值选择</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选中所有具有href属性的元素 */</span></span><br><span class="line"><span class="selector-attr">[href]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选中href属性=https://www.baidu.com的元素 */</span></span><br><span class="line"><span class="selector-attr">[href="https://www.baidu.com"]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多写法参见官方文档： <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Attribute_selectors" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Attribute_selectors</a></p><ol start="6"><li>伪类选择器</li></ol><p>选中某些元素的某种状态,书写格式： <code>:</code></p><p><code>link</code>: 超链接未访问时的状态</p><p><code>visited</code>: 超链接点击后的状态</p><p><code>hover</code> : 鼠标悬停状态</p><p><code>active</code>: 激活状态，鼠标按下时的状态</p><p>书写顺序： 爱恨法则 L V H A </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选中鼠标悬停时的a元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标按下时的a元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>伪元素选择器</li></ol><p>书写格式： <code>::</code></p><p>before</p><p>after</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在span元素前面加"《" 后面加 "》" content为before和after 伪元素选择器特有的属性 */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" 《"</span>; </span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"》 "</span>; </span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择器的组合"><a href="#选择器的组合" class="headerlink" title="选择器的组合"></a>选择器的组合</h2><ol><li>并且</li></ol><p>将两个选择器连着写，中间不加空格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 选中class=red的p元素 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>后代元素 —— 空格</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 选中class=red后代的li元素 */</span></span><br><span class="line"><span class="selector-class">.red</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>子元素 —— &gt;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 选中class=abc的子元素中class=bcd的元素 */</span></span><br><span class="line"><span class="selector-class">.abc</span>&gt;<span class="selector-class">.bcd</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>相邻兄弟元素 —— +</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 选中class=special的元素下一个兄弟li元素 */</span></span><br><span class="line"><span class="selector-class">.special</span>+<span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>后面出现的所有兄弟元素 —— ~</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 选中class=special的元素后面所有的兄弟li元素 */</span></span><br><span class="line"><span class="selector-class">.special</span>~<span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CSS选择器中不提供选择元素之前的选择器，跟CSS渲染有关</strong></p><h2 id="选择器的并列"><a href="#选择器的并列" class="headerlink" title="选择器的并列"></a>选择器的并列</h2><p>多个选择器用逗号分隔</p><p>语法糖(Syntactic sugar): 指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.special</span>~<span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以写成：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.special</span>~<span class="selector-tag">li</span>, <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h1><p>声明冲突： 同一个样式，多次应用到同一个元素</p><p>层叠： 解决声明冲突的过程，浏览器自动处理（权重计算）</p><p>冲突最终值只能胜出一个</p><h2 id="比较重要性"><a href="#比较重要性" class="headerlink" title="比较重要性"></a>比较重要性</h2><p>重要性由高到低： </p><blockquote><p>作者样式表： 开发者书写的样式</p></blockquote><p>1) 作者样式表中的<code>!important</code>样式<br>2) 作者样式表的普通样式<br>3) 浏览器默认样式表中的样式</p><h2 id="比较特殊性"><a href="#比较特殊性" class="headerlink" title="比较特殊性"></a>比较特殊性</h2><p>总体规则： 选择器选择的范围越窄，越特殊</p><p>具体规则： 通过选择器计算出一个四位数(XXXX)，值越大表示越特殊</p><ol><li>千位数： 如果是内联样式，记1，否则0</li><li>百位数： 等于选择器中所有id选择器的数量</li><li>十位数： 等于选择器中所有类选择器、属性选择器、伪类选择器的数量</li><li>个位数： 等于选择器中所有元素选择器、伪元素选择器的数量</li></ol><p><strong>此四位数不是严格意义上的四位数，不会逢十进一，而是逢256进一</strong></p><h2 id="比较源次序"><a href="#比较源次序" class="headerlink" title="比较源次序"></a>比较源次序</h2><p>代码书写靠后的胜出</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ol><li><p>重置样式表</p><p> 书写一些作者样式，覆盖浏览器的默认样式，解决不同浏览器默认样式不同使界面显示不同的问题。</p><p> 常见的重置样式表： normalize.css、 reset.css、 meyer.css</p></li><li><p>爱恨法则</p><p> link &gt; visited &gt; hover &gt; active</p></li></ol><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>子元素会继承父元素的某些CSS属性</p><p>通常跟字体相关的属性都能被继承</p><h1 id="属性值的计算过程"><a href="#属性值的计算过程" class="headerlink" title="属性值的计算过程"></a>属性值的计算过程</h1><p>浏览器是一个元素一个元素依次渲染页面的，顺序按照页面文档的树形目录结构</p><p>渲染每个元素的前提条件： 该元素的所有CSS属性必须有值</p><p>一个元素从所有属性都没有值，到所有的属性都有值，这个计算过程叫做属性值计算过程。</p><h2 id="计算步骤"><a href="#计算步骤" class="headerlink" title="计算步骤"></a>计算步骤</h2><ol><li><p>确定声明值</p><p> 声明值： 开发者写的样式或者浏览器默认的样式</p><p> 参考样式表中没有冲突的声明直接作为CSS属性值</p></li><li><p>层叠冲突</p><p> 对样式表中有冲突的声明使用层叠规则，确定CSS属性值</p></li><li><p>使用继承</p><p> 对仍然没有值的属性，若可以继承则继承父元素的值</p></li><li><p>使用默认值</p><p> 对仍然没有值的属性使用默认值，每个CSS属性都有自己的默认值</p></li></ol><p>特殊的两个CSS取值：</p><ul><li><code>inherit</code>: 手动（强制）继承，将父元素的值取出应用到该元素</li><li><code>initial</code>: 初始值，将该属性设置为默认值 </li></ul><h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><p>box: 盒子，每个元素在页面中都会生成一个矩形区域(盒子)</p><p>盒子类型： </p><ol><li>行盒， <code>display=inline</code>的元素</li><li>块盒， <code>display=block</code>的元素</li></ol><p>行盒在页面中不换行，块盒独占一行</p><p>浏览器默认样式设置的块盒： 容器元素(div header footer…)、h1~h6、p</p><p>常见的行盒： span、 a、 img、video、audio</p><h2 id="盒子的组成部分"><a href="#盒子的组成部分" class="headerlink" title="盒子的组成部分"></a>盒子的组成部分</h2><p>无论是行盒还是块盒都由下面几个部分组成，从内到外分别是：</p><ol><li><p>内容 content</p><p> <code>width</code>、 <code>height</code> 设置的是盒子内容的宽度和高度</p><p> 内容部分通常叫做整个盒子的<strong>内容盒 content-box</strong></p></li><li><p>填充 padding</p><p> 盒子边框到盒子内容的距离</p><p> <code>padding-left</code> <code>padding-right</code> <code>padding-top</code> <code>padding-bottom</code></p><p> <code>padding</code> 简写属性</p><p> <code>padding: 上 右 下 左</code></p><p> 填充区+内容区叫做 <strong>填充盒 padding-box</strong> </p></li><li><p>边框 border</p><p> 边框 = 边框样式 + 边框宽度 + 边框颜色</p><p> 边框样式：<code>border-style</code> (可以取<code>solid</code> <code>dotted</code> <code>dashed</code>等样式值) 简写属性<br> 边框宽度: <code>border-width</code>  简写属性<br> 边框颜色: <code>border-color</code> 默认为字体颜色</p><p> border: 边框宽度 边框样式 边框颜色</p><p> 边框 + 填充区 + 内容区 = <strong>边框盒 border-box</strong></p></li><li><p>外边距 margin</p><p> 边框到其他盒子的距离</p><p> <code>margin-top</code> <code>margin-left</code> <code>margin-right</code> <code>margin-bottom</code></p><p> 可简写成： <code>margin: 上 由 下 左</code></p></li></ol><h1 id="盒模型的应用"><a href="#盒模型的应用" class="headerlink" title="盒模型的应用"></a>盒模型的应用</h1><h2 id="改变框高范围"><a href="#改变框高范围" class="headerlink" title="改变框高范围"></a>改变框高范围</h2><p>默认情况下，width和height设置的是内容盒的宽高</p><blockquote><p>页面重构师： 将psd文件（设计稿）制作为静态页面</p></blockquote><p>衡量页面设计稿尺寸的时候，往往使用的是边框盒，但设置width和height则设置的是内容盒</p><p>解决办法：</p><ol><li>精确计算</li><li>只用CSS3中的<code>box-sizing</code>指定宽高的影响范围</li></ol><h2 id="改变背景覆盖范围"><a href="#改变背景覆盖范围" class="headerlink" title="改变背景覆盖范围"></a>改变背景覆盖范围</h2><p>默认情况下背景覆盖边框盒</p><p>可以通过<code>background-clip</code>修改边框覆盖范围</p><h2 id="溢出处理"><a href="#溢出处理" class="headerlink" title="溢出处理"></a>溢出处理</h2><p><code>overflow : visible</code> 可见(默认值)</p><p><code>overflow : hidden</code> 溢出部分隐藏</p><p><code>overflow : scroll</code> 生成滚动条</p><p><code>overflow-y : scroll</code> 竖向滚动条</p><p><code>overflow-x : scroll</code> 横向滚动条</p><p><code>overflow : auto</code> 自动控制出现滚动条</p><h2 id="断词规则"><a href="#断词规则" class="headerlink" title="断词规则"></a>断词规则</h2><p><code>word-break</code>, 影响文字在什么位置被截断换行，有以下值：</p><p>normal: 普通。 CJK(中日韩)字符在文字位置截断，非CJK字符在单词位置截断</p><p>break-all： 截断所有。 所有字符在文字处截断，比如英文会在单词中截断</p><p>keep-all: 保持所有。 所有字符在单词间截断，中文字符若无空格则会挤在一行</p><h2 id="空白处理"><a href="#空白处理" class="headerlink" title="空白处理"></a>空白处理</h2><p><code>white-space: nowrap</code>： 不换行</p><p>常用处理方式： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap; <span class="comment">/* 不换行 */</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden; <span class="comment">/* 溢出隐藏 */</span></span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis; <span class="comment">/* 文字部分溢出用圆点代替 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="行盒的盒模型"><a href="#行盒的盒模型" class="headerlink" title="行盒的盒模型"></a>行盒的盒模型</h1><p>常见的行盒： 包含具体内容的元素</p><p><code>span</code> <code>strong</code> <code>em</code> <code>i</code> <code>img</code> <code>video</code> <code>audio</code></p><h2 id="显著特点"><a href="#显著特点" class="headerlink" title="显著特点"></a>显著特点</h2><ol><li>盒子沿着内容延伸</li><li>行盒不能设置宽高，因为行盒的宽高是根据内容来的，只能通过字体大小、行高、字体类型等间接调整</li><li><p>内边距(填充区)</p><p> 水平方向有效，垂直方向只会影响背景，不会实际占据空间 (内容盒不会垂直方向移动)</p></li><li><p>边框</p><p> 水平方向有效，垂直方向可以看见效果，但不会实际占据空间(内容盒不会垂直方向移动)</p></li><li><p>外边距</p><p> 水平方向有效，垂直方向不会实际占据空间(内容盒不会垂直方向移动)</p></li></ol><h2 id="行块盒"><a href="#行块盒" class="headerlink" title="行块盒"></a>行块盒</h2><p><code>display: inline-block</code> 的盒子</p><ol><li>不独占一行</li><li>盒模型中所有尺寸都有效</li></ol><h2 id="空白折叠"><a href="#空白折叠" class="headerlink" title="空白折叠"></a>空白折叠</h2><p>空白折叠发生在行盒(行块盒)内部或行盒之间(行块盒)</p><h2 id="可替换元素和非可替换元素"><a href="#可替换元素和非可替换元素" class="headerlink" title="可替换元素和非可替换元素"></a>可替换元素和非可替换元素</h2><p>大部分元素页面上显示的结果取决于元素内容，称为<strong>非可替换元素</strong></p><p>少部分元素页面上显示的结果取决于元素属性，称为<strong>可替换元素</strong></p><p>可替换元素： img video audio</p><p>绝大部分可替换元素为行盒</p><p>可替换元素类似于行块盒，盒模型中所有尺寸都有效。</p><p>图片<code>img</code>特殊性属性：<code>object-fit</code></p><pre><code>- fill : 默认值，表示填充，不能保证图片的宽高比- cover: 保证填充满区域并保持宽高比，但会丢失部分图片信息- contain: 保持图片宽高比并显示图片所有信息</code></pre><h1 id="常规流"><a href="#常规流" class="headerlink" title="常规流"></a>常规流</h1><p>盒模型： 规定单个盒子的规则</p><p>视觉格式化模型(布局规则)： 页面中的多个盒子排列规则</p><p>视觉格式化模型大体上将页面中盒子的排列分为三种方式</p><ol><li>常规流</li><li>浮动</li><li>定位</li></ol><h2 id="常规流布局"><a href="#常规流布局" class="headerlink" title="常规流布局"></a>常规流布局</h2><p>常规流、文档流、普通文档流、常规文档流</p><p>所有元素默认情况下都属于常规流布局</p><p>总体规则： 块盒独占一行，行盒水平依次排序</p><p>包含块(containing block): 每个盒子都有它的包含块，包含块决定了盒子的排列区域</p><p>绝大部分情况下： 盒子的包含块为其父元素的内容盒</p><p><strong>块盒</strong></p><ol><li><p>每个块盒的总宽度必须 = 包含块的宽度(父元素内容盒的宽度)</p><p> <strong>以下margin为水平方向的margin</strong></p><p> 宽度的默认值是<code>auto</code>,表示将剩余空间吸收掉</p><p> <code>margin</code>的默认值是<code>0</code>,设置为<code>auto</code>时会根据实际情况计算</p><p> 宽度吸收能力强于<code>margin</code>，当两者为<code>auto</code>时，宽度默认撑满</p><p> 若宽度、边框、内边距、外边距计算后仍然有剩余空间，则剩余空间会被<code>margin-right</code> 全部吸收</p><p> 在常规流中，若要使块盒在包含块中居中，可以先固定宽度，然后左右<code>margin</code>设置为<code>0</code></p></li><li><p>每个块盒垂直方向上的<code>auto</code>值</p><p> <code>height: auto</code>: 适应内容的高度</p><p> <code>margin:auto</code>: 表示为0</p></li><li><p>百分比取值</p><p> <code>padding</code>、<code>宽高</code>、<code>margin</code> 可以取值为百分比</p><p> 以上所有的百分比(垂直方向和竖直方向)都是相对于包含块的宽度，与包含块的高度无关</p><p> 高度的百分比：</p><p> 1). 包含块的高度未设置而是取决于子元素的高度时，设置百分比无效</p><p> 2). 包含块的高度设置为定值时，百分比相对于父元素的高度</p></li><li><p>上下外边距的合并</p><p> 两个常规流块盒，上下外边距相邻会进行合并，取两个外边距最大值</p><p> 父子元素之间外边距相邻时也会出现合并的现象，若不想合并，可以设置父元素的<code>border</code>或者<code>padding</code></p></li></ol><h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><p>视觉格式化模型，大体上将页面中盒子的排列分三种方式：</p><ol><li>常规流</li><li>浮动</li><li>定位</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>文字环绕</li><li>横向排列</li></ol><h2 id="浮动的基本特点"><a href="#浮动的基本特点" class="headerlink" title="浮动的基本特点"></a>浮动的基本特点</h2><p>修改CSS<code>float</code>属性值为:</p><ul><li><code>left</code>: 左浮动，元素靠上靠左</li><li><code>right</code>: 右浮动， 元素靠上靠右</li><li>默认为<code>none</code></li></ul><ol><li>当一个元素设置浮动后，元素必定为块盒(更改display属性为block)</li><li>浮动元素的包含块和常规流一样，为父元素的内容盒</li></ol><h2 id="盒子尺寸"><a href="#盒子尺寸" class="headerlink" title="盒子尺寸"></a>盒子尺寸</h2><ol><li>宽度为<code>auto</code>时，表示适应内容宽度，即宽度由内容撑开</li><li>高度为<code>auto</code>时，与常规流一致，适应内容高度</li><li><code>margin</code>为<code>auto</code>时，表示为0</li><li>边框、内边距、百分比的设置与常规流一样</li></ol><h2 id="盒子排列"><a href="#盒子排列" class="headerlink" title="盒子排列"></a>盒子排列</h2><ol><li>左浮动的盒子靠上靠左</li><li>右浮动的盒子靠上靠右</li><li>浮动盒子在包含块中排列，会避开常规流盒子</li><li>常规流块盒在排列时会无视浮动盒子</li><li>行盒排列时会避开浮动盒子</li><li>浮动盒子不会发生外边距合并</li></ol><h2 id="高度坍塌"><a href="#高度坍塌" class="headerlink" title="高度坍塌"></a>高度坍塌</h2><p>高度坍塌根源： 常规流盒子的自动高度在计算时，不会考虑浮动盒子</p><p>解决方式： 清除浮动，涉及CSS属性<code>clear</code>,取值为：</p><ul><li>默认值: none</li><li><code>left</code>: 清除左浮动，该元素必须出现在前面所有左浮动盒子的下方</li><li><code>right</code>: 清除右浮动，该元素必须出现在前面所有右浮动盒子的下方</li><li><code>both</code>: 清除所有浮动，该元素必须出现在前面所有浮动盒子的下方</li></ul><p>方案1：</p><p>在<strong>浮动元素后面</strong>添加空元素，为其设置样式<code>clear: both</code></p><p>方案2： </p><pre><code>为发生高度坍塌的容器添加伪元素： <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><hr><p>参考视频</p><p> <a href="https://www.bilibili.com/video/av57100756?from=search&amp;seid=2646463889570770154" target="_blank" rel="noopener">https://www.bilibili.com/video/av57100756?from=search&amp;seid=2646463889570770154</a> (2019年 HTML+CSS 零基础权威入学宝典【渡一教育】p16~p58)</p>]]></content>
      
      <categories>
          
          <category> web,CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> web </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vsCode</title>
      <link href="/2019/10/13/IDEs/vsCode/"/>
      <url>/2019/10/13/IDEs/vsCode/</url>
      <content type="html"><![CDATA[<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>安装主题插件，个人偏好 <code>One Dark Pro</code></p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="键入提示"><a href="#键入提示" class="headerlink" title="键入提示"></a>键入提示</h2><p>vsCode安装成功后，内置了Emmet插件，用于对一些代码进行补全</p><p><code>h1*6 + tab/enter键</code>: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>h1*6&gt;{1级标题} + tab/enter键</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>h$*6&gt;{$级标题} + tab/enter键</code>: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>3级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>4级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>5级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>6级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>lorem</code>： 乱数假文，没有任何实际含义的数字</p><p>例如： </p><p><code>p*6&gt;lorem + tab/enter键</code> ： 生成六段乱数假文，用于写静态页面时测试排版</p><p><code>p*6&gt;lorem1 + tab/enter键</code>： 生成六段乱数假文，每段只有一个单词</p><p><code>p*6&gt;lorem1000 + tab/enter键</code>： 生成六段乱数假文，每段只有1000个单词</p><p><code>(h2&gt;{章节1})+p&gt;lorem</code> : </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>章节1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Sit veritatis perferendis sint ipsa consectetur eligendi fugiat magni officiis! Nisi repellendus dignissimos dolorem a adipisci odit omnis, id nobis in quod.   </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>(h2[id=&quot;chapter$&quot;]&gt;{章节$})*6</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"chapter1"</span>&gt;</span>章节1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"chapter2"</span>&gt;</span>章节2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"chapter3"</span>&gt;</span>章节3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"chapter4"</span>&gt;</span>章节4<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"chapter5"</span>&gt;</span>章节5<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"chapter6"</span>&gt;</span>章节6<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h2><p><code>ctrl + enter键</code>： 光标切换至下一行<br><code>ctrl + shift + enter键</code>： 光标切换至上一行</p><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><p>按住鼠标中间上下移动，可将光标选中多行进行编辑</p><hr>]]></content>
      
      <categories>
          
          <category> IDEs, vsCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEs </tag>
            
            <tag> vsCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>uni-app</title>
      <link href="/2019/08/25/computerLanguage/web/uni-app/"/>
      <url>/2019/08/25/computerLanguage/web/uni-app/</url>
      <content type="html"><![CDATA[<h1 id="uni-app笔记"><a href="#uni-app笔记" class="headerlink" title="uni-app笔记"></a>uni-app笔记</h1><h2 id="uni-app介绍"><a href="#uni-app介绍" class="headerlink" title="uni-app介绍"></a>uni-app介绍</h2><p><code>uni-app</code> 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="下载编辑器HBuilderX"><a href="#下载编辑器HBuilderX" class="headerlink" title="下载编辑器HBuilderX"></a>下载编辑器HBuilderX</h3><p>HBuilderX，以下简称HX， HX是轻量编辑器和强大IDE的完美结合体。敏捷的性能，清爽的界面，强大的功能和于一身。HX是通用的前端开发工具，但为uni-app做了特别强化。<br>下载App开发版，可开箱即用；如下载标准版，在运行或发行uni-app时，会提示安装uni-app插件，插件下载完成后方可使用。因此，直接下载APP版比较方便。</p><p>下载地址： <a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener">https://www.dcloud.io/hbuilderx.html</a></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><h2 id="页面样式与布局"><a href="#页面样式与布局" class="headerlink" title="页面样式与布局"></a>页面样式与布局</h2><p>flex布局？</p><p>尺寸和单位： H5适配，宽度使用百分比，高度使用px<br>uniapp 基准宽度为750px，设计稿1px与框架样式1px转换公式： 设计稿 1px / 设计稿基准宽度 = 框架样式 1px / 750px</p><p>内联样式，直接在页面使用style,写在app.vue会应用于所有页面</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="pages-json"><a href="#pages-json" class="headerlink" title="pages.json"></a>pages.json</h3><h4 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"pages"</span>: [ //pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"path"</span>: <span class="string">"pages/index/index"</span>,</span><br><span class="line"><span class="attr">"style"</span>: &#123;</span><br><span class="line"><span class="attr">"navigationBarTitleText"</span>: <span class="string">"uni-app"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"globalStyle"</span>: &#123;</span><br><span class="line">"navigationBarTextStyle": "black",// 导航栏文字颜色</span><br><span class="line">"navigationBarTitleText": "uni-app",</span><br><span class="line">"navigationBarBackgroundColor": "#F8F8F8",</span><br><span class="line">"backgroundColor": "#F8F8F8"</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pages</code>每新建一个页面需要配置一次，放在第一个表示入口页面<br><code>pages.styles</code> 每个页面个性化背景颜色等配置</p><h4 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h4><p>color: 文字颜色<br>selectedColor: 选中颜色<br>list: 配置文件路径、图标、名称等</p><p>最多只能放五个小图标</p><h4 id="condition"><a href="#condition" class="headerlink" title="condition"></a>condition</h4><p>启动模式配置，仅开发期间生效，用户检查传值？</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h3><p><code>App.vue</code>文件中的<code>onLaunch</code> <code>onShow</code> <code>onHide</code> 表示的是整个应用的生命周期，进入应用–&gt;显示应用–&gt;关闭应用</p><p><code>onLaunch</code>全局只触发一次，可在此处获取用户操作的场景值，如进入主程序、扫码进入程序…</p><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><p>每个页面自己的生命周期：  <code>onLoad</code> <code>onReady</code> <code>onShow</code> <code>onHide</code> 等</p><p><code>onLoad</code>： 页面初始化，执行一次</p><p><code>onShow</code>: 页面进入执行，进入多次，执行多次</p><p><code>onReady</code>: 页面加载完毕，执行一次</p><p><code>onHide</code>: 页面离开执行，离开多次，执行多次</p><p><code>onPullDownRefresh</code>: 监听用户下拉动作</p><pre><code>- 需要在 `pages.json` 里，找到的当前页面的`pages`节点，并在 `style` 选项中开启 `enablePullDownRefresh`。- 当处理完数据刷新后，`uni.stopPullDownRefresh` 可以停止当前页面的下拉刷新。</code></pre><p><code>onShareAppMessage</code>: 用户点击右上角分享</p><h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><p>写在组件中。</p><p><code>beforeMount</code>: 在挂载开始之前被调用</p><p><code>mounted</code>: 挂载到实例上之后调用</p><h2 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h2><h3 id="跳转至tabbar中配置的页面"><a href="#跳转至tabbar中配置的页面" class="headerlink" title="跳转至tabbar中配置的页面"></a>跳转至tabbar中配置的页面</h3><p><code>uni.switchTab(OBJECT)</code></p><p><code>OBJECT</code>参数: </p><ul><li><p><code>url</code> </p><p>  需要跳转的 tabBar 页面的路径（需在 pages.json 的 tabBar 字段定义的页面），路径后不能带参数</p></li><li><p><code>success</code>  </p><p>  接口调用成功的回调函数</p></li><li><p><code>fail</code> </p><p>  接口调用失败的回调函数</p></li><li><p><code>complete</code></p><p>  接口调用结束的回调函数（调用成功、失败都会执行）</p></li></ul><h3 id="跳转至非tabbar中配置的页面"><a href="#跳转至非tabbar中配置的页面" class="headerlink" title="跳转至非tabbar中配置的页面"></a>跳转至非tabbar中配置的页面</h3><h4 id="navigateTo"><a href="#navigateTo" class="headerlink" title="navigateTo"></a>navigateTo</h4><p><code>uni.navigateTo(OBJECT)</code></p><p>不关闭当前页，跳转至新页面。如列表页跳到详情页</p><p><code>OBJECT</code>参数： </p><ul><li><p><code>url</code>    </p><p>  需要跳转的应用内非<code>tabBar</code>的页面的路径 , 路径后可以带参数。<br>  参数与路径之间使用?分隔，参数键与参数值用=相连，不同参数用&amp;分隔；</p></li><li><p><code>animationType</code>    </p><p>  默认值为<code>pop-in</code>，表示窗口显示的动画效果</p></li><li><p><code>animationDuration</code></p><p>  窗口动画持续时间，单位为ms</p></li><li><p><code>success</code>    </p><p>  接口调用成功的回调函数    </p></li><li><p><code>fail</code></p><p>  接口调用失败的回调函数    </p></li><li><p><code>complete</code></p><p>  接口调用结束的回调函数（调用成功、失败都会执行）</p></li></ul><h4 id="redirectTo"><a href="#redirectTo" class="headerlink" title="redirectTo"></a>redirectTo</h4><p><code>uni.redirectTo(OBJECT)</code></p><p>关闭当前页面，跳转新页面</p><h2 id="模板语法和数据绑定"><a href="#模板语法和数据绑定" class="headerlink" title="模板语法和数据绑定"></a>模板语法和数据绑定</h2><p>声明在data中的数据是响应式绑定</p><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>使用 <code>v-for</code>属性</p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>使用 <code>v-if</code> 或 <code>v-hidden</code>属性</p><p><code>v-if</code> 根据条件进行渲染<br><code>v-hidden</code> 根据条件进行展示，类似于<code>v-show</code></p><h2 id="class-和-style-的绑定"><a href="#class-和-style-的绑定" class="headerlink" title="class 和 style 的绑定"></a>class 和 style 的绑定</h2><h3 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h3><p>class支持的语法 <code>:class</code><br>style支持的语法 <code>:style</code></p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>事件映射表：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>uni-app中没有什么默认事件，比如submit不会自动提交</p><h2 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h2><p><code>view</code> : 视图区域<br><code>scroll-view</code> : 滚动区域<br><code>swiper</code> : 轮播区域</p><h2 id="uni-app中的请求"><a href="#uni-app中的请求" class="headerlink" title="uni-app中的请求"></a>uni-app中的请求</h2><hr><p>官方地址： <a href="https://uniapp.dcloud.io/README" target="_blank" rel="noopener">https://uniapp.dcloud.io/README</a></p><p>参考视频: <a href="https://www.bilibili.com/video/av48272338?from=search&amp;seid=7223491785740158297" target="_blank" rel="noopener">https://www.bilibili.com/video/av48272338?from=search&amp;seid=7223491785740158297</a></p>]]></content>
      
      <categories>
          
          <category> web </category>
          
          <category> vue </category>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> web </tag>
            
            <tag> vue </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle数据库</title>
      <link href="/2019/07/24/computerLanguage/database/oracle/"/>
      <url>/2019/07/24/computerLanguage/database/oracle/</url>
      <content type="html"><![CDATA[<h1 id="Oracle的安装"><a href="#Oracle的安装" class="headerlink" title="Oracle的安装"></a>Oracle的安装</h1><h2 id="数据库和数据仓库"><a href="#数据库和数据仓库" class="headerlink" title="数据库和数据仓库"></a>数据库和数据仓库</h2><p>数据库： 对数据进行持久化存储，将数据直接存储到磁盘</p><ul><li><p>关系型数据库： </p><ul><li><p>Mysql(最常用)</p></li><li><p>Oracle(最安全)</p></li><li><p>QLserver(.net)</p></li><li><p>Db2(金融、银行)</p></li></ul></li></ul><h1 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h1><ol><li>登录：sqlplus / as sysdba</li><li><p>创建表空间：<code>create tablespace aezocn datafile &#39;d:/tablespace/aezo&#39; size 800m extent management local segment space management auto;</code> ，需要先建好路径 <code>d:/tablespace</code> ，最终会在该目录下建一个 AEZO 的文件(表空间之后可以修改)</p><ul><li>删除表空间：<code>drop tablespace aezocn including contents and datafiles;</code></li></ul></li><li>创建用户：<code>create user aezo identified by aezo default tablespace aezocn;</code></li><li>授权<ul><li><code>grant create session to aezo;</code></li><li><code>grant unlimited tablespace to aezo;</code></li><li><code>grant dba to aezo;</code> 导入导出时，只有dba权限的账户才能导入由dba账户导出的数据，因此不建议直接设置用户为dba</li></ul></li></ol><h1 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h1><p><code>.dmp</code>适合大数据导出，<code>.sql</code>适合小数据导出(表中含有CLOB类型字段则不能导出)</p><h2 id="命令行-4"><a href="#命令行-4" class="headerlink" title="命令行 ^4"></a>命令行 ^4</h2><ul><li>输入 <code>imp/exp</code> 用户名/密码 可根据提示导入导出。直接<code>cmd</code>运行。</li><li>成功提示 <code>Export terminated successfully [with/without warnings]</code>；失败提示 <code>Export terminated unsuccessfully [with/without warnings]</code></li></ul><h2 id="dmp格式导出导入-cmd"><a href="#dmp格式导出导入-cmd" class="headerlink" title="dmp格式导出导入(cmd)"></a>dmp格式导出导入(cmd)</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><h4 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h4><ul><li><p><code>exp system/manager file=d:/exp.dmp owner=scott</code> 导出scott用户的所有对象，前提是system有相关权限</p></li><li><p>远程导出：此时<code>system/manager</code>默认连接的是本地数据库。如果使用<code>exp system/manager@remote_orcl file=d:/exp.dmp owner=scott</code> (<code>remote_orcl</code>为在本地建立的远程数据库网络服务名. 即tnsnames.ora里面的配置项名称)则可导出远程数据库的相关数据，下同。或者<a href="mailto:`system/manager@192.168.1.1" target="_blank" rel="noopener">`system/manager@192.168.1.1</a>:1521/orcl`</p><ul><li>加上 <code>compress=y</code> 表示压缩数据</li><li>加上 <code>rows=n</code> 表示不导出数据行，只导出结构</li></ul></li></ul><h4 id="表模式"><a href="#表模式" class="headerlink" title="表模式"></a>表模式</h4><ul><li><p><code>exp scott/tiger file=d:/exp.dmp tables=emp</code> 导出<code>scott</code>的<code>emp</code>表</p><ul><li>导出其他用户的表：<code>exp system/manager file=d:/exp.dmp tables=scott.emp</code>, <code>scott.dept</code> 导出<code>scott</code>的<code>emp</code>、<code>dept</code>表，用户<code>system</code>需要相关权限</li><li><p>导出部分表数据：<code>exp scott/tiger file=d:/exp.dmp tables=emp query=\&quot; where ename like &#39;%AR%&#39;\&quot;</code></p></li><li><p>常见错误(EXP-00011)：原因为11g默认创建一个表时不分配segment，只有在插入数据时才会产生。</p></li></ul></li><li><p>导出全部：<code>exp system/manager file=d:/exp.dmp full=y</code></p><ul><li>用户 <code>system/manager</code> 必须具有相关权限</li><li>导出的是整个数据库，包括所有的表空间</li></ul></li></ul><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><h4 id="用户模式："><a href="#用户模式：" class="headerlink" title="用户模式："></a>用户模式：</h4><ul><li><code>imp system/manager file=d:/exp.dmp fromuser=scott touser=aezo ignore=y</code><ul><li><code>ignore=y</code>忽略创建错误, 不少情况下要先将表彻底删除，然后导入</li></ul></li></ul><h4 id="表模式-1"><a href="#表模式-1" class="headerlink" title="表模式"></a>表模式</h4><ul><li><p><code>imp system/manager file=d:/exp.dmp fromuser=scott tables=emp, dept touser=aezo ignore=y</code></p><ul><li>将<code>scott</code>的表<code>emp</code>、<code></code>dept导入到用户<code>aezo</code></li><li>此处 <code>file/fromuser/touser</code> 都可以指定多个</li></ul></li><li><p>导入全部：<code>imp system/manager file=d:/exp.dmp full=y ignore=y</code></p><ul><li>用户 <code>system/manager</code> 必须具有相关权限</li><li>导入的是整个数据库，包括所有的表空间</li></ul></li></ul><h1 id="Oracle报错记录"><a href="#Oracle报错记录" class="headerlink" title="Oracle报错记录"></a>Oracle报错记录</h1><h2 id="EXP-00011"><a href="#EXP-00011" class="headerlink" title="EXP-00011"></a>EXP-00011</h2><p><code>EXP-00011: XXX does not exist</code></p><ul><li>报错内容： 表XXX不存在</li><li>报错场景： 直接用命令行导出单张表时，执行命令 <code>exp user/psw file=d:/exp.dmp tables=emp;</code> 提示表<code>emp</code>不存在，而实际查询时此表存在且有数据</li><li>报错原因之一：<code>exp</code>执行语句多加了一个’<code>;</code>‘ 网上还有记录其它原因，但实际只遇到的是多加了分号，所以暂不记他人的情况</li><li>解决方案： 将命令中的分号去掉就好啦</li></ul><h2 id="ORA-01940"><a href="#ORA-01940" class="headerlink" title="ORA-01940"></a>ORA-01940</h2><p><code>ORA-01940: cannot drop a user that is currently connected</code></p><ul><li>报错内容： 无法删除当前已连接用户</li><li>报错场景： 执行<code>drop user</code>时出现此报错</li><li>报错原因： 有用户在连接，无法执行<code>drop</code></li><li>解决方案： <ul><li>锁定用户: <code>alter user XXX account lock;</code></li><li>查询进程号: <code>SELECT * FROM V$SESSION WHERE USERNAME=&#39;xxx&#39;;</code></li><li>删除对应的进程: <code>alter system kill session &#39;xx,xx&#39;;</code></li><li>删除对应用户: <code>drop user xx cascade;</code></li></ul></li></ul><h1 id="Oracle-sql语句"><a href="#Oracle-sql语句" class="headerlink" title="Oracle sql语句"></a>Oracle sql语句</h1><h2 id="将查询结果存入新表"><a href="#将查询结果存入新表" class="headerlink" title="将查询结果存入新表"></a>将查询结果存入新表</h2><p><code>create table 临时表名 as select * from table_name</code></p><ul><li><code>select * from table_name</code>表示得到查询结果的查询语句</li><li>此方法无需先创建表设置字段，而是会将查询结果的字段和字段类型直接赋予新表</li><li>此方法创建的不属于临时表，可以根据需求作为缓存表，用完可以删除</li></ul><hr><p>参考文章</p><p><a href="http://blog.aezo.cn/2016/10/12/db/oracle-dba/" target="_blank" rel="noopener">http://blog.aezo.cn/2016/10/12/db/oracle-dba/</a>  (aezo blog)</p>]]></content>
      
      <categories>
          
          <category> Database, Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> Database </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端基础之HTML5</title>
      <link href="/2019/07/21/computerLanguage/web/html5/"/>
      <url>/2019/07/21/computerLanguage/web/html5/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="超-基础概念（各种缩写）"><a href="#超-基础概念（各种缩写）" class="headerlink" title="超~~~基础概念（各种缩写）"></a>超~~~基础概念（各种缩写）</h2><p>HTML: Hyper Text Markup Language 超文本标记语言；定义网页中有什么<br>CSS： Cascading Style Sheets 层叠样式表；定义网页中的东西长什么样</p><p>VSCode： Visual Studio Code 通用编辑器<br>MD： MarkDown，文档格式标准</p><p>Web： 互联网<br>W3C: 万维网联盟，非营利性组织: w3.org 为互联网提供各种标准<br>XML: Extension markup language 可扩展标记语言，用于定义文档结构<br>MDN： Mozilla Development Network, Mozilla开发者社区</p><h2 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h2><p>HTML是W3C组织定义的语言标准： 用于描述页面结构的语言</p><h2 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h2><p>CSS是W3C定义的语言标准： CSS用于描述页面结构的语言</p><h2 id="执行HTML-CSS"><a href="#执行HTML-CSS" class="headerlink" title="执行HTML CSS"></a>执行HTML CSS</h2><p>HTML&amp;CSS –&gt; 浏览器内核 –&gt; 页面</p><p>浏览器：由shell(外壳)和core(内核 JS执行引擎、渲染引擎)组成</p><p>常见浏览器(包含自己的内核)： </p><ol><li>IE: Trident</li><li>Firefox: Gecko</li><li>Chrome: Webkit / Blink</li><li>Safari: Webkit</li><li>Opera: Presto(已弃用) / Blink</li></ol><h2 id="版本和兼容性"><a href="#版本和兼容性" class="headerlink" title="版本和兼容性"></a>版本和兼容性</h2><p>HTML5、CSS3</p><p>HTML5： 2014年发布，目前浏览器基本都兼容</p><p>CSS3： 目前还未定制完成</p><p>XHTML： 可以认为是HTML的一种版本，完全符合XML的规范(HTML5发布后，已弃用)</p><h1 id="第一个页面"><a href="#第一个页面" class="headerlink" title="第一个页面"></a>第一个页面</h1><p>Emmet插件： 自动生成Html代码的插件，VSCode自带此插件</p><p>快捷键：输入<code>!</code>后按<code>tab</code>键会自动生成html5代码；输入标签后按<code>tab</code>键可补全标签代码</p><h2 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h2><p>注释为diamante的阅读者提供帮助，注释不参与运行</p><p>使用 <code>&lt;!-- --&gt;</code> 进行注释，快捷键：<code>ctrl + /</code></p><h2 id="元素-标签、标记、element"><a href="#元素-标签、标记、element" class="headerlink" title="元素(标签、标记、element)"></a>元素(标签、标记、element)</h2><p>元素 = 起始标记(begin tag) + 结束标记(end tag) + 元素内容(页面上需要显示的内容) + 元素属性(描写元素的额外信息)</p><ol><li><p>空元素： 没有结束标记的元素，如： <code>&lt;img/&gt;</code> <code>&lt;input/&gt;</code></p><p> 空元素的两种写法：</p> <figure class="highlight plain"><figcaption><span>charset</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    ``` &lt;meta charset=&quot;UTF-8&quot;/&gt;``` </span><br><span class="line"></span><br><span class="line">    html5中空元素可以不加后面的`/`</span><br><span class="line"></span><br><span class="line">2. 元素属性 = 属性名 + 属性值</span><br><span class="line"></span><br><span class="line">    属性的分类：</span><br><span class="line"></span><br><span class="line">    - 局部属性： 某些元素特有的属性</span><br><span class="line">    - 全局属性： 所有元素通用</span><br><span class="line"></span><br><span class="line">## 元素的嵌套</span><br><span class="line"></span><br><span class="line">父元素、子元素、祖先元素、后代元素、兄弟元素(拥有同一父元素)</span><br><span class="line"></span><br><span class="line">## 标准文档结构</span><br><span class="line"></span><br><span class="line">文档声明：告诉浏览器当前文档使用的HTML标准是HTML5。不写文档声明将导致浏览器进入怪异渲染模式</span><br><span class="line"></span><br><span class="line">    ```html</span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure></li></ol><p>根元素(<code>&lt;html&gt;</code>)： 一个页面最多只能有一个，且该元素是所有元素的父元素或祖先元素。HTML5中没有强制要求写此元素，但最好写上以兼容以往版本。其中lang属性为全局属性，表示该元素内部使用的文字是哪种自然语言，声明此属性是为了触发浏览器中翻译、语音等插件。</p><pre><code>`lang=&quot;cmn-hans&quot;`表示中国大陆官方简体中文，`lang=&quot;zh-CN&quot;`已过时。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><p>文档头(<code>&lt;head&gt;</code>): 文档头内部的内容不会显示到页面上</p><p>文档的元数据(<code>&lt;meta&gt;</code>)： 附加信息</p><p>charset: 指定网页内容编码</p><p>计算机中，电子元件接触到低压电(0~2V)时，用0表示,接触到高压电(2~5 V)时，用1表示。因此计算机中只能存储数字</p><p>文字和数字进行对应</p><p>比如： a - 97, A - 64</p><p>此种规律(字典)叫做字符编码表，GB2312 大陆用的编码表  GBK 台湾用的编码表  UTF-8 是unicode编码的一个版本</p><p>Unicode是万国码 将全世界的文字融合 有很多版本 UTF-8 是其中之一</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> <span class="comment">&lt;!-- 文档声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span> <span class="comment">&lt;!-- 根元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="comment">&lt;!-- 文档头 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span> <span class="comment">&lt;!-- 元数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span> <span class="comment">&lt;!-- 用于适配手机端 --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span><span class="comment">&lt;!-- 用于解决IE浏览器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="comment">&lt;!-- 网页标题，显示在浏览器标签，不显示在网页内容中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="comment">&lt;!-- 文档体，页面上所有要参与显示的元素都应该放在文档体中 --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h1><h2 id="什么是语义化"><a href="#什么是语义化" class="headerlink" title="什么是语义化"></a>什么是语义化</h2><ol><li>每一个HTML元素都有具体的含义</li></ol><p>a元素： 超链接<br>p元素： 段落<br>h1元素： 一级标题</p><ol start="2"><li>所有元素与展示效果无关</li></ol><p>元素展示到页面的效果，应该由CSS决定</p><p>因为浏览器带有默认的CSS样式，所以每个元素有一些默认样式</p><p><strong>重要： 选择什么元素，取决于内容的含义，而不是显示出的效果</strong></p><h2 id="为什么需要语义化？"><a href="#为什么需要语义化？" class="headerlink" title="为什么需要语义化？"></a>为什么需要语义化？</h2><ol><li>为了搜索引擎优化(SEO)</li></ol><p>搜索引擎： 百度、搜搜、Bing、Google</p><p>每隔一段时间，搜索引擎会从整个互联网中，抓取网页源代码，搜索引擎根据语义化标签来理解网页，语义化越好，搜索引擎就越能理解网页</p><ol start="2"><li>为了让浏览器理解网页</li></ol><p>阅读模式、语音模式</p><h1 id="文本元素"><a href="#文本元素" class="headerlink" title="文本元素"></a>文本元素</h1><p>HTML5中支持的元素： HTML5元素周期表 (<a href="http://www.xuanfengge.com/funny/html5/element/" target="_blank" rel="noopener">http://www.xuanfengge.com/funny/html5/element/</a>)</p><h2 id="h"><a href="#h" class="headerlink" title="h"></a>h</h2><p>标题： head</p><p>h1~h6： 表示一级标题到六级标题</p><h2 id="p"><a href="#p" class="headerlink" title="p"></a>p</h2><p>段落: paragraphs</p><h2 id="span【无语义】"><a href="#span【无语义】" class="headerlink" title="span【无语义】"></a>span【无语义】</h2><p>没有语义，仅用于设置样式</p><p>某些元素在显示时会独占一行(Html5之前称为块级元素,h5已弃用此说法)，而某些元素不会(Html5之前称为行级元素，h5已弃用此说法)；</p><h2 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h2><p>预格式化文本元素</p><p>空白折叠： 在源代码中的连续空白字符（空格、换行、制表tab），在页面显示时会被折叠成一个空格</p><p>在pre元素中的内容不会出现空白折叠，即在pre元素内部出现的内容，会按照源代码格式显示到页面上</p><p>该元素通常用于在网页中显示一些代码。</p><p>pre元素功能的本质： 它有一个默认的CSS属性 <code>white-space: pre</code></p><p>显示代码时，通常外面套code元素，code表示代码区域。</p><h1 id="HTML实体"><a href="#HTML实体" class="headerlink" title="HTML实体"></a>HTML实体</h1><p>实体字符， HTML Entity</p><p>通常用于在页面中现实一些特殊符号。</p><p>书写格式： </p><ol><li>&amp;单词缩写; (常用)</li><li>&amp;#数字;</li></ol><p>常用的实体字符：</p><ul><li>小于符号：</li></ul><p><code>&amp;lt;</code>  (lt是less than 的缩写)<br><code>&amp;#60;</code></p><ul><li>大于符号: </li></ul><p><code>&amp;gt;</code> (gt 是 greater than 的缩写)</p><ul><li>空格符号：</li></ul><p><code>&amp;nbsp;</code> (nbsp 是 non-breaking space 的缩写)</p><ul><li>版权符号 <code>©</code></li></ul><p><code>&amp;copy;</code></p><ul><li><code>&amp;</code>符号</li></ul><p><code>&amp;amp;</code></p><h1 id="a元素"><a href="#a元素" class="headerlink" title="a元素"></a>a元素</h1><p>超链接</p><h2 id="href属性"><a href="#href属性" class="headerlink" title="href属性"></a>href属性</h2><p>hyper reference： 通常表示跳转地址</p><ol><li>普通链接： 跳转地址 (<code>href=&quot;www.baidu.com&quot;</code> 跳转到百度)</li><li><p>锚链接： 跳转某个锚点,需要定义id属性(<code>href=&quot;#id&quot;</code> 定位到当前页面id的位置)</p><p> id属性： 全局属性，表示元素在整个HTML中的唯一标识<br> <code>href=&quot;#&quot;</code> 表示回到顶部</p></li><li><p>功能链接： 点击后，触发某个功能</p></li></ol><ul><li>执行JS代码</li><li>发送邮件,mailto: (要求用户计算机安装有邮件发送软件：exchange)</li><li>拨打电话, tel: (要求用户计算机上安装有拨号软件，或使用的是移动端访问)</li></ul><h2 id="target属性"><a href="#target属性" class="headerlink" title="target属性"></a>target属性</h2><p>表示跳转窗口位置。</p><p>target的取值：</p><ul><li><code>_self</code>: 在当前页面窗口中打开，默认值</li><li><code>_blank</code>: 在新窗口中打开</li></ul><h1 id="路径的写法"><a href="#路径的写法" class="headerlink" title="路径的写法"></a>路径的写法</h1><h2 id="站内资源和站外资源"><a href="#站内资源和站外资源" class="headerlink" title="站内资源和站外资源"></a>站内资源和站外资源</h2><p>站内资源： 当前网站的资源</p><p>站外资源： 非当前网站的资源</p><h2 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h2><p>对站外资源使用绝对路径，对站内资源进行相对路径</p><ol><li>绝对路径</li></ol><p>绝对路径的书写格式：</p><p>url地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">协议名：//主机名:端口号/路径</span><br><span class="line"></span><br><span class="line">schema://host:port/path</span><br></pre></td></tr></table></figure><p>协议名： http、https、file</p><p>主机名： 域名、IP地址</p><p>端口： 如果协议是http协议，默认端口号是80；如果协议是https协议，默认端口号是443； </p><p>当跳转目标和当前页面的协议相同时，可以省略协议</p><ol start="2"><li>相对路径</li></ol><p>以<code>./</code>开头，<code>./</code>表示当前资源所在的目录</p><p>可以书写<code>../</code>表示返回上一级目录</p><p>相对路径中<code>./</code>可以省略</p><h1 id="图片元素"><a href="#图片元素" class="headerlink" title="图片元素"></a>图片元素</h1><h2 id="img元素"><a href="#img元素" class="headerlink" title="img元素"></a>img元素</h2><p>image缩写，空元素</p><p>src属性： source<br>alt属性： 当图片资源失效时，将使用该属性的文字替代图片</p><h2 id="和a元素的联用"><a href="#和a元素的联用" class="headerlink" title="和a元素的联用"></a>和a元素的联用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./xx/xx.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="和map元素联用"><a href="#和map元素联用" class="headerlink" title="和map元素联用"></a>和map元素联用</h2><p>map： 地图</p><p>map的子元素： area</p><p>area属性：</p><p>shape： 形状 circle 圆形 rect 矩形 poly 多边形<br>coords： 坐标 根据shape属性的不同而不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">原点坐标在图片的左上角，横向往右为X轴，纵向向下为Y轴</span><br><span class="line"></span><br><span class="line"> shape=&quot;circle&quot; coords=&quot;X轴坐标,Y轴坐标,圆的半径&quot; </span><br><span class="line"></span><br><span class="line"> shape=&quot;rect&quot; coords=&quot;矩形左上角X轴坐标,矩形左上角Y轴坐标,矩形右下角X轴坐标,矩形右下角Y轴坐标&quot; </span><br><span class="line"></span><br><span class="line"> shape=&quot;poly&quot; coords=&quot;角1的X轴坐标，角1的Y轴坐标，角2的X轴坐标，角2的Y轴坐标...&quot;</span><br></pre></td></tr></table></figure><p><strong>注： 衡量坐标时，为了避免衡量误差，需要使用专业的衡量工具： ps、pxcook 等</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">usemap</span>=<span class="string">"#solarMap"</span> <span class="attr">src</span>=<span class="string">"./xx/xx.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"solarMap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"circle"</span> <span class="attr">coords</span>=<span class="string">""</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="和figure元素联用"><a href="#和figure元素联用" class="headerlink" title="和figure元素联用"></a>和figure元素联用</h2><p>指代、定义，通常用于把图片、图片标题、描述包裹起来</p><p>子元素： figcaption 通常用于包裹图片标题</p><h1 id="多媒体元素"><a href="#多媒体元素" class="headerlink" title="多媒体元素"></a>多媒体元素</h1><p>video 视频</p><p>audio 音频</p><h2 id="video"><a href="#video" class="headerlink" title="video"></a>video</h2><p>controls: 控制控件的显示，取值只能为controls</p><p>某些属性只有两种状态：1. 不写 2. 取值为属性名，这种属性叫做布尔属性</p><p>布尔属性在HTML5中可以不写属性值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">"controls"</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span><span class="comment">&lt;!-- 布尔属性，省略属性值 --&gt;</span></span><br></pre></td></tr></table></figure><p>video中的布尔属性： </p><p>controls 控制控件</p><p>autoplay 自动播放</p><p>muted 静音播放</p><p>loop 循环播放</p><h2 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h2><p>音频和视频的使用完全一致，属性相同</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><ol><li>旧版本的浏览器不支持这两个元素</li></ol><p>对于不支持的浏览器，以前可以换成flash,但由于谷歌浏览器宣布不再支持flash，因此只能提示用户更新浏览器</p><ol start="2"><li>不同的浏览器支持的音频、视频格式可能不一致</li></ol><p>使用<code>&lt;video&gt;</code>的子元素<code>&lt;source&gt;</code>放置多种格式以获得浏览器最好的兼容性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"xxx/xxx.mp4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"xxx/xxx.webm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="列表元素"><a href="#列表元素" class="headerlink" title="列表元素"></a>列表元素</h1><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>ol: ordered list</p><p>li: list item</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">把大象装冰箱，总共分几步？</span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>打开冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>大象进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>关上冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><ul><li><p><code>type</code>(不建议使用)</p><p>1 表示使用数字排列 </p><p>i 表示使用罗马数字排列 </p><p>a表示使用字母排列</p><p><strong>type属性曾经在HTML4被弃用过，但是在HTML5中被重新引入。除非列表中序号很重要（比如法律或技术文件中条目通常被需要所引用），否则请使用 CSS list-style-type 属性代替</strong></p><ul><li><code>reversed</code></li></ul><p>顺序倒叙</p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>ul: unordered list</p><p>li: list item</p><p>无序列表常用于制作菜单或新闻列表</p><h2 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h2><p>通常用于一些术语的定义</p><p>dl: difinition list</p><p>dt: definition title</p><p>dd: definition description</p></li></ul><h1 id="容器元素"><a href="#容器元素" class="headerlink" title="容器元素"></a>容器元素</h1><p>容器元素： 该元素代表一个块区域，内部用于放置其他元素</p><h2 id="div元素"><a href="#div元素" class="headerlink" title="div元素"></a>div元素</h2><p>无语义</p><h2 id="语义化容器元素"><a href="#语义化容器元素" class="headerlink" title="语义化容器元素"></a>语义化容器元素</h2><p>header： 通常用于表示页头，也可以表示文章的头部</p><p>footer: 通常用于表示页脚，也可以表示文章的尾部</p><p>article: 通常用于表示整篇文章</p><p>section: 通常用于表示文章的章节</p><p>aside: 通常用于表示侧边栏(附加信息)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        页头</span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>文章头<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur excepturi, eius deserunt incidunt sint eveniet earum adipisci obcaecati, unde repellendus nam minus minima blanditiis nesciunt quas qui veritatis dicta at.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Amet nobis deserunt facere in nulla consectetur consequatur quos doloremque nam dolor impedit sequi quas veniam, harum, recusandae, tenetur ducimus assumenda. Totam ad repudiandae ipsam ducimus harum recusandae, quaerat eum?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Porro deleniti, corporis totam autem quos inventore quis voluptas, eum ex, molestias eos aperiam vero voluptate error qui a? Ipsam impedit alias odio ab vitae voluptatibus quas suscipit numquam non?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span>文章尾<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span>边侧栏<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        页脚</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="元素包含关系"><a href="#元素包含关系" class="headerlink" title="元素包含关系"></a>元素包含关系</h1><p>以前： 块级元素可以包含行级元素，行级元素不可以包含块级元素，a元素除外</p><p>现在： 元素的包含关系由元素的内容类别决定</p><p>例如，查看h1元素中是否可以包含p元素</p><p>总结：</p><ol><li>容器元素可以包含任何元素</li><li>a元素中几乎可以包含任何元素</li><li>某些元素有固定的子元素(ul&gt;li,ol&gt;li,dl&gt;dt+dd)</li><li>标题元素和段落元素不能相互嵌套，并且不能包含容器元素</li></ol><hr><p>参考视频</p><p> <a href="https://www.bilibili.com/video/av57100756?from=search&amp;seid=2646463889570770154" target="_blank" rel="noopener">https://www.bilibili.com/video/av57100756?from=search&amp;seid=2646463889570770154</a> (2019年 HTML+CSS 零基础权威入学宝典【渡一教育】p1~p15)</p>]]></content>
      
      <categories>
          
          <category> web,html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> web </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue</title>
      <link href="/2019/06/22/computerLanguage/web/vue/"/>
      <url>/2019/06/22/computerLanguage/web/vue/</url>
      <content type="html"><![CDATA[<h1 id="Vue笔记"><a href="#Vue笔记" class="headerlink" title="Vue笔记"></a>Vue笔记</h1><h2 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令"></a><code>v-for</code>指令</h2><p>html代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-<span class="keyword">for</span>=<span class="string">"item in list"</span>&gt; &#123;&#123; item &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><p>javascript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123;<span class="attr">id</span> : <span class="number">1</span>, <span class="attr">name</span>: zs1&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span> : <span class="number">2</span>, <span class="attr">name</span>: zs2&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span> : <span class="number">3</span>, <span class="attr">name</span>: zs3&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span> : <span class="number">4</span>, <span class="attr">name</span>: zs4&#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-for</code>指令除了能遍历数组还能遍历对象，遍历对象时，要写成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-<span class="keyword">for</span>=<span class="string">"(value, key) in user"</span>&gt; 值是:&#123;&#123; value &#125;&#125; --- 键是&#123;&#123; key &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><p>除了value和key之外，在第三个位置还有索引。<code>v-for</code>指令中，<code>in</code>后面可以是普通数组、对象数组、对象、数字，若为数字时，<code>count in 10</code>的<code>count</code>从1开始</p><p>注意事项： </p><ol><li>vue 2.20+ 版本中，使用v-for指令时，需要指定key，保证数据的唯一性</li><li>key属性只能用number或者String</li><li>key在使用时必须使用<code>v-bind</code>属性的形式绑定</li></ol><h2 id="v-if和-v-show指令"><a href="#v-if和-v-show指令" class="headerlink" title="v-if和 v-show指令"></a><code>v-if</code>和 <code>v-show</code>指令</h2><p><code>v-if</code> 每次都会重新删除或创建元素，有较高的切换性能消耗<br><code>v-show</code> 每次不会重新进行DOM的删除和创建操作，只是切换了元素的display:none样式，有较高的初始渲染消耗</p><p>如果元素涉及到频繁的切换，最好不要用<code>v-if</code>,如果元素可能永远不会被显示出来，则推荐使用<code>v-if</code></p><h2 id="数组的新方法"><a href="#数组的新方法" class="headerlink" title="数组的新方法"></a>数组的新方法</h2><p><code>forEach</code> <code>some</code> <code>filter</code> <code>findIndex</code> 都属于数组的新方法，都会对数组中的每一项进行遍历，执行相关操作 </p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="过滤器调用时的格式"><a href="#过滤器调用时的格式" class="headerlink" title="过滤器调用时的格式"></a>过滤器调用时的格式</h3><figure class="highlight javascript"><figcaption><span>&#123;&#123; data | 过滤器的名称 &#125; ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 过滤器的定义语法</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">// 过滤器的第一个参数被定死，永远是管道符`</span>|<span class="string">`前面传递过来的数据</span></span><br><span class="line"><span class="string">Vue.filter('过滤器的名称', function(data) &#123;&#125;)</span></span><br></pre></td></tr></table></figure><p><code>Vue.filter()</code>定义的是全局的过滤器，所有的vm实例共享</p><h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#xx'</span>,</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  methods:&#123;&#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    <span class="comment">// 定义私有过滤器，过滤器两个条件 【过滤器名称和处理函数】</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注： 过滤器调用的时候采用就近原则，如果私有过滤器和全局过滤器名称一致，优先调用私有过滤器</p><h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p>官方文档提供默认的按键修饰符，除此之外还可以自定义按键修饰符(2.x版本)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.config.keyCodes.自定义名称 = 对应键盘码码值</span></span><br><span class="line">Vue.config.keyCodes.f2 = <span class="number">113</span>;</span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>vue中所有的指令，在调用时都以<code>v-</code>开头,自定义指令的时候，指令名称的前面不需要加<code>v-</code>前缀，但是调用时必须加上<code>v-</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用v-derective()定义全局的指令</span></span><br><span class="line">Vue.derective(指令的名称, &#123;</span><br><span class="line">  <span class="comment">// 在每个函数中，第一个参数永远是el,表示被绑定了指令的元素，这个el参数是一个原生的JS对象</span></span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 每当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次</span></span><br><span class="line">    <span class="comment">// 和样式相关的可以放在bind中</span></span><br><span class="line">  &#125;,</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 元素插入到DOM中的时候，会执行insert函数，只触发一次</span></span><br><span class="line">  &#125;,</span><br><span class="line">  updated: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当VNode更新的时候，会执行updated,可能会触发多次</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更多钩子函数的参数具体可见官方文档: <a href="https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0</a></p><h3 id="自定义私有指令"><a href="#自定义私有指令" class="headerlink" title="自定义私有指令"></a>自定义私有指令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#xx'</span>,</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  methods:&#123;&#125;,</span><br><span class="line">  directive: &#123;</span><br><span class="line">    <span class="comment">// 定义私有指令</span></span><br><span class="line">    指令名: &#123;</span><br><span class="line">      bind: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="函数简写"><a href="#函数简写" class="headerlink" title="函数简写"></a>函数简写</h3><p>在很多时候，你可能想在 bind 和 update 时触发相同行为，而不关心其它的钩子，可以简写成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'color-swatch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  el.style.backgroundColor = binding.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vue实例的生命周期"><a href="#Vue实例的生命周期" class="headerlink" title="Vue实例的生命周期"></a>Vue实例的生命周期</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>生命周期钩子 = 生命周期函数 = 生命周期时间 = Vue实例从创建、运行到销毁期间运行的各种各样的事件</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>创建期间的生命周期函数、运行期间的生命周期函数、销毁创建期间的生命周期函数</p><p><img src="/data/img/vue/lifecycle.png" alt="Vue生命周期图解"> </p><h4 id="创建生命周期"><a href="#创建生命周期" class="headerlink" title="创建生命周期"></a>创建生命周期</h4><p>第一个生命周期函数: <code>beforeCreate()</code>,与<code>data</code>和<code>methods</code>平级，在实例完全被创建出来之前执行，执行时，<code>data</code>和<code>methods</code>都还没初始化</p><p>第二个生命周期函数： <code>created()</code>,与<code>data</code>和<code>methods</code>平级，此时<code>data</code>和<code>methods</code>已初始化，可以操作<code>data</code>中的数据，也可以调用<code>methods</code>中的方法</p><p>第三个生命周期函数： <code>beforeMount()</code>,表示模板已经在内存中编译完成，但尚未把模板输出到页面中。<code>beforeMount()</code>执行时，页面中的元素没有被真正替换过来，只是之前写的一些模板字符，如在<code>beforeMount()</code>中打印对应页面中的<code>javascript </code>出现的结果是插值表达式<code>javascript </code>，而不是<code>data</code>中定义的<code>msg</code>的值</p><p>第四个生命周期函数: <code>mounted()</code>，表示内存中的模板已经挂载到了页面中，用户可以看到渲染好的页面，在<code>mounted()</code>中打印对应页面中的<code>javascript </code>不再是差值表达式，而是<code>data</code>中定义的<code>msg</code>的值；<code>mounted()</code>是实例创建期间的最后一个生命周期函数，当执行完<code>mounted()</code>就表示实例已经被完全创建好了，此时组件已经脱离了创建阶段，进入运行阶段。如果要通过某些插件操作页面上的DOM节点，最早要在<code>mounted()</code>中进行。</p><h4 id="运行期间的生命周期"><a href="#运行期间的生命周期" class="headerlink" title="运行期间的生命周期"></a>运行期间的生命周期</h4><p>运行期间的生命周期函数的触发条件是数据被改变</p><ul><li><p><code>beforeUpdate()</code> 界面还没有被更新，页面上显示的数据还是旧数据，但data中的数据被更新了，此时页面尚未和最新数据保持同步</p></li><li><p><code>updated()</code>,执行时，页面和data数据已经保持同步了，都是最新的</p></li></ul><h4 id="销毁阶段的生命周期"><a href="#销毁阶段的生命周期" class="headerlink" title="销毁阶段的生命周期"></a>销毁阶段的生命周期</h4><ul><li><p><code>beforeDestory()</code> 当执行此钩子函数时，Vue实例已经从运行阶段进入到了销毁阶段，此时所有的<code>data</code>和所有的<code>methods</code>以及过滤器、指令都处于可用状态，还没有真正执行销毁</p></li><li><p><code>destoryed()</code> 此时组件中所有的<code>data</code>和所有的<code>methods</code>以及过滤器、指令都处于不可用状态</p></li></ul><h2 id="vue-resource实现get-post-jsonp请求"><a href="#vue-resource实现get-post-jsonp请求" class="headerlink" title="vue-resource实现get,post,jsonp请求"></a>vue-resource实现get,post,jsonp请求</h2><p>除了vue-resource之外，还可以使用叫做<code>axios</code>的第三方包实现数据的请求。目前使用<code>axios</code>比较多，<code>vue-resource</code>此部分只做了解，嘿嘿~</p><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.get(请求地址).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过result.body拿到服务器返回的成功数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.post(请求地址,请求数据,&#123; <span class="attr">emulateJSON</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求数据不能省略，手动发起的post请求默认没有表单格式，所以有的服务器接收不了</span></span><br><span class="line">    <span class="comment">// 将post的第三个参数 &#123; emulateJSON: true &#125;设置提交内容为普通表达数据格式，防止以上情况发生</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jsonp请求"><a href="#jsonp请求" class="headerlink" title="jsonp请求"></a>jsonp请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.jsonp(请求地址).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="Vue中的动画-此部分先跳过，用到时再看"><a href="#Vue中的动画-此部分先跳过，用到时再看" class="headerlink" title="Vue中的动画(此部分先跳过，用到时再看)"></a>Vue中的动画(此部分先跳过，用到时再看)</h2><h3 id="使用第三方类实现动画-animate-css"><a href="#使用第三方类实现动画-animate-css" class="headerlink" title="使用第三方类实现动画(animate.css)"></a>使用第三方类实现动画(animate.css)</h3><p>引入<code>animate.css</code>后直接使用</p><h3 id="动画钩子函数"><a href="#动画钩子函数" class="headerlink" title="动画钩子函数"></a>动画钩子函数</h3><ol><li>动画钩子的第一个参数el，表示要执行动画的DOM元素，那个是原生的JS DOM 对象，可认为是通过document.getElementById(‘’)方式获取到的原生Js对象</li><li>beforeEnter表示动画入场之前，此时，动画尚未开始，可以在beforeEnter中，设置元素开始动画之前的起始样式</li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>为了拆分Vue实例的代码量，能以不同的组件来划分不同的功能模块。</p><blockquote><blockquote><p>组件化和模块化的区别</p><ul><li>模块化是从代码逻辑的角度进行划分的，方便代码分层开发，保证每个功能模块的职能单一</li><li>组件化是从UI界面的角度进行划分的，方便UI组件的重复利用</li></ul></blockquote></blockquote><h3 id="创建组件的方式"><a href="#创建组件的方式" class="headerlink" title="创建组件的方式"></a>创建组件的方式</h3><ol><li>使用<code>Vue.extend</code>创建全局Vue组件，通过<code>template</code>属性指定组件要展示的html结构</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建组件模板对象</span></span><br><span class="line"><span class="keyword">var</span> com1 = Vue.extend(&#123;</span><br><span class="line">  template: <span class="string">'&lt;h3&gt;这是用 Vue.extend 创建的组件&lt;/h3&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Vue.component('组件的名称', 创建出来的组件模板对象)</span></span><br><span class="line">Vue.component(<span class="string">'myCom1'</span>, com1);</span><br></pre></td></tr></table></figure><p>如果要使用组件，直接把组件的名称以HTML标签的形式引用。如果使用<code>Vue.component</code>定义全局组件，组件名称使用了驼峰命名，在引用时，需要将大写的驼峰改成小写字母，并加上<code>-</code>。<br>例如： 组件名称<code>myCom1</code>,在引用时，页面的标签应为<code>&lt;my-com1&gt;&lt;/my-com1&gt;</code>;组件名称<code>mycom1</code>,在引用时，页面的标签应为<code>&lt;mycom1&gt;&lt;/mycom1&gt;</code></p><p>简化写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.component(<span class="string">'myCom1'</span>, Vue.extend(&#123;</span><br><span class="line">  template: <span class="string">'&lt;h3&gt;这是用 Vue.extend 创建的组件&lt;/h3&gt;'</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<code>Vue.component</code>注册组件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'myCom2'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;h3&gt;这是用 Vue.extend 创建的组件&lt;/h3&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h3><ol><li>使用 <code>v-if</code>、<code>v-else</code> 实现组件的切换</li><li>使用 <code>component</code> 标签控制组件的切换(Vue内置组件： <code>component</code> <code>template</code> <code>transition</code> <code>transitionGroup</code>)</li><li>使用组件切换动画切换</li></ol><h3 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h3><h4 id="父组件向子组件传值-通过属性传值，通过事件绑定v-on传递方法"><a href="#父组件向子组件传值-通过属性传值，通过事件绑定v-on传递方法" class="headerlink" title="父组件向子组件传值(通过属性传值，通过事件绑定v-on传递方法)"></a>父组件向子组件传值(通过属性传值，通过事件绑定<code>v-on</code>传递方法)</h4><p>父组件可以在引用子组件时，通过属性绑定的形式(:)把需要传递给子组件的数据，以属性绑定的形式传递到子组件内部，供子组件使用。</p><p>父组件传递的数据放在子组件的<code>props</code>数组中，组件中的所有<code>props</code>中的数据都是通过父组件传递给子组件的。 </p><p>注： </p><ol><li>子组件中的<code>data</code>数据并不是通过父组件传递过来的，而是子组件本身私有的，比如子组件通过Ajax请求回来的数据都可以放在data中</li><li><code>data</code>中的数据都是可读可写的，<code>props</code>中的数据都是只读的</li></ol><p>父组件传递方法给子组件，使用事件绑定机制<code>v-on</code>定义需要传递的方法，子组件通过<code>this.$emit(&#39;传递的方法名&#39;，&#39;参数1&#39;， &#39;参数2&#39;...)</code>进行调用。</p><h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><p>通过事件回传</p><h2 id="webpack-version-3-6"><a href="#webpack-version-3-6" class="headerlink" title="webpack(version 3.6)"></a>webpack(version 3.6)</h2><h3 id="webpack-dev-server-自动编译打包工具"><a href="#webpack-dev-server-自动编译打包工具" class="headerlink" title="webpack-dev-server(自动编译打包工具)"></a>webpack-dev-server(自动编译打包工具)</h3><p>用于实现自动打包编译功能，依赖于webpack，因此安装此工具前即使全局已经装过webpack，在本地项目中也必须安装webpack以保证正常使用。</p><ol><li>运行 <code>npm i webpack-dev-server -D</code>命令，将此工具安装到项目的本地开发依赖</li><li>安装完毕后，在终端输入<code>webpack-dev-server</code>即可使用</li><li><code>webpack-dev-server</code>安装在本地项目中，无法把它当成脚本命令，因此在<code>powershell</code>命令中无法直接使用，因此要在项目的<code>package.json</code>中加入依赖。</li><li><code>webpack-dev-server</code>打包生成的<code>bundle.js</code>文件并没有存放到实际的物理磁盘中，而是直接托管到电脑的内存中，所以在项目的根目录中找不到这个打包好的<code>bundle.js</code></li></ol><h4 id="webpack-dev-server常用命令参数"><a href="#webpack-dev-server常用命令参数" class="headerlink" title="webpack-dev-server常用命令参数"></a>webpack-dev-server常用命令参数</h4><p>第一种方式（推荐写法）： 在<code>package.json</code>中配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span> : &#123;</span><br><span class="line">  <span class="string">"dev"</span> : <span class="string">"webpack-dev-server --open --port 3000 --contentBase src --hot"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>open</code>——编译完成后自动打开浏览器</p><p><code>port</code>—— 自定义端口</p><p><code>contentBase</code> —— 设置托管目录</p><p><code>hot</code> —— 打补丁；热部署，实现浏览器的不刷新重载</p><p>第二种方式（了解即可）：在<code>webpack.config.js</code>中配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);<span class="comment">// 启用热更新的第2步</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">...</span><br><span class="line">  devServer : &#123;</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    contBase: <span class="string">'src'</span>,</span><br><span class="line">    hot: <span class="literal">true</span> <span class="comment">// 启用热更新的第1步</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="comment">// 配置插件的节点</span></span><br><span class="line">    <span class="comment">// 启用热更新的第3步</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()<span class="comment">// new一个热更新的模块对象</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><p>在内存中，根据index模板页面生成内存页面</p><ol><li>安装<code>html-webpack-plugin</code>插件(<code>npm i html-webpack-plugin -D</code>)</li><li><p>在<code>webpack.config.js</code>中导入此插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要是插件，都需要放到plugins节点中</span></span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">...</span><br><span class="line">  plugins: [<span class="comment">// 配置插件的节点</span></span><br><span class="line">    <span class="comment">// 创建一个在内存中生成html页面插件</span></span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 指定模板页面，将来会根据指定页面路径去生成内存中的页面</span></span><br><span class="line">      template: path.join(_dirname, <span class="string">'./src/index.html'</span>),</span><br><span class="line">      <span class="comment">// 指定生成的页面名称</span></span><br><span class="line">      filename: <span class="string">'index123.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>html-webpack-plugin</code>会自动把打包好的<code>bundle.js</code>追加到页面中</p></li></ol><h3 id="loader-第三方处理器"><a href="#loader-第三方处理器" class="headerlink" title="loader(第三方处理器)"></a>loader(第三方处理器)</h3><p>webpack默认只能打包处理js类型的文件，不能处理其它非js类型的文件，如果需要处理非js类型的文件，则需要手动安装一些合适的第三方loader加载器。如需要打包处理css文件，需要安装<code>style-loader</code>和<code>css-loader</code></p><ol><li>安装命令： <code>npm i style-loader css-loader -D</code></li><li>在<code>webpack.config.js</code>的<code>module</code>节点中配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">...</span><br><span class="line">  <span class="built_in">module</span>: &#123;<span class="comment">// 此节点用于配置所有第三方木块加载器</span></span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// 配置处理.css文件第三方loader规则,webpack1.x版本的use中可省略-loader，2.x及以后的版本都不能省略</span></span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>webpack</code>处理第三方文件类型的过程：</p><ol><li>发现这个文件的类型不是js，去配置文件中查找是否有第三方loader规则</li><li>若能找到对应规则，调用对应的loader处理此文件类型</li><li>调用loader时，是从后往前调用(如上述<code>[&#39;style-loader&#39;, &#39;css-loader&#39;]</code>,先调用的是<code>css-loader</code>后调用<code>style-loader</code>)</li><li>当最后一个loader调用完毕时，会把处理结果直接交给webpack进行打包合并，最终输出到<code>bundle.js</code>中</li></ol><h4 id="处理less文件的loader"><a href="#处理less文件的loader" class="headerlink" title="处理less文件的loader"></a>处理less文件的loader</h4><ol><li>安装<code>less</code>: <code>npm i less</code></li><li>安装<code>less-loader</code>: <code>npm i less-loader -D</code></li><li>在上述<code>module.rules</code>中配置<code>less-loader</code>规则： <code>{test: /\.less$/, use: [&#39;style-loader&#39;, &#39;css-loader&#39;,&#39;less-loader&#39;]}</code></li></ol><p>注： less是less-loader内部依赖，因此需要先安装less，但无需将less配置到<code>webpack.config.js</code>中</p><h4 id="处理scss文件的loader"><a href="#处理scss文件的loader" class="headerlink" title="处理scss文件的loader"></a>处理scss文件的loader</h4><p><code>node-sass</code>是<code>sass-loader</code>内部依赖，需要先安装<code>node-sass</code>，但无需将<code>node-sass</code>配置到<code>webpack.config.js</code>中</p><ol><li>安装<code>node-sass</code>: <code>cnpm i node-sass -D</code>(<code>node-sass</code>一般都用cnpm安装，npm一般比较难装成功)</li><li>安装<code>sass-loader</code>:  <code>npm i sass-loader -D</code></li><li>在<code>module.rules</code>中配置<code>sass-loader</code>规则：<code>{test: /\.scss$/, use: [&#39;style-loader&#39;, &#39;css-loader&#39;,&#39;sass-loader&#39;]}</code></li></ol><h4 id="处理css文件中的url地址的loader"><a href="#处理css文件中的url地址的loader" class="headerlink" title="处理css文件中的url地址的loader"></a>处理css文件中的url地址的loader</h4><p>默认情况下webpack无法处理文件中的url地址，无论是图片还是字体库，只要是url地址都处理不了，需要安装<code>url-loader</code></p><p><code>file-loader</code>是<code>url-loader</code>内部依赖，需要先安装<code>file-loader</code>，但无需将<code>file-loader</code>配置到<code>webpack.config.js</code>中</p><ol><li>安装<code>file-loader</code>和<code>url-loader</code>: <code>cnpm i url-loader file-loader -D</code></li><li>在<code>module.rules</code>中配置<code>url-loader</code>规则：<code>{test: /\.jpg|png|gif|bmp|jpeg$/, use: &#39;url-loader?limit=7631&amp;name=[name].[ext]&#39;}</code></li></ol><p>注： 配置<code>url-loader</code>时，<code>&#39;url-loader?limit=7631&amp;name=[name].[ext]&#39;</code>中:</p><ul><li><code>?</code>后面表示传参数</li><li><code>limit=7631</code>表示limit给定的图片大小值，单位为kb; 当图片的大小&gt;7631kb时，图片路径会被base64加密，当图片大小&lt;=limit时，则不会被转为base64的字符串</li><li><code>name=[name].[ext]</code> 表示文件名沿用原始名称，而不用自动生成的hash值</li></ul><h5 id="使用url-loader处理字体文件"><a href="#使用url-loader处理字体文件" class="headerlink" title="使用url-loader处理字体文件"></a>使用<code>url-loader</code>处理字体文件</h5><p>在<code>module.rules</code>中配置<code>url-loader</code>规则：<code>{test: /\.ttf|eot|svg|woff|woff2$/, use: &#39;url-loader&#39;}</code></p><p>一般不要把图片文件和字体文件的url-loader配置写一起，而是分成两条规则写。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><h3 id="填充字符串"><a href="#填充字符串" class="headerlink" title="填充字符串"></a>填充字符串</h3><p>ES6中的字符串新方法<code>String.prototype.padStart(maxLength, filterString= &#39; &#39;)</code> 或 <code>String.prototype.padEnd(maxLength, filterString= &#39; &#39;)</code>来填充字符串</p><ul><li><code>maxLength</code> 表示填充完毕的总长度</li><li><code>filterString= &#39; &#39;</code> 表示填充的字符</li><li><code>padStart</code>表示从前面填充，<code>padEnd</code>从后面填充</li></ul><p>例如填充时间格式中的月</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = ((<span class="keyword">new</span> <span class="built_in">Date</span>()).getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br></pre></td></tr></table></figure><hr><p>参考视频: <a href="https://www.bilibili.com/video/av27969216/?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/av27969216/?p=1</a></p>]]></content>
      
      <categories>
          
          <category> web </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> web </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UI</title>
      <link href="/2019/06/22/computerLanguage/UI/UI%E5%85%A5%E9%97%A8/"/>
      <url>/2019/06/22/computerLanguage/UI/UI%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="UI入门"><a href="#UI入门" class="headerlink" title="UI入门"></a>UI入门</h1><h2 id="UI设计场景"><a href="#UI设计场景" class="headerlink" title="UI设计场景"></a>UI设计场景</h2><p>网页设计、管理界面、电脑软件、车载系统、智能终端</p><p>UI设计的合理进阶： 联系设计 + 联系产品</p><h2 id="视觉层次"><a href="#视觉层次" class="headerlink" title="视觉层次"></a>视觉层次</h2><h3 id="版面层级"><a href="#版面层级" class="headerlink" title="版面层级"></a>版面层级</h3><p>页面层级： 图片 &gt; 图标 &gt; 文字</p><h3 id="板块凸显"><a href="#板块凸显" class="headerlink" title="板块凸显"></a>板块凸显</h3><ol><li>卡片式设计（凸显板块）</li></ol><p>难点： 合适的阴影设计——弥散(使用PS进行操作)</p><p>PS操作重点：</p><ul><li>创建圆角矩形</li><li>复制图层作为阴影层，缩小至90%,适当调整颜色</li><li>阴影层板块： 属性–&gt;蒙版–&gt;羽化30像素(可自行调节)</li><li>整个阴影层板块稍微下移，制造阴影效果</li></ul><ol start="2"><li><p>增加角标(凸显细小版块)</p></li><li><p>增加标签(凸显细节)</p></li></ol><p>使用PS设计小标签：</p><ul><li>文字大小基本为24像素，中粗黑字体</li><li>左右间距一般大于上下边距，使标签设计有呼吸感</li></ul><h3 id="文字层级"><a href="#文字层级" class="headerlink" title="文字层级"></a>文字层级</h3><p>字重、颜色、特殊字体包</p><hr><p>参考视频: <a href="https://huke88.com/course/12944.html" target="_blank" rel="noopener">https://huke88.com/course/12944.html</a></p>]]></content>
      
      <categories>
          
          <category> UI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker</title>
      <link href="/2019/06/13/computerLanguage/microservice/docker/"/>
      <url>/2019/06/13/computerLanguage/microservice/docker/</url>
      <content type="html"><![CDATA[<h1 id="下载、安装及设置-win10"><a href="#下载、安装及设置-win10" class="headerlink" title="下载、安装及设置(win10)"></a>下载、安装及设置(win10)</h1><ol><li>进入官网进行下载，下载地址: <a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener">https://hub.docker.com/editions/community/docker-ce-desktop-windows</a></li></ol><p><img src="/data/img/docker/docker_download.png" alt="docker下载"></p><p>最新版需要登录下载，懒得找免登录下载方法，直接注册了个账号,点击<code>Get Docker</code>就可以下载啦~下载完就是傻瓜安装，一路next,下载+安装成就达成!</p><ol start="2"><li>打开cmd，输入<code>docker version</code>，出现以下页面表示成功~</li></ol><p><img src="/data/img/docker/docker_version.jpg" alt="docker下载验证"></p><ol start="3"><li>更换镜像地址(网上搜来的，暂时不知为啥要设)</li></ol><p>安装完成后启动可爱的小鲸鱼~首次打开会提示要设置<code>Hyper-V</code>，点击确定后电脑自动重启。本部分忘记截图。重启后会在右下角出现萌萌的小鲸鱼图标~~ <img src="/data/img/docker/docker_start_logo.png" alt="docker启动图标"></p><p>右击图标,选择<code>setting</code>,选择<code>Deamon</code>,在<code>Registry mirrors</code>中填入镜像地址:<a href="https://registry.docker-cn.com" target="_blank" rel="noopener">https://registry.docker-cn.com</a></p><p><img src="/data/img/docker/docker_setting.png" alt="docker镜像设置"></p><p>设置完毕后docker会自动重启,打开cmd命令,输入<code>docker run hello-world</code>,出现以下页面表示成功</p><p><img src="/data/img/docker/docker_mirror.png" alt="docker镜像设置验证"> </p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>业务需要，一脸懵逼的安装好了docker，接下来就是一脸懵逼的应用~</p><h2 id="使用Docker打包Maven项目镜像"><a href="#使用Docker打包Maven项目镜像" class="headerlink" title="使用Docker打包Maven项目镜像"></a>使用Docker打包Maven项目镜像</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>Docker</li><li>一个SpringBoot项目</li><li>一个镜像仓库</li></ul><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ol><li>创建Harbor项目<ul><li>在公司的Harbor仓库中新建一个项目,用于存放本次打包的镜像文件</li></ul></li><li>配置SpringBoot项目(添加docker配置)<ul><li>在<code>pom.xml</code>中引入docker依赖<br><img src="/data/img/docker/docker_mirror.png" alt="docker镜像设置验证"> </li></ul></li></ol><p>1.创建harbor项目</p><p>2.配置springboot项目</p><p>3.配置本地docker的insecure-registries</p><p>4.配置maven的setting.xml中server</p><h2 id="使用docker打包ofbiz项目"><a href="#使用docker打包ofbiz项目" class="headerlink" title="使用docker打包ofbiz项目"></a>使用docker打包ofbiz项目</h2><p>不是我打包的，我不知道怎么配置啊。。。o(╥﹏╥)o</p><p>直接运行<code>_docker_depoly</code>,此名称为自定义，可修改，至于在哪定义的，emmm… …</p><p><img src="/data/img/docker/docker_ofbiz.png" alt="docker打包ofbiz"> </p><p>前人铺路，后人踩坑，于是一运行就有了问题。</p><p>// 过几天再更新，emmm…</p><h3 id="问题集锦"><a href="#问题集锦" class="headerlink" title="问题集锦"></a>问题集锦</h3><ol><li>提示用户</li></ol>]]></content>
      
      <categories>
          
          <category> microservice,Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> microservice </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微服务</title>
      <link href="/2019/06/13/computerLanguage/microservice/microservice/"/>
      <url>/2019/06/13/computerLanguage/microservice/microservice/</url>
      <content type="html"><![CDATA[<h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p>SOA： Service Oriented Architecture，面向服务的架构<br>业务服务(business service)</p><p>前台访问服务：<br>客户端UI–&gt;API Gateway –&gt;访问后台服务</p><p>服务之间互相调用：<br>IPC(Inter Process Communication)</p><p>REST（JAX-RS，Spring Boot）</p><p>RPC（Thrift, Dubbo）</p><p>异步消息调用(Kafka, Notify)</p>]]></content>
      
      <categories>
          
          <category> microservice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> microservice </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2019/05/12/computerLanguage/java/javase/"/>
      <url>/2019/05/12/computerLanguage/java/javase/</url>
      <content type="html"><![CDATA[<h1 id="JDK12"><a href="#JDK12" class="headerlink" title="JDK12"></a>JDK12</h1><p>面向对象</p><p>函数式编程 </p><p>JVM： Java Virtual Machine</p><p>虚拟的用于执行bytecode字节码的计算机</p><p>JDK： Java Development Kit</p><p>JRE: Java Runtime Environment</p><h2 id="安装与配置环境变量"><a href="#安装与配置环境变量" class="headerlink" title="安装与配置环境变量"></a>安装与配置环境变量</h2><ul><li><p>安装包地址 </p><p>  链接：<a href="https://pan.baidu.com/s/19j-EKoXEQP_BnWTcu1fmiw" target="_blank" rel="noopener">https://pan.baidu.com/s/19j-EKoXEQP_BnWTcu1fmiw</a></p><p>  提取码：9ys5</p></li><li><p>JDK12安装完成后不再自动生成<code>jre</code>文件夹，需要在JDK12安装目录下自行运行命令生成</p><p>  命令行输入： <code>bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre</code></p></li><li><p>JDK 9版本之前类和资源文件存储在<code>lib/rt.jar</code>、<code>tools.jar</code>中，JDK 9版本开始 <code>lib/dt.jar</code> 和其他各种内部JAR文件都存储在一个更有效的格式在实现特定的文件lib目录。<br>因此<code>CLASS PATH</code>变量中不再需要配置<code>lib/rt.jar</code>、<code>tools.jar</code></p></li></ul><h1 id="网络编程-IP、TCP、UDP"><a href="#网络编程-IP、TCP、UDP" class="headerlink" title="网络编程-IP、TCP、UDP"></a>网络编程-IP、TCP、UDP</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>网络： 一组相互连接的计算机</p><ul><li><p>多台计算机组成</p></li><li><p>使用物理线路进行连接</p></li></ul><h3 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h3><ul><li><p>IP地址： 唯一标识网络上的每一台计算机</p><p>  两台计算机之间通信的必备要素</p></li><li><p>端口号： 计算机中应用的标号（代表一个应用程序）</p><p>  0-1024系统使用或保留端口</p><p>  有效端口0-65536</p></li><li><p>通信协议： 通信的规则</p><p>  TCP，UDP</p><h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><ul><li><p>OSI参考模式： 开放系统互连参考模型（Open System Interconnect）</p></li><li><p>TCP/IP参考模型： 传输控制/网际协议 (Transfer Control Protocol/Internet Protocol)</p></li></ul><p>OSI为逻辑上的参考模式，常用还是TCP/IP</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>32位，由4个8位二进制数组成</p><p>表示方法： 点分十进制</p><p>IP地址 = 网络ID + 主机ID</p><ul><li><p>网络ID: 标识计算机或网络设备所在的网段</p></li><li><p>主机ID：标识特定主机或网络设备</p></li></ul><h4 id="IP地址的分类"><a href="#IP地址的分类" class="headerlink" title="IP地址的分类"></a>IP地址的分类</h4><ul><li><p>地址类用于指定网络ID并在网络ID和主机ID之间提供分隔方法</p></li><li><p>IANA负责分配A，B， C类网络地址，具体主机地址由机构组织自行分配</p></li><li><p>IP地址包括A、B、C、D、E类</p><p>A类地址供军方使用，范围： 1.0.0.0~126.0.0.0 </p><p>B类地址供普通用户使用，范围： 128.0.0.0~1191.255.255.255</p><p>C类地址供普通用户使用，范围： 192.0.0.0~223.255.255.255</p><p>D类地址供广播地址或一些通用服务地址使用，范围： 224.0.0.0~239.255.255.255</p><p>E类地址范围： 240.0.0.0~247.255.255.255</p></li></ul></li></ul><h4 id="特殊的IP地址"><a href="#特殊的IP地址" class="headerlink" title="特殊的IP地址"></a>特殊的IP地址</h4><ul><li><p><code>0.0.0.0</code>: 本机,阻断与外网通信</p></li><li><p><code>127.0.0.1</code>: 本机回环地址(Local Loopback)，用于本机测试</p></li><li><p><code>255.255.255.255</code>: 当前子网，一般用于向当前子网广播信息</p></li></ul><h4 id="IP地址对应的对象"><a href="#IP地址对应的对象" class="headerlink" title="IP地址对应的对象"></a>IP地址对应的对象</h4><p>类<code>InetAddress</code></p><ul><li><code>getLocalHost()</code>: 获取本机主机名+IP地址</li></ul><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>端口是一个虚拟的概念，通过端口可以在一个主机上运行多个网络应用程序</p><h3 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h3><ul><li><p>TCP</p><p>  相当于打电话，需要建立连接，效率比较低，数据传输安全。</p><p>  三次握手协议完成。</p></li><li><p>UDP</p><p>  相当于发短信(有字数限制)，不需要建立连接，数据包的大小限制在64k内，效率高，不安全，容易丢包</p></li></ul><h4 id="三次握手协议和四次分手协议"><a href="#三次握手协议和四次分手协议" class="headerlink" title="三次握手协议和四次分手协议"></a>三次握手协议和四次分手协议</h4><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><ul><li>网络上的两个程序</li></ul><h4 id="基于TCP协议的Socket编程"><a href="#基于TCP协议的Socket编程" class="headerlink" title="基于TCP协议的Socket编程"></a>基于TCP协议的Socket编程</h4><ol><li><p>创建客户端</p><p> new一个socket对象，开启实现IO的虚拟接口，发送数据</p></li><li><p>创建服务端</p><ul><li><p>new一个serverSocket对象，开放端口</p></li><li><p>创建服务端的一个搜socket对象</p></li></ul></li></ol><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>UDP传输方式和TCP不同，UDP传输的是数据包</p><h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>JDK8中最重要的新功能之一。使用lambda表达式可以替代只有一个抽象函数的接口实现，告别匿名内部类，使代码看起来简单易懂。</p><p>Lambda表达式同时还提升了对集合、框架的迭代、遍历、过滤数据的操作</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>函数式编程</p></li><li><p>参数类型自动推断</p></li><li><p>代码量少，简洁</p></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>任何有<strong>函数式接口</strong>的地方</p><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>只有一个抽象方法(Object类中的方法除外)的接口是函数式接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">()-&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>java提供了一系列的函数式接口，用于接收后续传入的参数，但是对输入和输出类型有要求</p><h2 id="方法的引用"><a href="#方法的引用" class="headerlink" title="方法的引用"></a>方法的引用</h2><p>方法引用是用来直接访问类或实例的已经存在的方法或者构造方法，方法引用提供了一种引用而不执行方法的方式，如果抽象方法的实现恰好可以使用调用另外一个方法来实现，就有可能可以使用方法引用。</p><h3 id="方法引用的分类"><a href="#方法引用的分类" class="headerlink" title="方法引用的分类"></a>方法引用的分类</h3><table><thead><tr><th>类型</th><th>语法</th><th>对应的Lambda表达式</th></tr></thead><tbody><tr><td>静态方法引用</td><td>类名::staticMethod</td><td>(args) -&gt; 类名.staticMethod(args)</td></tr><tr><td>实例方法引用</td><td>inst::instMethod</td><td>(args) -&gt; inst.instMethod(args)</td></tr><tr><td>对象方法引用</td><td>类名::instMethod</td><td>(inst.args) -&gt; 类名.instMethod(args)</td></tr><tr><td>构造方法引用</td><td>类名::new</td><td>(args) -&gt; new 类名(args)</td></tr></tbody></table><h1 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h1><p>Stream是一组用来处理数组、集合的API</p><p>JDK8引入函数式编程原因： </p><ul><li><p>代码简洁且意图明确，使用Stream接口让你从此告别for村换</p></li><li><p>多核友好</p></li></ul><h2 id="Stream特性"><a href="#Stream特性" class="headerlink" title="Stream特性"></a>Stream特性</h2><ul><li><p>不是数据结构，没有内部储存</p></li><li><p>不支持索引访问</p></li><li><p>延迟计算</p></li><li><p>支持并行</p></li><li><p>很容易生成数组或集合(List, Set)</p></li><li><p>支持过滤、查找、转换、汇总、聚合等操作</p></li></ul><h2 id="Stream运行机制"><a href="#Stream运行机制" class="headerlink" title="Stream运行机制"></a>Stream运行机制</h2><p>Stream分为源source，中间操作，终止操作</p><p>流的源可以是一个数组、一个集合、一个生成器方法、一个I/O通道等等</p><p>一个留可以有零个和或者多个中间操作，每一个中间操作都会返回一个新的流供下一个操作使用。</p><p>一个流只会有一个终止操作。</p><p>Stream只有遇到终止操作，它的源才开始执行遍历操作</p><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><h3 id="三元运算符与if语句"><a href="#三元运算符与if语句" class="headerlink" title="三元运算符与if语句"></a>三元运算符与if语句</h3><p>三元运算符能实现的都可采用if语句实现，反之不成立。因为三元运算符不能执行输出语句。<br>若只需赋值，可用三元运算符简化代码。</p><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><h3 id="switch表达式可接收类型"><a href="#switch表达式可接收类型" class="headerlink" title="switch表达式可接收类型"></a>switch表达式可接收类型</h3><ol><li>基本数据类型可以接收byte,short,char,int</li><li>引用数据类型可以接收枚举(JDK1.5) String类型(JDK1.7)</li></ol><h3 id="swith语句注意事项"><a href="#swith语句注意事项" class="headerlink" title="swith语句注意事项"></a>swith语句注意事项</h3><ul><li>case后面只能是常量，不能是变量。多个case的值不能相同</li><li>每个case后面都要加break，否则会出现case穿透</li><li>default可以放在任何位置，但建议放最后</li></ul><h2 id="if语句和switch语句的各自使用场景"><a href="#if语句和switch语句的各自使用场景" class="headerlink" title="if语句和switch语句的各自使用场景"></a>if语句和switch语句的各自使用场景</h2><p>switch在判断固定值时使用，if建议判断区间和范围时使用</p><h2 id="for语句、while语句和do-while语句"><a href="#for语句、while语句和do-while语句" class="headerlink" title="for语句、while语句和do while语句"></a>for语句、while语句和do while语句</h2><h3 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h3><ul><li>do while 先执行循环体再判断，至少会执行一次循环体</li><li>for语句执行后，变量会被释放，不能再使用；while执行后，初始化变量还能继续使用</li></ul><p>如果想在循环结束后继续使用控制条件的变量，用while语句，否则尽量用for循环，以提高内存的使用效率</p><h3 id="无限循环语句"><a href="#无限循环语句" class="headerlink" title="无限循环语句"></a>无限循环语句</h3><p>while语句无限循环：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">  System.out.println(<span class="string">"This is a loop"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>for语句的无限循环:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(; ;) &#123;</span><br><span class="line">  System.out.println(<span class="string">"This is a loop"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p><code>\x</code> x表示任意，\是转义符号，这种做法叫转义字符</p><ul><li><code>\t</code> 表示tab键(制表符)</li><li><code>\r</code> 表示回车</li><li><code>\n</code> 表示换行</li><li><code>\&quot;</code> 表示转义双引号</li><li><code>\&#39;</code> 表示转义单引号</li></ul><h2 id="方法的概述和格式说明"><a href="#方法的概述和格式说明" class="headerlink" title="方法的概述和格式说明"></a>方法的概述和格式说明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修饰符 返回值类型 方法名(参数类型 参数名1, 参数类型2 参数名2...) &#123;</span></span><br><span class="line"><span class="comment">*    方法体语句</span></span><br><span class="line"><span class="comment">*    return 返回值;</span></span><br><span class="line"><span class="comment">* &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="方法的注意事项"><a href="#方法的注意事项" class="headerlink" title="方法的注意事项"></a>方法的注意事项</h3><ul><li>方法不调用不执行</li><li>方法与方法是平级关系，不能嵌套定义</li><li>方法定义的时候参数之间用逗号隔开</li></ul><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>重载： 方法名相同，参数列表不同，与返回值类型无关<br>重载的分类： </p><ul><li>参数的个数不同</li><li>参数的类型不同</li><li>参数的顺序不同</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>同时存储同一种数据类型多个元素的集合，既可存储基本数据类型，也可存储引用数据类型。</p><p>格式： <code>数据类型[] 数组名 = new 数据类型[数组的长度]</code></p><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><h4 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h4><p><code>数据类型[] 数组名 = new 数据类型[数组的长度]</code></p><p>e.g: int[] arr = new int[5]</p><p>相当于在内存中开辟5个连续的储存空间</p><h3 id="java中的内存分配以及栈和堆的区别"><a href="#java中的内存分配以及栈和堆的区别" class="headerlink" title="java中的内存分配以及栈和堆的区别"></a>java中的内存分配以及栈和堆的区别</h3><p>栈： 存储局部变量(定义在方法声明上和方法中的变量)，每个方法是一个栈针形式<br>堆： 存储new出来的数组或对象<br>方法区：<br>本地方法区： 和系统相关<br>寄存器: 给CPU用</p><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>格式： <code>数据类型[] 数组名 = new 数据类型[]{元素1, 元素2, ...}</code><br>简化格式： <code>数据类型[] 数组名 = {元素1, 元素2, ...}</code></p><p>简化格式的声明和赋值只能在同一行，否则编译不通过。  </p><h3 id="参数传递问题"><a href="#参数传递问题" class="headerlink" title="参数传递问题"></a>参数传递问题</h3><p>基本数据类型的值传递，不改变原值，因为调用后会弹栈，局部变量随之消失<br>引用数据类型的值传递，改变原值，因为即使方法弹栈，但是堆内存数组对象还在，可以通过地址继续访问</p><p>java中只有传值，因为地址值也是值</p><h2 id="构造方法、static关键字-day-07"><a href="#构造方法、static关键字-day-07" class="headerlink" title="构造方法、static关键字 (day 07)"></a>构造方法、static关键字 (day 07)</h2><h3 id="构造方法特点"><a href="#构造方法特点" class="headerlink" title="构造方法特点"></a>构造方法特点</h3><ul><li>方法名和类名相同</li><li>没有返回值类型，连void也没有</li><li>没有具体的返回值，直接return</li><li>若无构造方法，系统会自动提供一个无参的构造方法</li><li><p>若有有参构造方法，则必须自己写一个无参的构造方法</p><h3 id="创建对象的步骤"><a href="#创建对象的步骤" class="headerlink" title="创建对象的步骤"></a>创建对象的步骤</h3><ol><li>Student.class加载进内存</li><li>声明一个Student类型引用s</li><li>在堆内存创建对象</li><li>给对象中属性默认初始化值</li><li>属性进行显示初始化</li><li>构造方法进栈，对对象中的属性赋值，构造方法弹栈</li><li>将对象的地址赋值给s</li></ol><p><img src="/data/img/javase/创建对象的步骤.jpg" alt="创建对象步骤图解"></p><h3 id="static关键字及内存图-day07-07-09"><a href="#static关键字及内存图-day07-07-09" class="headerlink" title="static关键字及内存图(day07 07.09)"></a>static关键字及内存图(day07 07.09)</h3><p><img src="/data/img/javase/static内存图.png" alt="static内存图"></p><h4 id="static关键字的特点"><a href="#static关键字的特点" class="headerlink" title="static关键字的特点"></a>static关键字的特点</h4><ul><li>随着类的加载而加载</li><li>优先于对象存在</li><li>被类的所有对象共享<br>当某个成员变量是被所有对象所共享，那么它就应该送一位静态的</li><li>可以通过类名调用，推荐使用类名调用；静态修饰的内容，一般我们称其为与类相关的，类成员</li></ul><h4 id="static的注意事项"><a href="#static的注意事项" class="headerlink" title="static的注意事项"></a>static的注意事项</h4><p>a. 在静态方法中是没有this关键字的，因为静态是随着累的加载而加载，优先于对象的存在，而this是随着对象的创建而存在的<br>b. 静态方法只能访问静态的成员变量和静态的成员方法</p></li></ul><h4 id="静态变量和成员变量的区别"><a href="#静态变量和成员变量的区别" class="headerlink" title="静态变量和成员变量的区别"></a>静态变量和成员变量的区别</h4><p>a. 所属不同</p><pre><code>* 静态变量属于类，所以也称为类变量* 成员变量属于对象，所以也称为实例变量(对象变量)</code></pre><p>b. 内存中的位置不同</p><pre><code>* 静态变量存储于方法区的静态区* 成员变量存储于堆内存</code></pre><p>c. 内存出现时间不同</p><pre><code>* 静态变量随着类的加载而加载，随着类的消失而消失* 成员变量随着对象的创建而存在，随着对象的消失而消失</code></pre><p>d. 调用不同</p><pre><code>* 静态变量可以通过类名调用，也可以通过对象调用* 成员变量只能通过对象名调用</code></pre><h3 id="main方法的格式和详细解释"><a href="#main方法的格式和详细解释" class="headerlink" title="main方法的格式和详细解释"></a>main方法的格式和详细解释</h3><p>public : 被jvm调用，所以需要权限足够大<br>static : 被jvm调用，不需要创建对象，直接类名.调用即可<br>void : 被jvm调用，不需要有任何的返回值<br>main : 只有这样写才能被jvm识别，main不是关键字<br>String[] args : 以前用来接收启动时的键盘录入，现在用System.Scanner(System.in)来接收键盘录入</p><p> <img src="/data/img/javase/main方法String[].jpg" alt="main方法String[]"></p><h3 id="工具类中使用静态"><a href="#工具类中使用静态" class="headerlink" title="工具类中使用静态"></a>工具类中使用静态</h3><p>工具类中使用静态方法，可不用创建对象直接调用；若一个类中所有的方法都为静态方法，则需要将构造方法私有化，目的是不让其他类创建本类，直接用类名.方法调用即可</p><h3 id="说明书的制作过程"><a href="#说明书的制作过程" class="headerlink" title="说明书的制作过程"></a>说明书的制作过程</h3><ol><li>使用多行注释在类和方法中进行注释，写明版本、作者、参数、返回值等信息</li><li>对需要生成api的文件进行javadoc命令</li></ol><p><img src="/data/img/javase/generateApi.png" alt="生成说明文档"></p><p><code>javadoc -d api -version -author ArrayTools.java</code></p><ul><li><code>javadoc</code> 生成文档命令</li><li><code>-d api</code> 文件生成保存路径</li><li><code>-version</code> 版本</li><li><code>-author</code> 作者</li><li><p><code>ArrayTools.java</code> 源文件类的名字</p><p>文件生成后，直接打开<code>index.html</code>既可</p></li></ul><h2 id="代码块、继承、方法重写、final关键字-day-08"><a href="#代码块、继承、方法重写、final关键字-day-08" class="headerlink" title="代码块、继承、方法重写、final关键字(day 08)"></a>代码块、继承、方法重写、final关键字(day 08)</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>java中使用<code>{}</code>括起来的代码称为代码块，分为局部代码块、构造代码块、静态代码块、同步代码块</p><ul><li>局部代码块： 在方法中出现，限定变量的生命周期，及早释放，提高内存效率</li><li>构造代码块(初始化代码块)：在类中方法外出现；多个构造方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行</li><li>静态代码块： 在类中方法外出现，加了static修饰；用于给类进行初始化，在加载时执行，并且只执行一次，一般用于加载驱动</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>关键字： extends<br>让类与类之间产生关系，子父类关系<br>好处： </p><ul><li>提高代码的复用性</li><li>提高了代码的维护性</li><li>让类与类之间产生了关系，是多态的前提<br>弊端：<ul><li>增强类的耦合性</li></ul></li></ul><p>开发的原则： 高内聚，低耦合</p><ul><li>耦合是指类与类的关系</li><li><p>内聚是指自己完成某件事情的能力</p><h4 id="继承的特点"><a href="#继承的特点" class="headerlink" title="继承的特点"></a>继承的特点</h4><p>java只支持单继承不支持多继承，但支持多层继承(B extends A, C extends B)</p><h4 id="继承的注意事项"><a href="#继承的注意事项" class="headerlink" title="继承的注意事项"></a>继承的注意事项</h4></li><li>子类只能继承父类所有非私有成员(成员方法和成员变量)</li><li>子类不能继承父类的构造方法，但是可以通过super关键字去访问父类构造方法</li><li><p>不要为了部分功能而去继承</p><h4 id="this和super的区别"><a href="#this和super的区别" class="headerlink" title="this和super的区别"></a>this和super的区别</h4><p><code>this.成员变量</code> ：既可以调用本类的成员变量，也可调用父类成员变量(本类无成员变量)<br><code>super.成员变量</code> : 调用父类成员变量</p><h4 id="继承中构造方法的关系"><a href="#继承中构造方法的关系" class="headerlink" title="继承中构造方法的关系"></a>继承中构造方法的关系</h4><p>子类中所有的构造方法默认都会访问父类中空参数的构造方法。<br>每一个构造方法的第一条语句默认都是 super() Object类最顶层的父类</p><h4 id="继承中构造方法的注意事项"><a href="#继承中构造方法的注意事项" class="headerlink" title="继承中构造方法的注意事项"></a>继承中构造方法的注意事项</h4><p>父类没有无参构造方法，子类只能通过super或者this来访问父类的有参构造方式。super和this不能共用，因为两者都必须放在构造器中的第一个语句。</p><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>子父类出现了一模一样的方法<br>子类可以重写父类中的方法，这样既沿袭了父类的功能，又定义了自己特有的功能</p><h4 id="方法重写的注意事项"><a href="#方法重写的注意事项" class="headerlink" title="方法重写的注意事项"></a>方法重写的注意事项</h4></li></ul><ol><li>父类的思想方法不能被重写</li><li>子类重写父类方法时，访问权限不能更低</li><li>父类静态方法，子类也必须通过静态方法重写(静态方法只能覆盖静态方法)</li></ol><h4 id="方法的重载-overload-和重写-overload"><a href="#方法的重载-overload-和重写-overload" class="headerlink" title="方法的重载(overload)和重写(overload)"></a>方法的重载(overload)和重写(overload)</h4><p>方法重写： 子父类出现一模一样的方法，与返回值类型有关，返回值是一致的<br>方法重载： 在本类中出现的方法名一样，参数列表不同，与返回值无关</p><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>修饰类，类不能被继承</li><li>修饰变量， 变量变为常量，只能被赋值一次</li><li>修饰方法， 方法不能被重写 </li></ul><p>final修饰基本数据类型，值不能被改变；<br>final修饰引用数据类型，地址值不能被改变，但对象中的属性可以改变。</p><p>成员变量的从默认初始化值是无效值，因此final修饰的成员变量初始化时需要赋值或者利用构造方法初始化。</p><h2 id="多态、抽象类"><a href="#多态、抽象类" class="headerlink" title="多态、抽象类"></a>多态、抽象类</h2><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="多态的前提"><a href="#多态的前提" class="headerlink" title="多态的前提"></a>多态的前提</h4><ol><li>要有继承关系</li><li>要有方法重写</li><li>要有父类引用指向子类方法</li></ol><h4 id="多态中的成员访问特点"><a href="#多态中的成员访问特点" class="headerlink" title="多态中的成员访问特点"></a>多态中的成员访问特点</h4><h5 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h5><p>编译看左边(父类)，运行看左边(父类)</p><h5 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h5><p>编译看左边(父类)，运行看右边(子类)  (动态绑定)</p><h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><p>编译看左边(父类)，运行看左边(父类)</p><h4 id="向上转型和向下转型"><a href="#向上转型和向下转型" class="headerlink" title="向上转型和向下转型"></a>向上转型和向下转型</h4><p>引用数据类型会先向上转型，才能向下转型。</p><h4 id="好处和弊端"><a href="#好处和弊端" class="headerlink" title="好处和弊端"></a>好处和弊端</h4><p>好处：</p><ul><li>提高代码的可维护性</li><li>提高代码的扩展性</li></ul><p>弊端：</p><ul><li>不能使用子类的特有属性和行为<br>多态一般用于当做参数，因为其拓展性强</li></ul><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><p>关键字abstract修饰</p><ul><li>抽象类不一定有抽象方法，有抽象方法的类一定是抽象类或接口</li><li>抽象类不能实例化，只能通过子类实例化</li><li>抽象的子类只能是抽象类或重写抽象类的所有方法</li></ul><h4 id="成员特点"><a href="#成员特点" class="headerlink" title="成员特点"></a>成员特点</h4><ul><li>成员变量既可以是变量也可以是常量。</li><li>有构造方法，便于子类访问父类数据的初始化</li><li>成员方法，既可以是抽象也可以是非抽象(非抽象需要重写父类所有方法)</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol><li>一个抽象类如果没有抽象方法，可以定义为抽象类，这样做是为了不让其他类创建本类的对象，只能通过此抽象的子类实例化</li><li><p>abstract不能和那些关键字共存</p><ul><li><p><code>static</code></p><p>被<code>abstract</code>修饰的方法没有方法体，被<code>static</code>修饰的可以用类名.调用，调用抽象方法是没有意义的</p></li><li><p><code>final</code></p><p>被<code>abstract</code>修饰的方法强制子类重写，被<code>final</code>修饰的不让子类重写</p></li><li><p><code>private</code></p><p>被<code>abstract</code>修饰的是为了让子类看到并强制重写，被<code>private</code>修饰不让子类访问</p></li></ul></li></ol><h3 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h3><ol><li>使用关键字<code>interface</code>表示，接口中的方法都是抽象的。</li><li>类实现接口用<code>implement</code>表示： <code>class 类名 implement 接口名 {}</code></li><li>接口不能实例化</li><li>接口的子类可以是抽象类，也可以是具体类，但是具体类需要重写接口中的所有抽象方法</li></ol><h4 id="接口的成员特点"><a href="#接口的成员特点" class="headerlink" title="接口的成员特点"></a>接口的成员特点</h4><ol><li>成员变量: 只能是常量，并且是静态、公共的，默认修饰符: <code>public static final</code>,建议手动给出</li><li>构造方法： 接口没有构造方法</li><li>成员方法： 只能是抽象方法，默认修饰符： <code>public abstract</code>，建议手动给出</li></ol><h3 id="类与类、类与接口、接口与接口的关系"><a href="#类与类、类与接口、接口与接口的关系" class="headerlink" title="类与类、类与接口、接口与接口的关系"></a>类与类、类与接口、接口与接口的关系</h3><p>类与类： 继承关系，只能是单继承，可以多层继承<br>类与接口： 实现关系，可以单实现，也可以多实现并且能在继承一个类的同时实现多个接口<br>接口与接口： 继承关系，可以是单继承，也可以是多继承</p><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><p>成员区别： </p><ul><li>成员变量： 抽象类的可以是变量，也可以是常量；接口的只能是常量</li><li>构造方法： 抽象类有构造方法，接口无</li><li>成员方法： 抽象类的可以是抽象方法，也可以是非抽象；接口的只可以是抽象</li></ul><p>设计理念区别：</p><ul><li>抽象类被继承，体现的是<code>is a</code>的关系，抽象类定义的是该继承体系的共性功能</li><li>接口，被实现的是<code>like a</code>的关系，接口中定义的是该继承体系的扩展功能</li></ul><h2 id="day10"><a href="#day10" class="headerlink" title="day10"></a>day10</h2><h3 id="四种权限修饰符"><a href="#四种权限修饰符" class="headerlink" title="四种权限修饰符"></a>四种权限修饰符</h3><p><code>public</code>、<code>defalut</code>、 <code>protected</code>、 <code>private</code></p><ul><li><code>private</code> 只能在本类中访问</li><li><code>default</code> 默认不写，能在本类和同包下访问</li><li><code>protected</code>在不同包下的无关类无法访问</li><li><code>public</code> 均能访问</li></ul><p>状态修饰符： <code>static</code>、 <code>final</code></p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>方法中的内部类；<br>局部内部类访问局部变量，局部变量需要用final修饰。(JDK 1.8中取消了此事)</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类只针对重写一个方法的时候使用。匿名内部类当做参数传递，本职是把匿名内部类看做一个对象。<br>链式编程，调用方法后还能继续调用方法，证明调用方法后返回的是一个对象</p><h2 id="eclipse、Object类"><a href="#eclipse、Object类" class="headerlink" title="eclipse、Object类"></a>eclipse、Object类</h2><h3 id="eclipse快捷键"><a href="#eclipse快捷键" class="headerlink" title="eclipse快捷键"></a>eclipse快捷键</h3><p><code>alt + /</code> 提示代码<br><code>ctrl + n</code> 新建<br><code>ctrl + shift +f</code> 格式化<br><code>ctrl + shif +o</code> 整理包<br><code>ctrl + /</code>单行注释<br><code>ctrl+shift+/</code> 多行注释<br><code>ctrl + shift +\</code><br><code>alt + 上下箭头</code> 上下移动代码<br><code>F3</code>或按住<code>ctrl</code>点击类名可以查看源码<br><code>ctrl + shift + t</code> 查找具体的类<br><code>ctrl + o</code>查找具体类的具体方法<br><code>ctrl + d</code> 删除代码<br><code>ctrl + shift + m</code> 抽取方法<br><code>alt + shift + r</code> 改名<br><code>alt + shift + s</code> 快速生成getter、setter等方法<br><code>ctrl + alt + 上下键</code> 向上/下复制一行代码</p><h3 id="打jar包"><a href="#打jar包" class="headerlink" title="打jar包"></a>打jar包</h3><p>选中项目–&gt;右键–&gt;Export–&gt;java–&gt;Jar–&gt;指定路径和名称–&gt;finish</p><h3 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h3><p>选中jar包–&gt;右键–&gt;build path</p><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><ol><li><p>hashcode()方法： 返回对象的地址值。</p></li><li><p>getClass()方法： 返回对象的class文件。</p></li><li><p>toString()方法： 更方便的显示属性值。如果直接打印对象的引用，会默认调用toString方法。</p></li><li><p>equals方法： 判断两个对象是否相等(比较的是地址值)，返回布尔值。Object的equals方法比较的是地址值，因此开发中没什么意义，一般都要重写此方法，重写后一般比较的是对象中的属性值。</p></li></ol><h3 id="和equals的区别"><a href="#和equals的区别" class="headerlink" title="== 和equals的区别"></a>== 和equals的区别</h3><p>共同点： 都可以做比较，返回值都是布尔值<br>区别：</p><ol><li><p><code>==</code>是比较运算符，即可以比较基本数据类型，也可以比较引用数据类型。基本数据类型比较的是值，引用数据类型比较的是地址值</p></li><li><p>equals方法只能比较引用数据类型，equals方法在没重写之前比较的是地址值，底层依赖的是==号，但是比较地址值是没有意义的，需要重写equals方法比较对象中的属性值</p></li></ol><h2 id="Scanner、String-类-day-12"><a href="#Scanner、String-类-day-12" class="headerlink" title="Scanner、String 类(day 12)"></a>Scanner、String 类(day 12)</h2><h3 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h3><p>一般方法：<br>hasNextXXX() 判断是否有下一个输入项，XXX可以是Int double等<br>nextXxx() 获取下一个输入项，nextLine()用于获取一个String类型的值</p><p>nextLine()遇到键盘输入的/r/n时会自动停止，获取键盘输入自动会有/r/n</p><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><p>字符串是常量，一旦被赋值就不能被改变</p><h4 id="常见构造方法"><a href="#常见构造方法" class="headerlink" title="常见构造方法"></a>常见构造方法</h4><ol><li>空构造 String()</li><li>把字节数组转成字符串 String(byte[] bytes)</li><li>把字节数组的一部分转成字符串 Sting(byte[] bytes, int index, int length)</li><li>把字符数组转成字符串 String(char[] value)</li><li>把字符数组的一部分转成字符串 String(char[] value, int index, int length)</li><li>把字符串常量值转成字符串 String(String original)</li></ol><h4 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h4><p>常量池中若无某字符串对象，则创建一个，如有则直接使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>); <span class="comment">// 记录的是堆里面的地址值</span></span><br><span class="line">String s2 = <span class="string">"abc"</span>;<span class="comment">// 记录的是常量池里的地址值</span></span><br><span class="line">s1 == s2;<span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h4 id="String类的判断功能"><a href="#String类的判断功能" class="headerlink" title="String类的判断功能"></a>String类的判断功能</h4><ol><li>比较字符串的内容是否相同，区分大小写: equals(Object obj)</li><li>比较字符串的内容是否相同，忽略大小写: equalsIgnoreCase(String str)</li><li>判断大字符串是否包含小字符串: contains(String str)</li><li>判断字符串是否以某个指定的字符串开头: startsWith(String str)</li><li>判断字符串是否以某个指定的字符串结尾: endsWith(String str)</li><li>判断是否为空: isEmpty()</li></ol><h4 id="String类的获取功能"><a href="#String类的获取功能" class="headerlink" title="String类的获取功能"></a>String类的获取功能</h4><ol><li>获取字符串的长度: int length();</li><li>获取指定索引位置的字符: char charAt(int index)</li><li>返回指定字符在此字符串中第一次出现处的索引: int indexOf(int ch)</li><li>返回指定字符串在此字符串中第一次出现处的索引: int indexOf(String str)</li><li>返回指定字符在此字符串中从指定位置后第一次出现处的索引: int indexOf(int ch, int fromIndex)</li><li>返回指定字符串在此字符串中从指定位置后第一次出现处的索引: int indexOf(String str, int fromIndex)</li><li>从后向前找，第一次出现指定字符的索引: lastIndexOf</li><li>从指定位置开始截取字符串，默认到末尾 String substring(int start) (substring会产生新的字符串)</li><li>从指定位置开始到指定位置结束截取字符串 String substring(int start, int end)</li></ol><h4 id="String类的转换功能"><a href="#String类的转换功能" class="headerlink" title="String类的转换功能"></a>String类的转换功能</h4><p>valueOf(Object obj); 将对象转为String<br>toLowerCase(): 把字符串转小写(返回新的字符串)<br>toUpperCase(): 把字符串转成大写(返回新的字符串)<br>concat(String str): 把字符串拼接</p><h1 id="StringBuffer-amp-数组排序-Day13"><a href="#StringBuffer-amp-数组排序-Day13" class="headerlink" title="StringBuffer &amp; 数组排序 (Day13)"></a>StringBuffer &amp; 数组排序 (Day13)</h1><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ol><li>无参构造方法 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sb.length();<span class="comment">// 0,容器中字符的个数，实际值</span></span><br><span class="line">sb.capacity();<span class="comment">// 16,容器的初始容量，理论值</span></span><br></pre></td></tr></table></figure><ol start="2"><li>指定容量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb2 = <span class="keyword">new</span> StringBuffer(<span class="number">10</span>);</span><br><span class="line">sb2.length();<span class="comment">// 0</span></span><br><span class="line">ab2.capacity();<span class="comment">// 10</span></span><br></pre></td></tr></table></figure><ol start="3"><li>指定字符串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb3 = <span class="keyword">new</span> StringBuffer(<span class="string">"test"</span>);</span><br><span class="line">sb3.length();<span class="comment">// 5, 实际字符个数</span></span><br><span class="line">sb3.capacity();<span class="comment">// 20, 字符串的length + 初始容量</span></span><br></pre></td></tr></table></figure><h3 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h3><p>StringBuffer是字符串缓冲区，当new的时候，是在堆内存创建一个对象，底层是一个长度为16的字符数组，当调用添加方法时，不会再重新创建对象，在不断向原缓冲区添加字符;</p><p>StringBuffer类中重写了toString方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 可以把任意类型数据添加到字符串缓冲区里面，并返回字符串返回区* 本身</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">append</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">StringBuffer sb2 = sb.append(<span class="keyword">true</span>);</span><br><span class="line">StringBuffer sb3 = sb.append(<span class="string">"test"</span>);</span><br><span class="line">StringBuffer sb4 = sb.append(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(sb.toString());<span class="comment">// truetest100</span></span><br><span class="line">System.out.println(sb2.toString());<span class="comment">// truetest100</span></span><br><span class="line">System.out.println(sb3.toString());<span class="comment">// truetest100</span></span><br><span class="line">System.out.println(sb4.toString());<span class="comment">// truetest100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在指定位置把任意类型的数据插入到字符串缓冲区里面，并返回字符* 串缓冲区本身</span></span><br><span class="line"><span class="comment">* 在指定位置添加元素，如果没有指定位置，则会报指针异常</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offser, String str)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h3><p>当缓冲区中无索引时，报字符串越界异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除指定位置的字符，并返回本身</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">sb,delete(<span class="number">0</span>, sb.length());<span class="comment">// 清空缓冲区</span></span><br></pre></td></tr></table></figure><h3 id="替换和反转"><a href="#替换和反转" class="headerlink" title="替换和反转"></a>替换和反转</h3><p>StringBuffer replace(int start, int end, String str);</p><p>StringBuffer reverse();</p><p>字符串的反转：</p><ol><li>将字符串转换成StringBuffer对象<br> StringBuffer sb = new StringBuffer(Str);</li><li>使用reverse()方法反转<br> sb.reverse();</li><li>将StringBuffer对象转换成String<br> sb.tostring();</li></ol><h3 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h3><p>String substring(int start);<br>String substring(int start, int end);</p><p>注： 截取返回值不再是StringBuffer本身，而是String</p><h3 id="StringBuffer和String的转换"><a href="#StringBuffer和String的转换" class="headerlink" title="StringBuffer和String的转换"></a>StringBuffer和String的转换</h3><ol><li>String转StringBuffer</li></ol><ul><li>通过构造方法<br>StringBuffer sb = new StringBuffer(“XXX”);</li><li>通过append()方法<br>StringBuffer sb2 = new StringBuffer();<br>sb2.append(“XXX”);</li></ul><ol start="2"><li>StringBuffer转String</li></ol><ul><li>通过构造方法<br>StringBuffer sb = new StringBuffer(“XXX”);<br>String s1 = new String(sb);</li><li>通过toString()方法<br>String s2 = sb.toString();</li><li>通过substring截取<br>String s3 = sb.substring(0, sb.length());</li></ul><h3 id="String和StringBuffer作为参数传递"><a href="#String和StringBuffer作为参数传递" class="headerlink" title="String和StringBuffer作为参数传递"></a>String和StringBuffer作为参数传递</h3><p>基本数据类型的值传递，不改变其值；<br>引用数据类型的值传递，改变其值；<br>String类虽然是引用数据类型，但是它作为参数传递时和基本数据类型是一样的，一旦被初始化，就不会被改变</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>StringBuffer和StringBuilder类中的方法是一样的<br>StringBuffer是JDK1.0版本的，线程安全，效率低；<br>StringBuilder是JDK1.5版本的，线程不安全，效率高；<br>String是一个不可变的字符序列，StringBuffer和StringBuilder是可变的字符序列</p><h2 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h2><h3 id="数组转成字符串"><a href="#数组转成字符串" class="headerlink" title="数组转成字符串"></a>数组转成字符串</h3><p>遍历时用StringBuffer接收，减少创建对象次数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">  sb.append(<span class="string">"["</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 若写成sb.append(arr[i] + ", "), 在运行+的命令时，会在底层创建StringBuffer对象 </span></span><br><span class="line">      sb.append(arr[i].append(<span class="string">"]"</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      sb.append(arr[i].append(<span class="string">", "</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="数组冒泡排序"><a href="#数组冒泡排序" class="headerlink" title="数组冒泡排序"></a>数组冒泡排序</h3><p>冒泡排序： 轻的上浮，沉的下降<br>原理： 两个相邻位置比较，如果前面的元素比后面的元素大，就换位置<br>代码思路： 使用嵌套循环，外层循环arr.length-1次，内循环arr.length-1-i次</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序： 用一个索引位置上的元素，依次与其他索引位置上的元素比较，小在前面，大在后面</p><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>前提： 数组有序<br>二分查找： 查找元素对应的索引</p><h3 id="Arrays类的概述和方法使用"><a href="#Arrays类的概述和方法使用" class="headerlink" title="Arrays类的概述和方法使用"></a>Arrays类的概述和方法使用</h3><ol><li>数组转字符串<br> Arrays.toString(arr);</li><li>数组排序<br> Arrays.sort(arr);</li><li>二分查找<br> Arrays.binarySearch(arr);// 此处的arr为已排序数组，若无所查值，返回负的插入点-1 </li></ol><h2 id="Integer和String类型的相互转换"><a href="#Integer和String类型的相互转换" class="headerlink" title="Integer和String类型的相互转换"></a>Integer和String类型的相互转换</h2><ol><li>int转String<ul><li>String.valueof</li><li>toString</li><li>int值+””</li><li>int转换为Integer类，再调用Integer.toString()</li></ul></li><li><p>String转int</p><ul><li>Integer.parseInt(str);// 推荐使用</li></ul><p>基本数据类型包装类有八种，其中七种都有parseXxx的方法，可以将这七种字符串表现形式转换成基本数据类型；char的包装类Character中没有parseXXX的方法</p><h2 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h2><p>自动装箱： 把基本数据类型转换成对象<br>Integer i = 100;<br>自动拆箱： 把对象转换为基本数据类型<br>int z = i + 200;<br>注： Integer为null时，会出现空指针异常</p><h2 id="Integer类相关"><a href="#Integer类相关" class="headerlink" title="Integer类相关"></a>Integer类相关</h2><p>byte的取值范围为-128~127：</p><ul><li>若在此取值范围内，自动装箱不会新创建对象，而是从常量池中获取</li><li>若超过byte的取值范围，自动装箱会创建新对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = <span class="number">127</span>;</span><br><span class="line">Integer i2 = <span class="number">127</span>;</span><br><span class="line">i1 == i2;<span class="comment">// true</span></span><br><span class="line">i1.equals(i2);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">Integer i3 = <span class="number">128</span>;</span><br><span class="line">Integer i4 = <span class="number">128</span>;</span><br><span class="line">i3 == i4;<span class="comment">// false</span></span><br><span class="line">i3.equals(i4);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="正则表达式-day-14"><a href="#正则表达式-day-14" class="headerlink" title="正则表达式(day 14)"></a>正则表达式(day 14)</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>一个用来描述或者匹配一系列符合某个语法规则的字符串的单个字符串</p><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><ul><li><code>[abc]</code>: []代表单个字符; 只能输入a、b或c</li><li><code>[^abc]</code>: 代表除a、b、c以外的所有单个字符</li><li><code>[a-zA-Z]</code>: a~z或A~Z,两头的字母包括在内</li><li><code>[a-d[m-p]]</code>: a到d或m到p: <code>[a-dm-p]</code> (并集)</li><li><code>[a-z&amp;&amp;[def]]</code>: d、e或f (交集)</li><li><code>[a-z&amp;&amp;[^bc]]</code>: a到z，除了b和c: <code>[ad-z]</code> (减去)</li><li><code>[a-z&amp;&amp;[^m-p]]</code>: a到z,而非m到p: <code>[a-lq-z]</code> (减去)</li></ul><h3 id="预定义字符"><a href="#预定义字符" class="headerlink" title="预定义字符"></a>预定义字符</h3><ul><li><code>.</code> : 任何字符,转义时需要写成<code>\\.</code></li><li><code>\d</code>: 数字：<code>[0-9]</code> (<code>\</code>代表转义字符，如果想表示\d的话，需要写成<code>\\d</code>)</li><li><code>\D</code>: 非数字： <code>[^0-9]</code></li><li><code>\s</code>: 空白字符： <code>[\t\n\x0B\f\r]</code></li><li><code>\S</code>: 非空白字符： <code>[^\s]</code></li><li><code>\w</code>: 单词字符: <code>[a-zA-Z_0-9]</code></li><li><code>\W</code>: 非单词字符: <code>[^\w]</code></li></ul><h3 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h3><ul><li><code>X?</code>: X一次或一次也没有(e.g.: <code>[abc]?</code> a、b、c出现1次或1次也没有)</li><li><code>X*</code>: X, 0次到多次</li><li><code>X+</code>: X, 1次或多次</li><li><code>X{n}</code>: X，恰好n次</li><li><code>X{n,}</code>: X, 至少n次</li><li><code>X{n,m}</code>: X, 至少n次，但是不超过m次</li></ul><h3 id="分割功能"><a href="#分割功能" class="headerlink" title="分割功能"></a>分割功能</h3><p>String.split(String regex);根据正则分割</p><h3 id="分组功能"><a href="#分组功能" class="headerlink" title="分组功能"></a>分组功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// \\1代表第一组又出现一次，\\2代表第二组又出现一次 (.)表示一个任意字符为一组</span></span><br><span class="line">String regex = <span class="string">"(.)\\1(.)\\2"</span>;</span><br><span class="line"></span><br><span class="line">String s = <span class="string">"我我....我...我.要...要要...学....学学..学.编.编编..编...程.程..程程..."</span>;</span><br><span class="line"><span class="comment">// 将所有.替换成空:我我我我要要要学学学学编编编编程程程程</span></span><br><span class="line">String s1 = s.replaceAll(<span class="string">"\\.+"</span>, <span class="string">""</span>);</span><br><span class="line"><span class="comment">// $1代表第一组中的内容，若有两个(),可以用$2</span></span><br><span class="line">String s2 = s1.replaceAll(<span class="string">"(.)\\1+"</span>, <span class="string">"$1"</span>);</span><br></pre></td></tr></table></figure><h3 id="Pattern和Matcher"><a href="#Pattern和Matcher" class="headerlink" title="Pattern和Matcher"></a>Pattern和Matcher</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pattern p = Pattern.compile(<span class="string">"a*b"</span>);<span class="comment">// 获取正则表达式</span></span><br><span class="line">Mather m = p.matcher(<span class="string">"aaaaab"</span>);<span class="comment">// 获取匹配器</span></span><br><span class="line"><span class="keyword">boolean</span> b = m.matches();<span class="comment">// 是否匹配，匹配为true</span></span><br><span class="line"><span class="comment">// 以上写法等同于： "aaaaab".matches("a*b")</span></span><br></pre></td></tr></table></figure><h3 id="获取功能"><a href="#获取功能" class="headerlink" title="获取功能"></a>获取功能</h3><ul><li>获取字符串中的手机号码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"我的手机号码是18988888888，曾用过18987654321，还用过18812345678"</span>;</span><br><span class="line">String regex = <span class="string">"1[3578]\\d&#123;9&#125;"</span>;<span class="comment">// 手机号码的正则表达式</span></span><br><span class="line">Pattern p = Pattern.compile(regex);<span class="comment">// 获取正则表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  m.find(),找到与正则相匹配的字符串</span></span><br><span class="line"><span class="keyword">while</span>(m.find())&#123;</span><br><span class="line">  <span class="comment">//  m.group(),获取匹配的字符串</span></span><br><span class="line">  System.out.println(m.group());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><p>成员方法:<br><code>abs(int a)</code> : 取绝对值<br><code>ceil(double)</code>: 向上取整，返回double<br><code>floor(double)</code>: 向下取整，返回double<br><code>max(int a, int b)</code>: 获取两者的最大值<br><code>pow(double a, double b)</code>: a为底数，b为指数<br><code>random()</code>: 生成[0.0, 1.0)的随机小数<br><code>round(float a)</code>: 四舍五入<br><code>sqrt(double a)</code>: 开平方</p><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><p>System.gc(); // 运行垃圾回收<br>System.exit(0);// 非0状态是异常中止，退出jvm<br>System.currentTimeMillis();// 获取1970年到当前时间的毫秒值</p><h2 id="BigInteger类"><a href="#BigInteger类" class="headerlink" title="BigInteger类"></a>BigInteger类</h2><p>可以让超过Integer范围内的数据进行运算</p><h2 id="Date类-util包"><a href="#Date类-util包" class="headerlink" title="Date类(util包)"></a>Date类(util包)</h2><p>1970年1月1日为UNIX TIME的纪元时间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date d1 = <span class="keyword">new</span> Date();<span class="comment">// 空参构造，代表当前时间</span></span><br><span class="line">Date d2 = <span class="keyword">new</span> Date(<span class="number">0</span>);<span class="comment">// 1970年1月1日8点，存在系统时间和本地时间的时差</span></span><br><span class="line">d1.getTime();<span class="comment">// 通过时间对象获取毫秒值</span></span><br></pre></td></tr></table></figure></p><h2 id="SimpleDateFormat类"><a href="#SimpleDateFormat类" class="headerlink" title="SimpleDateFormat类"></a>SimpleDateFormat类</h2><p>DateFormat类的子类，抽象类，不能被实例化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Date d = <span class="keyword">new</span> Date();<span class="comment">// 获取当前时间</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">sdf.format(d);<span class="comment">// 格式化时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将时间字符串转换成日期对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">String str = <span class="string">"2000年08月08日 08:08:08"</span>;</span><br><span class="line">SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">Date d1 = sdf1.parse(str);</span><br></pre></td></tr></table></figure></p><p>时间毫秒值/1000/60/60/24 得到天数</p><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line">c.get(Calendar.Year);<span class="comment">// 通过字段获取年</span></span><br><span class="line">c.get(Calendar.Month);<span class="comment">//  通过字段获取月，但月是从0开始</span></span><br><span class="line">c.get(Calendar.DAY_OF_MONTH);<span class="comment">// 月中的第几天</span></span><br><span class="line">c.get(Calendar.DAY_OF_WEEK);<span class="comment">// 周中的第几天，周日为第一天，周六为最后一天</span></span><br><span class="line"></span><br><span class="line">c.add(Calendar.Year, -<span class="number">1</span>);<span class="comment">// 对指定字段进行向前减或向后加</span></span><br><span class="line">c.set(Calendar.Year, <span class="number">2008</span>);<span class="comment">// 修改指定字段</span></span><br></pre></td></tr></table></figure><h1 id="Day15-Collection"><a href="#Day15-Collection" class="headerlink" title="Day15(Collection)"></a>Day15(Collection)</h1><h2 id="数组和集合的区别"><a href="#数组和集合的区别" class="headerlink" title="数组和集合的区别"></a>数组和集合的区别</h2><ul><li>数组既可以存储基本数据类型又可以存储引用数据类型，基本数据类型存储的是值，引用数据类型存储的是地址值；集合只能存储引用数据类型(对象)，集合中也可以存储基本数据类型，但是在存储的时候会自动装箱变成对象。</li><li>数组长度是固定的，不能自动增长；集合的长度是可变的，可以根据元素的增长而增长</li><li>元素个数是固定的推荐用数组；元素个数不固定，推荐用集合；遵循此规则节约内存，集合底层是数组，但随着集合的自动增长，会把之前的数组作废掉，产生很多内存垃圾</li></ul><h2 id="集合继承体系"><a href="#集合继承体系" class="headerlink" title="集合继承体系"></a>集合继承体系</h2><p><img src="/data/img/javase/集合继承体系图.png" alt="集合继承体系"></p><p>List集合中，add方法一定返回true,Set集合当存储重复元素时会返回false。</p><h2 id="集合转数组遍历"><a href="#集合转数组遍历" class="headerlink" title="集合转数组遍历"></a>集合转数组遍历</h2><p><code>toArray()</code>方法，将集合转换成数组<br><code>containsAll(Collection A)</code>,判断是否包含集合A<br><code>retainAll(Collection A)</code>, 取与集合A的交集</p><h2 id="迭代器原理"><a href="#迭代器原理" class="headerlink" title="迭代器原理"></a>迭代器原理</h2><p>迭代器是对集合进行遍历，而每一个集合内部的存储结构是不同的，所以每一个集合存和取是不一样的，那么就需要在每一个类中定义hasNext()和next()方法，这样做是可以的，但会使整个集合体系过于臃肿，迭代器是将这样的方法向上抽取出接口，然后在每个类的内部定义自己迭代方法，这样做的好处有而，第一规定了整个集合体系的遍历方式都是hasNext()和next()方法，第二，代码有底层内部实现，使用者不用管怎么实现的，会用即可</p><h2 id="List集合的特有功能"><a href="#List集合的特有功能" class="headerlink" title="List集合的特有功能"></a>List集合的特有功能</h2><ol><li><code>add(int index, E element)</code> 在指定位置添加元素；当存储时，出现不存在索引时，出现越界异常</li><li><code>remove(int index)</code> 通过索引删除元素，将被删除的元素返回；删除时不会自动装箱</li><li><code>get(int index)</code> 通过索引获取元素</li><li><p><code>set(int index, E element)</code> 设置指定索引位置的值</p><h2 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h2><p>遍历的同时在增加元素，出发并发修改异常。<br>解决方法：使用List特有的迭代器ListIterator,可在遍历时添加元素</p><h2 id="List三个子类的特点"><a href="#List三个子类的特点" class="headerlink" title="List三个子类的特点"></a>List三个子类的特点</h2><ul><li>ArrayList： 底层数据结构是数组，查询快，增删慢，线程不安全，效率高</li><li>Vector: 底层数据结构是数组，查询快，增删慢，线程安全，效率低</li><li>LinkedList： 底层数据结构是链表，查询慢，增删快，线程不安全，效率高</li></ul><p>综上，查询多时用ArrayList，增删多用LinkedList，如果都多，用ArrayList。</p></li></ol><h1 id="Day016-List"><a href="#Day016-List" class="headerlink" title="Day016 (List)"></a>Day016 (List)</h1><p><code>contains</code>方法和<code>remove</code>方法，底层依赖的是equals方法</p><h2 id="栈和队列数据结构"><a href="#栈和队列数据结构" class="headerlink" title="栈和队列数据结构"></a>栈和队列数据结构</h2><p>栈结构： 先进后出(类似纵向管道)<br>队列结构：先进先出(类似横向管道)</p><h2 id="泛型generic"><a href="#泛型generic" class="headerlink" title="泛型generic"></a>泛型generic</h2><p>好处： </p><ol><li>提高安全性(将运行期的错误转到编译期)</li><li>省去强转的麻烦</li></ol><p>注意事项：</p><ol><li>前后的泛型必须一致，或者后面的泛型可以省略不用写(1.7的新特性)</li><li>泛型不要定义为Object，没有意义</li></ol><h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><ol><li><code>&lt;?&gt;</code> 当右边泛型不确定时，左边可以用<code>?</code></li><li><code>? extends E</code>  向下限定，E及其子类</li><li><code>? super E</code> 向上限定, E及其父类</li></ol><h2 id="增强for循环-foreach"><a href="#增强for循环-foreach" class="headerlink" title="增强for循环(foreach)"></a>增强for循环(foreach)</h2><ol><li>概述： 简化数组和Collection集合的遍历</li><li>格式：<br>   for(元素数据类型 变量: 数组或Collection集合) {<pre><code>使用变量即可，该变量就是元素</code></pre>   }<br>增强for循环底层依赖的是迭代器Iterator</li></ol><h2 id="三种迭代的删除"><a href="#三种迭代的删除" class="headerlink" title="三种迭代的删除"></a>三种迭代的删除</h2><ol><li>普通for循环的删除，通过索引删除，索引要用<code>i--</code></li><li>迭代器删除，不能用集合的删除方法，会引发并发修改异常，只能用迭代器自带的remove方法。</li><li>增强for循环，不能删除，只能遍历</li></ol><h2 id="静态导入-开发中不常用"><a href="#静态导入-开发中不常用" class="headerlink" title="静态导入(开发中不常用)"></a>静态导入(开发中不常用)</h2><p>概念： 导入类中的静态方法<br>格式： import static 包名···.类名.方法名<br>注意事项： 方法必须是静态的，如果有多个同名的静态方法，容易不知道使用谁，如果要使用，必须加前缀</p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>概述： 定义方法的时候不知道该定义多少个参数时使用可变参数<br>格式： 修饰符 返回值类型 方法名(数据类型… 变量名){}<br>注意事项： </p><ul><li>可变参数其实是一个数组</li><li>如果一个方法有可变参数，并且有多个参数，那么可变参数肯定是最后一个</li></ul><h2 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h2><p><code>asList</code>： 数组转换成集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(arr);</span><br></pre></td></tr></table></figure></p><p>注： </p><ol><li>数组用asList转为集合后，不能增加或减少元素，但是可以用集合的思想操作数组，可以用其它集合方法</li><li>基本数据类型的数组转换成集合，会将整个数组当做一个对象转换；将数组转换成集合，必须是引用数据类型</li></ol><p><code>toArray</code>： 将集合转成数组<br>若数组的长度 &lt;= 集合的size,转换后的数组长度=集合的size<br>若数组长度 &gt; 集合的size,分配数组的长度=指定长度</p><h1 id="Day017-Set"><a href="#Day017-Set" class="headerlink" title="Day017(Set)"></a>Day017(Set)</h1><p>Set集合无索引，不可重复，无序(存取不一致)</p><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>使用线程池管理线程好处： </p><ol><li><p>使用线程池可以重复利用已有的线程继续执行任务，避免线程在创建和销毁时造成的损耗</p></li><li><p>由于没有线程创建和销毁时的损耗，可以提高系统响应速度</p></li><li><p>通过线程可以对线程进行合理的管理，根据系统的承受能力调整可运行的线程数量大小</p></li></ol><h3 id="线程池工作原理"><a href="#线程池工作原理" class="headerlink" title="线程池工作原理"></a>线程池工作原理</h3><h3 id="线程池的分类"><a href="#线程池的分类" class="headerlink" title="线程池的分类"></a>线程池的分类</h3><h4 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a><code>ThreadPoolExecutor</code></h4><ul><li><p><code>newCacheThreadPool</code></p><p>构造方法不带线程池容量，最大容量为<code>Integer.MAX_VALUE</code></p></li><li><p><code>newFixedThreadPool</code></p><p>构造方法中需要设定线程池容量</p></li><li><p><code>newSingleThreadPool</code></p><p>单个线程</p></li></ul><h4 id="ScheduledThreadPoolExecutor"><a href="#ScheduledThreadPoolExecutor" class="headerlink" title="ScheduledThreadPoolExecutor"></a><code>ScheduledThreadPoolExecutor</code></h4><ul><li><p><code>newSingleThreadScheduledExecutor</code></p></li><li><p><code>newScheduledThreadPool</code></p></li></ul><h4 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a><code>ForkJoinPool</code></h4><ul><li><code>newWorkStealingPool</code></li></ul><h3 id="线程池的生命周期"><a href="#线程池的生命周期" class="headerlink" title="线程池的生命周期"></a>线程池的生命周期</h3><p>RUNNING –&gt; SHUTDOWN –&gt; TIDYING –&gt; TERMINATED</p><p>或：</p><p>RUNNING –&gt; STOP –&gt; TIDYING –&gt; TERMINATED</p><p><code>RUNNING</code>: 能接受新提交的任务，并能处理阻塞队列中的任务</p><p><code>SHUTDOWN</code>: 关闭状态，不再接受新提交的任务，但可以继续处理阻塞队列中以保存的任务</p><p><code>STOP</code>: 不能接受新任务也不处理队列中的任务，会中断正在处理任务的线程</p><p><code>TIDYING</code>: 如果所有的任务都已经终止了，workerCount(有效线程数)为0，线程池进入该状态后会调用<code>terminated()</code>方法进入<code>TERMINATED</code>状态</p><p><code>TERMINATED</code>: 在<code>terminated()</code>方法执行完后进入该状态，默认<code>terminated()</code>方法中什么也没有做</p><h3 id="ThreadPoolExecutor参数解析"><a href="#ThreadPoolExecutor参数解析" class="headerlink" title="ThreadPoolExecutor参数解析"></a>ThreadPoolExecutor参数解析</h3><p>线程池最终调用的都是<code>ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</code>方法</p><ul><li><p><code>corePoolSize</code> </p><p>核心线程池数量</p></li><li><p><code>maximumPoolSize</code></p></li><li><p><code>keepAliveTime</code></p></li><li><p><code>unit</code></p></li><li><p><code>workQueue</code></p></li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2>]]></content>
      
      <categories>
          
          <category> javase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Language </tag>
            
            <tag> javase </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>你好，世界</title>
      <link href="/2019/05/12/others/hello-world/"/>
      <url>/2019/05/12/others/hello-world/</url>
      <content type="html"><![CDATA[<p>我的第一篇文章</p><h2 id="github-jeykll-markdown个人书写习惯"><a href="#github-jeykll-markdown个人书写习惯" class="headerlink" title="github-jeykll-markdown个人书写习惯"></a>github-jeykll-markdown个人书写习惯</h2><blockquote><p>2017-07-01 之后使用hexo书写博客, 格式依然可用</p></blockquote><h3 id="元信息"><a href="#元信息" class="headerlink" title="元信息"></a>元信息</h3><p>categories和tags都可以有多个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">categories: [cat1, cat2]</span><br><span class="line">tags: [tag1, tag2, tag3]</span><br></pre></td></tr></table></figure><h3 id="md语法"><a href="#md语法" class="headerlink" title="md语法"></a>md语法</h3><ul><li>md文件中可以使用html标签</li><li><code>---</code>代表分割线</li></ul><h3 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h3><p>正文的第一级标题用h2(<code>##</code>)，标题和字段间要有换行</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li><p>列表（有序/无序）下面显示 <strong>代码、引用、图片</strong> 时：相对列表的该子项代码需要多缩进一个Tab（4个空格），且中间要空行，如：</p><pre>- 标题  &#x60;&#x60;&#x60;html    ...  &#x60;&#x60;&#x60;</pre></li><li><p>引用需要上下都空一行，列表只需要在上面空一行</p></li><li><p>子列表基于父列表要有一个Tab缩进（4个空格），中间无需空行</p></li></ul><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注支持链接跳转，注意脚注与被批注文本之间有一个空格</p><pre>标题或者文字 [^1]---参考文章[^1]: [http://blog.aezo.cn](http://blog.aezo.cn)</pre><h2 id="github-hexo-markdown个人书写习惯"><a href="#github-hexo-markdown个人书写习惯" class="headerlink" title="github-hexo-markdown个人书写习惯"></a>github-hexo-markdown个人书写习惯</h2><h3 id="修改文章后保存源码并更新博客"><a href="#修改文章后保存源码并更新博客" class="headerlink" title="修改文章后保存源码并更新博客"></a>修改文章后保存源码并更新博客</h3><ul><li><p><strong>更新步骤如下</strong> (或者直接执行项目目录下的<strong>blog-deploy.sh</strong>文件)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo clean # 有时候修改了静态文件需要先clean一下</span><br><span class="line"><span class="meta">$</span> git add .</span><br><span class="line"><span class="meta">$</span> git commit -am "update blog"</span><br><span class="line"><span class="meta">$</span> git push origin master:source</span><br><span class="line"><span class="meta">$</span> hexo g &amp;&amp; gulp &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li></ul><h3 id="博客源码管理和博客更新"><a href="#博客源码管理和博客更新" class="headerlink" title="博客源码管理和博客更新"></a>博客源码管理和博客更新</h3><ul><li>本地处于master分支，远程有master(为博客渲染后的代码)和source(博客源码, 可设为远程默认分支)两个分支</li><li><p>更新博客 <code>hexo d -g</code></p><ul><li><p><code>_config.yml</code>文件中需要指向master分支</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/aezocn/aezocn.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><ul><li><code>hexo clean</code> 清除缓存(如果未修改配置文件可不运行)</li><li><code>hexo g</code>/<code>hexo generate</code> 静态文件生成(修改主题文件可不用重新启动服务)</li><li><code>hexo s -p 5000</code>(<code>hexo server</code>) <strong>启动本地服务器(本地测试)</strong></li><li><code>hexo d</code>/<code>hexo deploy</code> 部署到github</li></ul><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><ul><li>clone远程source分支到本地master分支</li><li><code>npm install -g hexo-cli</code> 全局安装hexo</li><li><code>npm install</code> 初始化</li><li>按照上述【修改文章后保存源码并更新博客】进行部署</li></ul><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul><li>图片格式如：<code>![hello](/data/images/2017/07/hello.png)</code></li><li>内部链接格式如：<code>[http://blog.aezo.cn/2017/01/16/arch/nginx/](/_posts/arch/nginx.md#基于编译安装tengine)</code>，其中<code>#</code>后面为完整子标题</li><li>hexo转义字符：<code>{: &amp;#123;</code>、<code>}: &amp;#125;</code> (如写vue代码的时会出现双括号导致hexo编译失败)</li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><ul><li>NexT主题本地搜索<ul><li>安装：<code>npm install --save hexo-generator-search</code></li><li>开启local_search</li><li>还可手动写本地搜索功能 <a href="http://www.hahack.com/codes/local-search-engine-for-hexo/" title="jQuery-based Local Search Engine for Hexo" target="_blank" rel="noopener">^1</a></li></ul></li><li>基于Swiftype的搜索</li></ul><h4 id="PlantUML"><a href="#PlantUML" class="headerlink" title="PlantUML"></a>PlantUML</h4><ul><li><code>npm install --save hexo-filter-plantuml</code> 安装插件(vscode可以再配合插件<code>PlantUML</code>使用)</li><li>markdown语法如下</li></ul><pre>&#x60;&#x60;&#x60;plantuml@startuml/' 样式(背景和波浪线条)和标题。这是代码注释，不会渲染 '/skinparam backgroundColor #EEEBDCskinparam handwritten truetitle  标题和水印 &lt;img:http://blog.aezo.cn/aezocn.png&gt;end titleBob->Alice : hello@enduml&#x60;&#x60;&#x60;</pre><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><h4 id="next"><a href="#next" class="headerlink" title="next"></a>next</h4><ul><li>自定义代码在<code>/themes/next/layout/_custom/</code>目录下</li><li>footer代码修改 <code>/themes/next/layout/_partials/footer.swig</code></li><li>部分图片禁用fancybox，可在img上加<code>class=&quot;nofancybox&quot;</code>。需要修改主题中的js文件，详细修改方法参考<a href="https://blog.csdn.net/cddchina/article/details/79764432" target="_blank" rel="noopener">https://blog.csdn.net/cddchina/article/details/79764432</a></li></ul><hr><p>参考文章</p>]]></content>
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
